# Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types

Welcome to this tutorial on annotating single-cell datasets with reference collections. The **scRNAseq** ([R/Bioc](https://bioconductor.org/packages/devel/data/experiment/html/scRNAseq.html), [Python](https://github.com/BiocPy/scrnaseq)) package provides access to public single-cell RNA-seq datasets for use by other Bioconductor/BiocPy packages and workflows. These datasets are stored in language-agnostic representations described in [ArtifactDB](https://github.com/artifactdb), enabling easy access to datasets and analysis results across multiple programming languages such as R and Python. We will showcase how to integrate and process single-cell datasets across languages, such as R and Python, and how to annotate cell types using reference datasets. 

## Outline

In this tutorial, you will learn how to:

- Install and set up BiocPy packages in your Python environment.
- Explore the `scrnaseq` package and access public single-cell RNA-seq datasets.
- Perform basic operations on `SingleCellExperiment` objects, the core data structure for single-cell data.
- Annotate cell types using reference datasets from the `celldex` package.
- Understand the design principles behind BiocPy.

Let's dive into the process!

## Prerequisites

Before we begin, please ensure that you have the following prerequisites installed:

- Python 3.8 or later with dependencies listed [here]([../requirements.txt](https://github.com/BiocPy/BiocWorkshop2024/blob/master/requirements.txt)).
- R 4.4.0 and Bioconductor packages listed [here]([../rpackages.R](https://github.com/BiocPy/BiocWorkshop2024/blob/master/rpackages.R)).

## Installation

Let's start by installing the required packages.

::: {.panel-tabset}

## R
```r
BiocManager::install(c("scRNAseq", "celldex", "SingleR"), 
     repos='http://cran.us.r-project.org')
```

This will install the `scRNAseq`, `celldex`, `SingleR`, packages from Bioconductor.


## Python (shell)

```sh
pip install scrnaseq celldex singler
```

This will install the `scrnaseq`, `celldex`, `singler` packages from PyPI.

:::

## Accessing and Exploring Single-Cell Datasets

Now that we have the necessary packages installed, let's explore the `scrnaseq` package and learn how to access public single-cell RNA-seq datasets. Datasets published to the `scrnaseq` package are decorated with metadata such as the study title, species, number of cells, etc., to facilitate discovery. Let's see how we can list and search for datasets.

### List All Datasets

The `list_datasets()` function in Python or `surveyDatasets()` in R will display all available datasets published to the `scRNAseq` collection along with their metadata.

::: {.panel-tabset}

## R
```{r}
suppressMessages(library(scRNAseq))
all_ds <- surveyDatasets()
head(all_ds[, c("name", "title", "version")], 3)
```

## Python
```{python}
import scrnaseq
datasets = scrnaseq.list_datasets()
datasets[["name", "title", "version"]].head(3)
```

:::

This R|Python code lists all available datasets in the `scrnaseq` package and displays their names, titles, and versions.

### Search for Datasets

You can also search for datasets based on metadata using `search_datasets()` in Python or `searchDatasets()` in R. This supports both simple text queries and complex boolean expressions.

::: {.panel-tabset}

## R
```{r}
pancreas_ds <- searchDatasets("pancreas")
head(pancreas_ds[, c("name", "title", "version")], 3)
```

## Python
```{python}
import scrnaseq

pancreas_datasets = scrnaseq.search_datasets("pancreas")
pancreas_datasets[["name", "title", "version"]].head(3)
```

:::

This R|Python code searches for datasets containing the term "pancreas" and displays their names, titles, and versions.

#### Advanced Searches

For more complex searches involving boolean operations, use `define_text_query()` in Python or `defineTextQuery()` in R. Hereâ€™s an example to find datasets using the mouse reference genome (`GRCm38`) and containing the words `neuro` or `pancrea`.

::: {.callout-tip}
Check out the reference manual for more details and usage of these functions.
:::

::: {.panel-tabset}

## R
```{r}
suppressWarnings(library(gypsum))
res <- searchDatasets(
    defineTextQuery("GRCm38", field="genome") &
    (defineTextQuery("neuro%", partial=TRUE) | 
     defineTextQuery("pancrea%", partial=TRUE))
)
head(res[,c("name", "title", "version")], 3)
```

## Python
```{python}
from gypsum_client import define_text_query
import scrnaseq

res = scrnaseq.search_datasets(
     define_text_query("GRCm38", field="genome")
     & (
          define_text_query("neuro%", partial=True)
          | define_text_query("pancrea%", partial=True)
     )
)
res[["name", "title", "version"]].head(3)
```

:::

This R|Python code performs a complex search to find datasets tagged as "mouse" in the reference genome field and containing the keywords "neuro" or "pancrea".

::: {.callout-important}
Once a dataset is identified, always list the name and version of the dataset in your scripts for reproducibility.
:::

## Download dataset

After identifying a dataset of interest, use `fetch_dataset()` in Python or `fetchDataset()` in R to download the dataset. This will load the dataset as a `SingleCellExperiment` object.

::: {.callout-note}
R/Bioconductor users might already be familiar with the [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) class. BiocPy also provides the same implementation in the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) package.
:::

For this tutorial, let's download the `zeisel-brain` dataset:

::: {.panel-tabset}

## R
```{r}
sce <- fetchDataset("zeisel-brain-2015", "2023-12-14", realize.assays=TRUE)
sce
```

## Python
```{python}
import scrnaseq
sce = scrnaseq.fetch_dataset("zeisel-brain-2015", "2023-12-14", realize_assays=True)
print(sce)
```

:::

### Side-quest on `SingleCellExperiment` in Python

The Python implementation of the `SingleCellExperiment` class adheres to Bioconductor's specification and offers similar interface and methods. Our goal is to make it simple for analysts to switch between R and Python. A key difference is the shift from functional to an object-oriented paradigm.

::: {.callout-note}
For more details on the design, refer to the [BiocPy developer guide](https://github.com/BiocPy/developer_guide) or the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) documentation.
:::

This Python code demonstrates basic operations on a `SingleCellExperiment` object, including retrieving assay names, column names, column metadata, accessing counts, and coercing to an `AnnData` object for interoperability with existing analysis ready eco-systems in Python.

```{python}
## repeated because quarto's build does not keep state of python snippets across the notebook.
import scrnaseq
sce = scrnaseq.fetch_dataset("zeisel-brain-2015", "2023-12-14")

print("assays: ", sce.get_assay_names()) # or sce.assay_names

print("column names: ", sce.get_column_names()) # or sce.column_names

print("column metadata:", sce.get_column_data()) # or sce.column_data

print("access counts ", sce.assays["counts"]) # or # sce.assay("counts")

print("coerce to AnnData", sce.to_anndata())
```

## Annotate Cell Types

We can now annotate cell types by using reference datasets and matching cells based on their expression profiles. In this tutorial, we will use [singleR](https://github.com/SingleR-inc/SingleR) in R or its Python equivalent [singler](https://github.com/BiocPy/singler).

Before running the `singler` algorithm, we need to download an appropriate reference dataset from the `celldex` package.

### Access Reference Datasets from `celldex`

Similar to the `scRNAseq` package, the `celldex` package provides access to the collection of reference expression datasets with curated cell type labels, for use in procedures like automated annotation of single-cell data or deconvolution of bulk RNA-seq to reference datasets. These datasets are also stored in language-agnostic representations for use in downstream analyses.

::: {.callout-note}
The `celldex` package is available on [R/Bioconductor](https://bioconductor.org/packages/devel/data/experiment/html/celldex.html) and [PyPI](https://github.com/BiocPy/celldex).
:::

For this tutorial, let's download the [Immunological Genome Project (immgen)](https://www.immgen.org/) reference from `celldex` using `fetch_reference()` in Python or `fetchReference()` in R.

::: {.panel-tabset}

## R
```{r}
suppressWarnings(library(celldex))
immgen_ref <- fetchReference("immgen", "2024-02-26", realize.assays=TRUE)
immgen_ref
```

## Python
```{python}
import celldex

immgen_ref = celldex.fetch_reference("immgen", "2024-02-26", realize_assays=True)
print(immgen_ref)
```

:::

Now, let's identify cells from the `zeisel-brain` dataset using the `immgen` reference dataset.

::: {.panel-tabset}

## R
```{r}
suppressWarnings(library(SingleR))
cell_labels <- SingleR(test = assay(sce, "counts"), ref = immgen_ref, labels = immgen_ref$label.main)

table(cell_labels$labels)
```

## Python
```{python}
import singler

import scrnaseq
sce = scrnaseq.fetch_dataset("zeisel-brain-2015", "2023-12-14", realize_assays=True)

import celldex
immgen_ref = celldex.fetch_reference("immgen", "2024-02-26", realize_assays=True)

matches = singler.annotate_single(
    test_data=sce, 
    ref_data = immgen_ref,
    ref_labels = "label.main"
)

import pandas as pd

pd.Series(matches["best"]).value_counts()
```

Note: Since the python snippets use reticulate when built through Quarto, it does not keep the objects from prior code-blocks. Hence the code chunk is longer.
:::

## Visualizing Single-Cell Data

I can't have a tutorial without a section on visualization or figures.

TODO: generate embeddings and then visualize clusters


::: {.panel-tabset}

## R

We will use the ggplot2 package in R to create visualizations. First, let's visualize the cell type annotations.

```{r}
suppressWarnings(library(SingleR))
suppressWarnings(library(ggplot2))
cell_labels <- SingleR(test = assay(sce, "counts"), ref = immgen_ref, labels = immgen_ref$label.main)
sce$labels <- cell_labels$labels

ggplot(as.data.frame(colData(sce)), aes(x = labels)) +
    geom_bar() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Cell Type Annotations", x = "Cell Type", y = "Count")
```


## Python

We will use the seaborn and matplotlib packages in Python to create visualizations. First, let's visualize the cell type annotations.

```{python}
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import singler

import scrnaseq
sce = scrnaseq.fetch_dataset("zeisel-brain-2015", "2023-12-14", realize_assays=True)

import celldex
immgen_ref = celldex.fetch_reference("immgen", "2024-02-26", realize_assays=True)

matches = singler.annotate_single(
    test_data=sce, 
    ref_data=immgen_ref,
    ref_labels="label.main"
)

cell_labels = pd.Series(matches["best"]).value_counts()

sns.barplot(x=cell_labels.index, y=cell_labels.values)
plt.xticks(rotation=45, ha='right')
plt.title("Cell Type Annotations")
plt.xlabel("Cell Type")
plt.ylabel("Count")
plt.show()
```

:::

## Homework: Performing Differential Expression Analysis

Differential expression analysis helps identify genes that are differentially expressed between different cell types or conditions. Let's explore how to identify markers for various cell types.

### Differential Expression Analysis in Python

We will use the scanpy package in Python to perform differential expression analysis.

```python
import scanpy as sc

import scrnaseq
sce = scrnaseq.fetch_dataset("zeisel-brain-2015", "2023-12-14", realize_assays=True)

import celldex
immgen_ref = celldex.fetch_reference("immgen", "2024-02-26", realize_assays=True)

import singler
matches = singler.annotate_single(
    test_data=sce, 
    ref_data=immgen_ref,
    ref_labels="label.main"
)

# Prepare the data
adata, _ = sce.to_anndata()
adata.obs['labels'] = matches["best"]
adata.X = sc.pp.normalize_total(adata, target_sum=1e4, inplace=False)['X']

# Perform differential expression analysis
sc.tl.rank_genes_groups(adata, groupby='labels')
sc.pl.rank_genes_groups(adata, n_genes=20, sharey=False)
```

Congratulations! You have now completed the tutorial on accessing single-cell datasets using `scRNAseq` and `ArtifactDB`, and annotating cell types using reference datasets from `celldex`. For more detailed usage and advanced analyses, refer to the respective documentation of these packages.

By integrating R and Python workflows, you can leverage the strengths of both languages and perform comprehensive single-cell analysis. Keep exploring and happy analyzing!
