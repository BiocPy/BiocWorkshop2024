[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "Welcome to our workshop on exploring the data structures and packages available in BiocPy, a project that aims to facilitate Bioconductor workflows in Python.\nIn this workshop, we will focus on interoperability between R and Python, covering two main topics:\n\nReading an RDS file containing GenomicRanges and performing downstream range-based analyses.\nAnnotating single-cell RNA-seq data using the scrnaseq package.\n\nAttendees will learn how to represent and manipulate their datasets in Python in the same manner as in R/Bioconductor. All packages in BiocPy are published to PyPI, and the code is open-source on GitHub.\n\n\n\n\nJayaram Kancherla\nAaron Lun\n\nWe are looking for more contributions from the community to improve our packages! If you are interested, please check out the issues or discussion in our GitHub organization.\n\n\n\n\n\nA more detailed tutorial on BiocPy representations is available here.\nCheck out all the package in the BiocPy ecosystem on GitHub.\n\n\n\n\nThis is a reproducible Quarto book with reusable snippets. To learn more about Quarto books visit https://quarto.org/docs/books. Check out sessioninfo for more information.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "Welcome to our workshop on exploring the data structures and packages available in BiocPy, a project that aims to facilitate Bioconductor workflows in Python.\nIn this workshop, we will focus on interoperability between R and Python, covering two main topics:\n\nReading an RDS file containing GenomicRanges and performing downstream range-based analyses.\nAnnotating single-cell RNA-seq data using the scrnaseq package.\n\nAttendees will learn how to represent and manipulate their datasets in Python in the same manner as in R/Bioconductor. All packages in BiocPy are published to PyPI, and the code is open-source on GitHub.\n\n\n\n\nJayaram Kancherla\nAaron Lun\n\nWe are looking for more contributions from the community to improve our packages! If you are interested, please check out the issues or discussion in our GitHub organization.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#other-resources",
    "href": "index.html#other-resources",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "A more detailed tutorial on BiocPy representations is available here.\nCheck out all the package in the BiocPy ecosystem on GitHub.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#developer-notes",
    "href": "index.html#developer-notes",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "This is a reproducible Quarto book with reusable snippets. To learn more about Quarto books visit https://quarto.org/docs/books. Check out sessioninfo for more information.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "notebook/annotate_cell_types.html",
    "href": "notebook/annotate_cell_types.html",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "",
    "text": "Welcome to this tutorial on annotating single-cell datasets with reference collections. The scRNAseq (R/Bioc, Python) package provides access to public single-cell RNA-seq datasets for use by other Bioconductor/BiocPy packages and workflows. These datasets are stored in language-agnostic representations described in ArtifactDB, enabling easy access to datasets and analysis results across multiple programming languages such as R and Python. We will showcase how to integrate and process single-cell datasets across languages, such as R and Python, and how to annotate cell types using reference datasets."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#outline",
    "href": "notebook/annotate_cell_types.html#outline",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Outline",
    "text": "Outline\nIn this tutorial, you will learn how to:\n\nInstall and set up BiocPy packages in your Python environment.\nExplore the scrnaseq package and access public single-cell RNA-seq datasets.\nPerform basic operations on SingleCellExperiment objects, the core data structure for single-cell data.\nAnnotate cell types using reference datasets from the celldex package."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#prerequisites",
    "href": "notebook/annotate_cell_types.html#prerequisites",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#installation",
    "href": "notebook/annotate_cell_types.html#installation",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Installation",
    "text": "Installation\nLet’s start by installing the required packages.\n!pip install scrnaseq celldex singler\nThis will install the scrnaseq, celldex, singler packages from PyPI.\n\nR\nBiocManager::install(c(\"scRNAseq\", \"celldex\", \"SingleR\"), \n     repos='http://cran.us.r-project.org')\nThis will install the scRNAseq, celldex, SingleR, packages from Bioconductor."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "href": "notebook/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "1. Accessing and Exploring Single-Cell Datasets",
    "text": "1. Accessing and Exploring Single-Cell Datasets\nNow that we have the necessary packages installed, let’s explore the scrnaseq package and learn how to access public single-cell RNA-seq datasets. Datasets published to the scrnaseq package are decorated with metadata such as the study title, species, number of cells, etc., to facilitate discovery. Let’s see how we can list and search for datasets.\n\n1.1 List All Datasets\nThe list_datasets() function in Python or surveyDatasets() in R will display all available datasets published to the scRNAseq collection along with their metadata.\n\nimport scrnaseq\ndatasets = scrnaseq.list_datasets()\ndatasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\naztekin-tail-2019\nIdentification of a regeneration-organizing ce...\n2023-12-14\n\n\n1\nsplicing-demonstration-2020\n[reprocessed, subset] The Mammalian Spermatoge...\n2023-12-20\n\n\n2\nmarques-brain-2016\nOligodendrocyte heterogeneity in the mouse juv...\n2023-12-19\n\n\n\n\n\n\n\n\nR\nsuppressMessages(library(scRNAseq))\nall_ds &lt;- surveyDatasets()\nhead(all_ds[, c(\"name\", \"title\", \"version\")], 3)\nThis lists all available datasets in the scrnaseq package and displays their names, titles, and versions.\n\n\n\n1.2 Search for Datasets\nYou can also search for datasets based on metadata using search_datasets() in Python or searchDatasets() in R. This supports both simple text queries and complex boolean expressions.\n\nimport scrnaseq\n\npancreas_datasets = scrnaseq.search_datasets(\"pancreas\")\npancreas_datasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\nmuraro-pancreas-2016\nA Single-Cell Transcriptome Atlas of the Human...\n2023-12-19\n\n\n2\nbaron-pancreas-2016\nA Single-Cell Transcriptomic Map of the Human ...\n2023-12-14\n\n\n\n\n\n\n\n\nR\npancreas_ds &lt;- searchDatasets(\"pancreas\")\nhead(pancreas_ds[, c(\"name\", \"title\", \"version\")], 3)\nThis R|Python code searches for datasets containing the term “pancreas” and displays their names, titles, and versions.\n\n\n1.2.1 Advanced Searches\nFor more complex searches involving boolean operations, use define_text_query() in Python or defineTextQuery() in R. Here’s an example to find datasets using the mouse reference genome (GRCm38) and containing the words neuro or pancrea.\nCheck out the reference manual for more details and usage of these functions.\n\nfrom gypsum_client import define_text_query\nimport scrnaseq\n\nres = scrnaseq.search_datasets(\n     define_text_query(\"GRCm38\", field=\"genome\")\n     & (\n          define_text_query(\"neuro%\", partial=True)\n          | define_text_query(\"pancrea%\", partial=True)\n     )\n)\nres[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\ncampbell-brain-2017\nA molecular census of arcuate hypothalamus and...\n2023-12-14\n\n\n2\nhu-cortex-2017\nDissecting cell-type composition and activity-...\n2023-12-20\n\n\n\n\n\n\n\n\n\nR\nsuppressWarnings(library(gypsum))\nres &lt;- searchDatasets(\n    defineTextQuery(\"GRCm38\", field=\"genome\") &\n    (defineTextQuery(\"neuro%\", partial=TRUE) | \n     defineTextQuery(\"pancrea%\", partial=TRUE))\n)\nhead(res[,c(\"name\", \"title\", \"version\")], 3)\nThis performs a complex search to find datasets tagged as “mouse” in the reference genome field and containing the keywords “neuro” or “pancrea”.\nOnce a dataset is identified, always list the name and version of the dataset in your scripts for reproducibility."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#download-dataset",
    "href": "notebook/annotate_cell_types.html#download-dataset",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "2. Download dataset",
    "text": "2. Download dataset\nAfter identifying a dataset of interest, use fetch_dataset() in Python or fetchDataset() in R to download the dataset. This will load the dataset as a SingleCellExperiment object.\nR/Bioconductor users might already be familiar with the [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) class. BiocPy also provides the same implementation in the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) package.\nFor this tutorial, let’s download the zeisel-brain dataset:\n\nimport scrnaseq\nsce = scrnaseq.fetch_dataset(\"zeisel-brain-2015\", \"2023-12-14\")\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\n\nR\nsce &lt;- fetchDataset(\"zeisel-brain-2015\", \"2023-12-14\")\nsce\n\n\n2.1 Side-quest on SingleCellExperiment in Python\nThe Python implementation of the SingleCellExperiment class adheres to Bioconductor’s specification and offers similar interface and methods. Our goal is to make it simple for analysts to switch between R and Python. A key difference is the shift from functional to an object-oriented paradigm.\nFor more details on the design, refer to the [BiocPy developer guide](https://github.com/BiocPy/developer_guide) or the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) documentation.\nThis Python code demonstrates basic operations on a SingleCellExperiment object, including retrieving assay names, column names, column metadata, accessing counts, and coercing to an AnnData object for interoperability with existing analysis ready eco-systems in Python.\n\nprint(\"assays: \", sce.get_assay_names()) # or sce.assay_names\n\nprint(\"column names: \", sce.get_column_names()[:10]) # or sce.column_names\n\nprint(\"column metadata: \", sce.get_column_data()) # or sce.column_data\n\nprint(\"access counts: \", sce.assays[\"counts\"]) # or # sce.assay(\"counts\")\n\nassays:  ['counts']\ncolumn names:  ['1772071015_C02', '1772071017_G12', '1772071017_A05', '1772071014_B06', '1772067065_H06', '1772071017_E02', '1772067065_B07', '1772067060_B09', '1772071014_E04', '1772071015_D04']\ncolumn metadata:  BiocFrame with 3005 rows and 9 columns\n                       tissue            group #     total mRNA mol               well                sex                age           diameter\n                 &lt;StringList&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt;\n1772071015_C02       sscortex                1.0            21580.0               11.0                1.0               21.0                0.0\n1772071017_G12       sscortex                1.0            21748.0               95.0               -1.0               20.0               9.56\n1772071017_A05       sscortex                1.0            31642.0               33.0               -1.0               20.0               11.1\n                          ...                ...                ...                ...                ...                ...                ...\n1772063068_D01       sscortex                9.0             4015.0                4.0                1.0               26.0               8.63\n1772066098_A12 ca1hippocampus                9.0             2896.0               89.0               -1.0               26.0               9.23\n1772058148_F03       sscortex                9.0             4460.0               22.0                1.0               26.0               10.4\n                     level1class  level2class\n                    &lt;StringList&gt; &lt;StringList&gt;\n1772071015_C02      interneurons        Int10\n1772071017_G12      interneurons        Int10\n1772071017_A05      interneurons         Int6\n                             ...          ...\n1772063068_D01 endothelial-mural         Vsmc\n1772066098_A12 endothelial-mural         Vsmc\n1772058148_F03 endothelial-mural         Vsmc\naccess counts:  &lt;20006 x 3005&gt; sparse ReloadedArray object of type 'uint16'\n[[  0,   0,   0, ...,   0,   0,   1],\n [  3,   1,   0, ...,   0,   0,   1],\n [  3,   1,   6, ...,   0,   0,   0],\n ...,\n [158, 326, 209, ..., 193,  36, 359],\n [ 31,  88,  97, ...,  50,  12,  52],\n [ 13,  14,   9, ...,  18,   3,  13]]\n\n\nThe package uses [delayed arrays](https://github.com/biocpy/delayedarray), to load file-backed arrays and matrices. This reduces memory usage when loading large datasets. This package provides similar functionality to the R/Bioconductor's [DelayedArray](https://www.bioconductor.org/packages/release/bioc/html/DelayedArray.html) eco-system. \n\nfrom delayedarray import to_scipy_sparse_matrix\nprint(\"counts as csr: \")\nprint(repr(to_scipy_sparse_matrix(sce.assays[\"counts\"], \"csc\")))\n\ncounts as csr: \n&lt;20006x3005 sparse matrix of type '&lt;class 'numpy.uint16'&gt;'\n    with 11349080 stored elements in Compressed Sparse Column format&gt;\n\n\nor realize the entire matrix when loaded from disk,\n\nsce = scrnaseq.fetch_dataset(\n    \"zeisel-brain-2015\", \"2023-12-14\", \n    realize_assays=True)\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\nWe also provide coercions to various package to take advantage of methods in the Python ecosystem, e.g. scverse and AnnData\n\nprint(\"coerce to AnnData: \", sce.to_anndata())\n\ncoerce to AnnData:  (AnnData object with n_obs × n_vars = 3005 × 20006\n    obs: 'tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class', 'rownames'\n    var: 'featureType', 'rownames'\n    layers: 'counts', None)"
  },
  {
    "objectID": "notebook/annotate_cell_types.html#annotate-cell-types",
    "href": "notebook/annotate_cell_types.html#annotate-cell-types",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "3. Annotate Cell Types",
    "text": "3. Annotate Cell Types\nWe can now annotate cell types by using reference datasets and matching cells based on their expression profiles. In this tutorial, we will use singleR in R or its Python equivalent singler.\nBefore running the singler algorithm, we need to download an appropriate reference dataset from the celldex package.\n\n3.1 Access Reference Datasets from celldex\nSimilar to the scRNAseq package, the celldex package provides access to the collection of reference expression datasets with curated cell type labels, for use in procedures like automated annotation of single-cell data or deconvolution of bulk RNA-seq to reference datasets. These datasets are also stored in language-agnostic representations for use in downstream analyses.\nThe `celldex` package is available on [R/Bioconductor](https://bioconductor.org/packages/devel/data/experiment/html/celldex.html) and [PyPI](https://github.com/BiocPy/celldex).\nFor this tutorial, let’s download the Mouse RNA-seq reference from celldex using fetch_reference() in Python or fetchReference() in R. This reference consists of a collection of mouse bulk RNA-seq data sets downloaded from the gene expression omnibus (Benayoun et al. 2019). A variety of cell types are available, again mostly from blood but also covering several other tissues.\n\nimport celldex\n\nmouse_rnaseq_ref = celldex.fetch_reference(\n    \"mouse_rnaseq\", \"2024-02-26\", \n    realize_assays=True)\nprint(mouse_rnaseq_ref)\n\nclass: SummarizedExperiment\ndimensions: (21214, 358)\nassays(1): ['logcounts']\nrow_data columns(0): []\nrow_names(21214): ['Xkr4', 'Rp1', 'Sox17', ..., 'MGC107098', 'LOC100039574', 'LOC100039753']\ncolumn_data columns(3): ['label.main', 'label.fine', 'label.ont']\ncolumn_names(358): ['ERR525589Aligned', 'ERR525592Aligned', 'SRR275532Aligned', ..., 'SRR1044042Aligned', 'SRR1044043Aligned', 'SRR1044044Aligned']\nmetadata(0): \n\n\n\n\nR\nsuppressWarnings(library(celldex))\nmouse_rnaseq_ref &lt;- fetchReference(\"mouse_rnaseq\", \"2024-02-26\", realize.assays=TRUE)\nmouse_rnaseq_ref\nNow, let’s identify cells from the zeisel-brain dataset using the mouse_rnaseq reference dataset.\n\nimport singler\n\nmatches = singler.annotate_single(\n    test_data=sce, \n    ref_data = mouse_rnaseq_ref,\n    ref_labels = \"label.main\"\n)\n\nimport pandas as pd\n\npd.Series(matches[\"best\"]).value_counts()\n\n/Users/kancherj/miniforge3/envs/bioc2024/lib/python3.10/site-packages/biocframe/BiocFrame.py:591: UserWarning: Setting property 'metadata' is an in-place operation, use 'set_metadata' instead\n  warn(\n\n\nNeurons              1704\nOligodendrocytes      844\nAstrocytes            180\nEndothelial cells     177\nMacrophages            45\nEpithelial cells       20\nMicroglia              18\nFibroblasts            17\nName: count, dtype: int64\n\n\n\n\nR\nsuppressWarnings(library(SingleR))\ncell_labels &lt;- SingleR(test = assay(sce, \"counts\"), ref = mouse_rnaseq_ref, labels = mouse_rnaseq_ref$label.main)\n\ntable(cell_labels$labels)"
  },
  {
    "objectID": "notebook/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "href": "notebook/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "4. Analyze Single-cell RNA-seq datasets",
    "text": "4. Analyze Single-cell RNA-seq datasets\n\n\n\nsingle-cell-methods\n\n\nAaron has implemented the single-cell methods from scran in C++. This allows us to reuse the same implementation in JS and develop applications for analyzing single-cell data (Kana), or in Python through the scranpy package. This avoids different interpretations of the analysis results by switching programming languages (Pachter et al, The impact of package selection and versioning on single-cell RNA-seq analysis | bioRxiv )\nTo analyze the dataset,\n\nimport scranpy\n\nresults = scranpy.analyze_sce(sce)\n\n# results is a complex object, lets explore the umap and tsne dimensions\nprint(results.tsne)\n\nTsneEmbedding(x=array([23.78283174, 23.20692407, 23.99748307, ..., 16.43261279,\n       12.91835402, 20.38262289]), y=array([-15.02586205, -15.00463774, -14.18924958, ...,  -1.56177656,\n         1.55240304,   3.51312435]))\n\n\n\n4.1 Seems like magic?\nRunning the analyze_sce() function uses the default parameters to run the single-cell workflow. If you want to customize or want to have fine-grained control on the analysis steps, set the parameter dry_run=True.\nThis prints out the exact series of steps the function does under the hood to perform the analysis. You can then use this to customize the analysis to your specific dataset or use case.\n\nprint(scranpy.analyze_sce(sce, dry_run=True))\n\nUsers can also run individual steps from the analysis without having to perform the full analysis, e.g. compute log normalized counts or find markers, etc."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#visualize-results",
    "href": "notebook/annotate_cell_types.html#visualize-results",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "5. Visualize Results",
    "text": "5. Visualize Results\nI can’t have a tutorial without a section on visualization or figures.\nWe will use the seaborn and matplotlib packages in Python to create visualizations. We’ll plot the t-SNE embedding and color the cells by their cluster assignments.\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=results.clusters, palette=\"deep\"\n)\n\n\n\n\n\n\n\n\nor the UMAP embedding with the cell types we identified from celldex\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.umap.x, y=results.umap.y, \n    hue=matches[\"best\"][:3002], palette=\"deep\"\n)\n\n\n\n\n\n\n\n\nDuring the QC step, some cells were filtered, hence we filter the matches and this is incorrect (since we don't know which cells were filtered). \n\nWe'll leave this as an exercise for the reader to change the order of steps: 1) run the dataset through the QC step 2) filter cells, and then 3) annotate using singleR."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#exercises",
    "href": "notebook/annotate_cell_types.html#exercises",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nShare or Upload your datasets to scrna-seq, Instructions to upload are available in their respective R/Bioc and Python packages.\nExplore top markers for each cluster identified by scranpy.\nPerform multi-modal analysis (scranpy supports RNA, ADT, CRISPR).\nsave your results and explore in Kana.\n\nCongratulations! You have now completed the tutorial on accessing single-cell datasets using scRNAseq and ArtifactDB, and annotating cell types using reference datasets from celldex. For more detailed usage and advanced analyses, refer to the respective documentation of these packages.\nBy integrating R and Python workflows, you can leverage the strengths of both languages and perform comprehensive single-cell analysis. Keep exploring and happy analyzing!"
  },
  {
    "objectID": "tutorials/genomic_ranges.html",
    "href": "tutorials/genomic_ranges.html",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "",
    "text": "Genomic range operations are fundamental to many bioinformatics analyses. They allow us to work with intervals of genomic coordinates, which is crucial for understanding the relationships between different genomic features such as genes, regulatory elements, and experimental data like ChIP-seq peaks. In this tutorial, we’ll explore how to work with genomic interval data using BiocPy’s GenomicRanges package, which provides Python implementations similar to the R/Bioconductor GenomicRanges package.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#outline",
    "href": "tutorials/genomic_ranges.html#outline",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Outline",
    "text": "Outline\nIn this workshop, we’ll walk through several key aspects of working with genomic ranges in Python:\n\nReading Genomic Data: We’ll start by reading in genomic data from RDS files, including exon positions grouped by transcripts.\nBasic Genomic Operations: We’ll cover fundamental operations like finding transcription start sites (TSS) and promoter regions.\nOverlap Analysis: We’ll learn how to find overlaps between different genomic features, a common task in many analyses.\nAdvanced Operations: We’ll explore more complex operations like finding peaks within specific regions and resizing genomic intervals.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#prerequisites",
    "href": "tutorials/genomic_ranges.html#prerequisites",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following packages installed:\n\nInstallation\nLet’s start by installing the required packages for R and Python.\n\nPython (shell)R\n\n\nYou can install the Python packages using pip:\npip install -U biocutils genomicranges rds2py numpy pandas geniml\n\n\nBiocManager::install(c(\"AnnotationHub\"), \n     repos='http://cran.us.r-project.org')",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#save-annotations-as-rds",
    "href": "tutorials/genomic_ranges.html#save-annotations-as-rds",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "1. Save Annotations as RDS",
    "text": "1. Save Annotations as RDS\nLet’s download the human reference genome and save the exon positions grouped by transcripts. For the purpose of the tutorial, we’ll limit the exons to chromosome 22.\n\nR\n\n\nsuppressMessages(library(AnnotationHub))\n\nah &lt;- AnnotationHub()\nensdb &lt;- query(ah, \"Ensembl 112 EnsDb for Homo sapiens\")[[1]]\nexons_by_tx &lt;- exonsBy(ensdb, \n    by = \"tx\", filter = SeqNameFilter(c(\"22\")), \n    columns= c(\"exon_id\", \"tx_name\", \"tx_id\", \"gene_name\", \"gene_id\"))\nsaveRDS(exons_by_tx, \"hg38_exons_by_tx.rds\")",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#reading-rds-files-in-python",
    "href": "tutorials/genomic_ranges.html#reading-rds-files-in-python",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "2. Reading RDS files in Python",
    "text": "2. Reading RDS files in Python\nThe rds2py Python package allows us to read RDS files and create equivalent Python representations of R objects. Key features include:\n\nParsing common R objects into Python equivalents (e.g., matrices to NumPy arrays, data frames to Pandas DataFrames).\nAbility to read S4 classes, enabling direct parsing of Bioconductor data types from R to Python.\n\nReading an RDS file with rds2py involves two steps:\n\nParse the RDS file into a Python dictionary containing data, its attributes, and associated metadata.\nConvert this dictionary into a suitable Python object using specific parser functions.\n\nThis process allows a seamless transition between R and Python for bioinformatics analyses.\n\nPython\n\n\n\nfrom rds2py import read_rds\nhg38_robject = read_rds(\"./hg38_exons_by_tx.rds\")\n\nfrom rds2py.granges import as_granges_list\nby_tx = as_granges_list(hg38_robject)\n\nprint(\"Exons by transcript:\")\nprint(by_tx)\n\nExons by transcript:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 9 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n[1]    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\n[2]    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n[3]    chr22 44725244 - 44725293               + | ENSE00003568825 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         4\n[4]    chr22 44726577 - 44726635               + | ENSE00003465556 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         5\n[5]    chr22 44731730 - 44731822               + | ENSE00003642381 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         6\n[6]    chr22 44732251 - 44732392               + | ENSE00003658491 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         7\n[7]    chr22 44735027 - 44735163               + | ENSE00003692865 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         8\n[8]    chr22 44736772 - 44737681               + | ENSE00001846334 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         9\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 10 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n[1]    chr22 50603626 - 50603720               + | ENSE00003768317 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         2\n[2]    chr22 50603841 - 50605065               + | ENSE00003772801 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         3\n[3]    chr22 50605368 - 50605444               + | ENSE00003773674 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         4\n[4]    chr22 50605562 - 50605735               + | ENSE00003765641 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         5\n[5]    chr22 50605825 - 50605935               + | ENSE00003763622 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         6\n[6]    chr22 50606658 - 50606766               + | ENSE00003773228 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         7\n[7]    chr22 50606921 - 50606992               + | ENSE00003769486 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         8\n[8]    chr22 50610212 - 50610311               + | ENSE00003772161 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         9\n[9]    chr22 50610707 - 50613982               + | ENSE00003731955 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735        10\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 2 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n[1]    chr22 20241415 - 20243111               - | ENSE00001557601 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         2\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 15 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 33919995 - 33920477               - |  LRG_856t1e1 LRG_856t2 LRG_856t2    LARGE1 LRG_856         1\n [1]    chr22 33761371 - 33761559               - |  LRG_856t1e3 LRG_856t2 LRG_856t2    LARGE1 LRG_856         2\n [2]    chr22 33650367 - 33650669               - |  LRG_856t1e4 LRG_856t2 LRG_856t2    LARGE1 LRG_856         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[12]    chr22 33283202 - 33283349               - | LRG_856t1e14 LRG_856t2 LRG_856t2    LARGE1 LRG_856        13\n[13]    chr22 33277060 - 33277256               - | LRG_856t1e15 LRG_856t2 LRG_856t2    LARGE1 LRG_856        14\n[14]    chr22 33272509 - 33274625               - | LRG_856t1e16 LRG_856t2 LRG_856t2    LARGE1 LRG_856        15\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 7 ranges and 6 metadata columns\n    seqnames              ranges          strand      exon_id  tx_name    tx_id gene_name gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;       &lt;list&gt;   &lt;list&gt;   &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n[0]    chr22 37244114 - 37244266               - | LRG_97t1e1 LRG_97t1 LRG_97t1      RAC2  LRG_97         1\n[1]    chr22 37241587 - 37241659               - | LRG_97t1e2 LRG_97t1 LRG_97t1      RAC2  LRG_97         2\n[2]    chr22 37232801 - 37232919               - | LRG_97t1e3 LRG_97t1 LRG_97t1      RAC2  LRG_97         3\n[3]    chr22 37231932 - 37231995               - | LRG_97t1e4 LRG_97t1 LRG_97t1      RAC2  LRG_97         4\n[4]    chr22 37231231 - 37231391               - | LRG_97t1e5 LRG_97t1 LRG_97t1      RAC2  LRG_97         5\n[5]    chr22 37226671 - 37226804               - | LRG_97t1e6 LRG_97t1 LRG_97t1      RAC2  LRG_97         6\n[6]    chr22 37225270 - 37226040               - | LRG_97t1e7 LRG_97t1 LRG_97t1      RAC2  LRG_97         7\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 21 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 20982297 - 20982572               + |  LRG_989t1e1 LRG_989t1 LRG_989t1     LZTR1 LRG_989         1\n [1]    chr22 20983027 - 20983090               + |  LRG_989t1e2 LRG_989t1 LRG_989t1     LZTR1 LRG_989         2\n [2]    chr22 20985841 - 20985898               + |  LRG_989t1e3 LRG_989t1 LRG_989t1     LZTR1 LRG_989         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[18]    chr22 20996696 - 20996802               + | LRG_989t1e19 LRG_989t1 LRG_989t1     LZTR1 LRG_989        19\n[19]    chr22 20996886 - 20996967               + | LRG_989t1e20 LRG_989t1 LRG_989t1     LZTR1 LRG_989        20\n[20]    chr22 20997232 - 20999033               + | LRG_989t1e21 LRG_989t1 LRG_989t1     LZTR1 LRG_989        21\n------\nseqinfo(1 sequences): chr22",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#basic-genomic-operations",
    "href": "tutorials/genomic_ranges.html#basic-genomic-operations",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "2. Basic Genomic Operations",
    "text": "2. Basic Genomic Operations\nNow, let’s perform some basic operations like finding Transcription Start Sites (TSS) and promoter regions. These operations are fundamental in genomic analysis as they help us identify key regulatory regions of the genome.\n\n2.1 Create a GenomicRangesList by gene\nTo identify TSS or define promoter regions, let’s first reprocess the input to create a GenomicRangesList by gene symbols.\n\nPython\n\n\nTo achieve this, we unlist the GenomicRangesList object. This is accomplished in Python using the as_genomic_ranges() method.\n\nall_ranges = by_tx.as_genomic_ranges()\n\nThen we split the object using the gene_name metadata column in mcols().\n\n\n\n\n\n\nImportant\n\n\n\nWe provide accessors to get or set attributes of the class. Most folks in Python may be familiar with direct access to class members (via properties or @property), but this should generally be avoided, as it is too easy to perform modifications via one-liners with the class.property on the left-hand side of an assignment.\nFor more information, please refer to our developer guide.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhile gene IDs are unique, gene symbols are not. In addition, this list has genes with no symbols.\n\n\n\nby_gene = all_ranges.split(\n    groups=all_ranges.get_mcols().get_column(\"gene_name\")\n)\n\nprint(\"Exons by gene:\")\nprint(by_gene)\n\nExons by gene:\nGenomicRangesList with 932 ranges and 0 metadata columns\n \nName:  \nGenomicRanges with 1846 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000255890    chr22 23402361 - 23402568               - | ENSE00001754779 ENST00000255890 ENST00000255890           ENSG00000290920         1\nENST00000255890    chr22 23402037 - 23402156               - | ENSE00001700441 ENST00000255890 ENST00000255890           ENSG00000290920         2\nENST00000255890    chr22 23401841 - 23401954               - | ENSE00004028898 ENST00000255890 ENST00000255890           ENSG00000290920         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\nENST00000706202    chr22 21008247 - 21009450               - | ENSE00003995059 ENST00000706202 ENST00000706202           ENSG00000291240         7\nENST00000714325    chr22 18939446 - 18947693               + | ENSE00003802171 ENST00000714325 ENST00000714325           ENSG00000284294         1\nENST00000715281    chr22 35838583 - 35838658               - | ENSE00004026430 ENST00000715281 ENST00000715281           ENSG00000293594         1\n------\nseqinfo(1 sequences): chr22\n \nName: 5_8S_rRNA \nGenomicRanges with 1 range and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000612732    chr22 11249809 - 11249960               - | ENSE00003735240 ENST00000612732 ENST00000612732 5_8S_rRNA ENSG00000276871         1\n------\nseqinfo(1 sequences): chr22\n \nName: A4GALT \nGenomicRanges with 20 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000249005    chr22 42695491 - 42695634               - | ENSE00001109573 ENST00000249005 ENST00000249005    A4GALT ENSG00000128274         1\nENST00000249005    chr22 42692122 - 42693998               - | ENSE00000880583 ENST00000249005 ENST00000249005    A4GALT ENSG00000128274         2\nENST00000381278    chr22 42720797 - 42720820               - | ENSE00003818792 ENST00000381278 ENST00000381278    A4GALT ENSG00000128274         1\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n      LRG_795t1    chr22 42720797 - 42720871               - |     LRG_795t1e1       LRG_795t1       LRG_795t1    A4GALT         LRG_795         1\n      LRG_795t1    chr22 42695491 - 42695632               - |     LRG_795t1e2       LRG_795t1       LRG_795t1    A4GALT         LRG_795         2\n      LRG_795t1    chr22 42692121 - 42693998               - |     LRG_795t1e3       LRG_795t1       LRG_795t1    A4GALT         LRG_795         3\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 26 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000402174    chr22 28917389 - 28917482               + | ENSE00001552635 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         1\nENST00000402174    chr22 28987076 - 28987202               + | ENSE00003547707 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         2\nENST00000402174    chr22 29042495 - 29042570               + | ENSE00001329477 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\nENST00000544604    chr22 29048389 - 29048492               + | ENSE00001325812 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         7\nENST00000544604    chr22 29049197 - 29050949               + | ENSE00001308098 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         8\nENST00000544604    chr22 29053579 - 29057489               + | ENSE00001427475 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         9\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3 \nGenomicRanges with 3 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000325660    chr22 29031391 - 29031477               - | ENSE00001718965 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         1\nENST00000325660    chr22 29031084 - 29031157               - | ENSE00001643791 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         2\nENST00000325660    chr22 29024999 - 29027010               - | ENSE00001267818 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         3\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3-AS1 \nGenomicRanges with 2 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000412798    chr22 28992721 - 28992938               + | ENSE00001659048 ENST00000412798 ENST00000412798 ZNRF3-IT1 ENSG00000235786         1\nENST00000412798    chr22 29018164 - 29018621               + | ENSE00001595182 ENST00000412798 ENST00000412798 ZNRF3-IT1 ENSG00000235786         2\n------\nseqinfo(1 sequences): chr22\n \n\n\n\n\n\n\n\n\n2.2 Finding Transcription Start Sites (TSS)\nTranscription Start Sites (TSS) are the locations where transcription of a gene begins. Identifying TSS is crucial for understanding gene regulation, as many regulatory elements are located near the TSS.\n\nPython\n\n\n\nranges_by_gene = by_gene.range()\n\nprint(\"Gene ranges:\")\nprint(ranges_by_gene)\n\nGene ranges:\nGenomicRangesList with 932 ranges and 0 metadata columns\n \nName:  \nGenomicRanges with 2 ranges and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 11066418 - 50674175               +\n[1]    chr22 15282557 - 50755435               -\n------\nseqinfo(1 sequences): chr22\n \nName: 5_8S_rRNA \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 11249809 - 11249960               -\n------\nseqinfo(1 sequences): chr22\n \nName: A4GALT \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 42692121 - 42721299               -\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 28883572 - 29057489               +\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 29024999 - 29031477               -\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3-AS1 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n \n\n\n\nWe convert the list to a GenomicRanges object.\n\ngr_by_gene = ranges_by_gene.as_genomic_ranges()\n\nprint(\"as GenomicRanges:\")\nprint(gr_by_gene)\n\nas GenomicRanges:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11066418 - 50674175               +\n             chr22 15282557 - 50755435               -\n5_8S_rRNA    chr22 11249809 - 11249960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\nThen we resize to a width of 1 base pair at the start of each range to pinpoint the TSS.\n\ntss = gr_by_gene.resize(width=1, fix=\"start\")\n\nprint(\"Transcript Start Sites:\")\nprint(gr_by_gene)\n\nTranscript Start Sites:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11066418 - 50674175               +\n             chr22 15282557 - 50755435               -\n5_8S_rRNA    chr22 11249809 - 11249960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\n\n\n2.3 Defining Promoter Regions\nHere, we’re defining promoters as the region 2000 base pairs upstream to 200 base pairs downstream of each TSS. This definition can vary depending on the specific analysis, but this range often captures important regulatory elements.\n\nPython\n\n\n\npromoters = tss.promoters(upstream=2000, downstream=200)\n\nprint(\"Promoter Regions:\")\nprint(promoters)\n\nPromoter Regions:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11064418 - 11066618               +\n             chr22 50755235 - 50757435               -\n5_8S_rRNA    chr22 11249760 - 11251960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28881572 - 28883772               +\nZNRF3-AS1    chr22 29031277 - 29033477               -\nZNRF3-IT1    chr22 28990721 - 28992921               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\n\n\n\nNote\n\n\n\nPlease be aware that because gene symbols may not be unique, this GenomicRanges object might contain duplicates. You might want to resolve duplicate symbols by making the symbols unique. We will leave this as an exercise for the reader.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#overlap-analysis",
    "href": "tutorials/genomic_ranges.html#overlap-analysis",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "3. Overlap Analysis",
    "text": "3. Overlap Analysis\nA common task in genomic analysis is finding overlaps between different genomic features. This helps us understand the relationships between various elements in the genome and can provide insights into gene regulation and function.\n\n3.1 Reading ChIP-seq Peaks\nChIP-seq (Chromatin Immunoprecipitation followed by sequencing) is a method used to identify binding sites of DNA-associated proteins. The peaks represent regions where a protein of interest is likely bound to the DNA. We’re focusing on chromosome 22 for this example to keep the dataset manageable.\nFor the purpose of this tutorial, let’s download a bed file containing peaks from a ChIP-seq experiment on “Human B cells” to identify “EZH2” binding sites (from ENCODE) and cataloged in bedbase.org.\n\nPython\n\n\n\nfrom geniml.bbclient import BBClient\n\nbbclient = BBClient(cache_folder=\"cache\", bedbase_api=\"https://api.bedbase.org\")\nbedfile_id = \"be4054acf6e3feeb4dc490e6430e358e\" \nbedfile = bbclient.load_bed(bedfile_id)\npeaks = bedfile.to_granges()\n\nfilter_chr22 = [x == \"chr22\" for x in peaks.get_seqnames()]\npeaks_chr22 = peaks[filter_chr22]\n\nprint(peaks_chr22)\n\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1438]    chr22 27212058 - 27212348               *\n[1439]    chr22 49201359 - 49201649               *\n[1440]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n3.2 Finding Overlaps with TSS\nHere, we’re identifying ChIP-seq peaks that overlap with TSS. This analysis can help us understand if the protein of interest tends to bind near the start of genes, which could suggest a role in transcription initiation.\n\nPython\n\n\n\noverlaps = peaks_chr22.find_overlaps(tss)\n\nprint(\"Peak indices that overlap with first 10 TSS:\")\nprint(overlaps[:10])\n\nPeak indices that overlap with first 10 TSS:\n[[], [], [], [55], [217], [], [], [], [], []]\n\n\n\n\n\n\n\n\nNote\n\n\n\nfind_overlaps returns a list with the same length as TSS, indicating which indices from peaks overlap with each of the TSS. Ideally, we would want to return a Hits object similar to the Bioconductor implementation.\nTODO: Future plans to convert this into a Hits object.\n\n\nLet’s identify the peaks that overlap with TSS.\n\nimport itertools\n\nall_indices = list(set(itertools.chain.from_iterable(overlaps)))\npeaks_by_tss = peaks_chr22[all_indices]\nprint(peaks_by_tss)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nInstead, one can subset peaks that overlap with TSS using the subset_by_overlaps method:\n\npeaks_by_tss2 = peaks_chr22.subset_by_overlaps(tss)\nprint(peaks_by_tss2)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nAdditionally, in some cases, we may want to ignore strand information (ignore_strand=True) when finding overlaps.\n\npeaks_by_tss_ignoring_strand = peaks_chr22.subset_by_overlaps(tss, ignore_strand=True)\nprint(peaks_by_tss_ignoring_strand)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis yields the same results for this particular scenario, but may not if the ‘peaks’ contain strand information.\n\n\n\n\n\n\n\n3.3 Finding Overlaps with Promoters\nThis operation finds ChIP-seq peaks that overlap with our defined promoter regions. If a significant number of peaks fall within promoters, it might suggest that the protein plays a role in gene regulation through promoter binding. This kind of analysis is often used to characterize the binding patterns of transcription factors or other regulatory proteins.\n\nPython\n\n\n\npeaks_by_promoters = peaks_chr22.subset_by_overlaps(promoters)\n\nprint(\"Peaks Overlapping with Promoters:\")\nprint(peaks_by_promoters)\n\nPeaks Overlapping with Promoters:\nGenomicRanges with 190 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19756445 - 19756735               *\n  [1]    chr22 37427967 - 37428257               *\n  [2]    chr22 22521942 - 22522232               *\n           ...                 ...             ...\n[187]    chr22 39993439 - 39993729               *\n[188]    chr22 22338004 - 22338294               *\n[189]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n3.4 Finding Overlaps with Exons\nAnother analysis is to look at overlaps with all exons. This can help identify potential roles of the ChIP-seq peaks in splicing. Let’s modify our analysis to look at all exons:\n\nPython\n\n\n\n# Combine all exons into a single GenomicRanges object\nall_exons = by_gene.as_granges()\n\n# Find peaks overlapping with any exon\npeaks_by_exons = peaks_chr22.subset_by_overlaps(all_exons)\n\nprint(\"Peaks overlapping with exons:\")\nprint(peaks_by_exons)\n\n# Calculate the percentage of peaks that overlap with exons\npercent_overlapping = (len(peaks_by_exons) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_overlapping:.2f}%\")\n\nPeaks overlapping with exons:\nGenomicRanges with 279 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 29307104 - 29307394               *\n           ...                 ...             ...\n[276]    chr22 16969920 - 16970210               *\n[277]    chr22 35552420 - 35552710               *\n[278]    chr22 37931897 - 37932187               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\n\n\n\n\n\nThis analysis can provide insights into whether the protein of interest (captured by the ChIP-seq: “EZH2”) tends to bind within gene bodies, potentially influencing gene expression, splicing, or other co-transcriptional processes.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#advanced-operations",
    "href": "tutorials/genomic_ranges.html#advanced-operations",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "4. Advanced Operations",
    "text": "4. Advanced Operations\nLet’s explore some more complex operations that are often used in genomic analyses.\n\n4.1 Comparing Exonic vs. Intronic Binding\nLet’s first identify intron regions. We will use the by_gene object we created that contains a GenomicRangesList split by gene.\n\nPython\n\n\n\n# Create intronic regions (regions within genes but not in exons)\ngene_ranges = by_gene.range().as_genomic_ranges()  # Get the full extent of each gene\nintrons = gene_ranges.subtract(all_exons).as_granges()\n\nprint(\"Intron regions:\")\nprint(introns)\n\nIntron regions:\nGenomicRanges with 1572 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 15282557 - 15550904               -\n             chr22 15552888 - 15553211               -\n             chr22 15553587 - 15553691               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\nTo gain further insight, we can compare the proportion of peaks overlapping with exons to those overlapping with introns:\n\n# Find peaks overlapping with introns\npeaks_by_introns = peaks_chr22.subset_by_overlaps(introns)\n\nprint(\"Peaks overlapping with introns:\")\nprint(peaks_by_introns)\n\n# Calculate percentages\npercent_exonic = (len(peaks_by_exons) / len(peaks_chr22)) * 100\npercent_intronic = (len(peaks_by_introns) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_exonic:.2f}%\")\nprint(f\"Percentage of peaks overlapping with introns: {percent_intronic:.2f}%\")\n\nPeaks overlapping with introns:\nGenomicRanges with 1438 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1435]    chr22 27212058 - 27212348               *\n[1436]    chr22 49201359 - 49201649               *\n[1437]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\nPercentage of peaks overlapping with introns: 99.79%\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThese percentages add up to over 100% because some peaks overlap both introns and exons, depending on how wide the peaks are. Ideally, you may want to filter the peaks based on preference as you annotate them with TSS, promoters, etc.\n\n\nThis comparison can help determine if the protein of interest shows a preference for binding in exonic or intronic regions, which could suggest different functional roles (e.g., splicing regulation for exonic binding vs. potential enhancer activity for intronic binding).\n\n\n4.2 Finding Overlaps with the first exon\n\n\n\n\n\n\nNote\n\n\n\n\nThis analysis is performed by transcript.\nThe rationale for this analysis may vary, but we are mostly showcasing complex genomic operations that are possible with the package.\n\n\n\nLet’s first put together a GenomicRanges object containing the first exon for each transcript.\n\nall_first = []\nfor txid, grl in by_tx:\n    strand = grl.get_strand(as_type = \"list\")[0]\n    if strand == \"-\":\n        all_first.append(grl.sort()[-1])\n    else:\n        all_first.append(grl.sort()[0])\n\nThen we combine all the individual genomic elements. The biocutils package provides utilities for convenient aspects of R that aren’t provided by base Python and generics. One of these generics is the 'combine' operation that merges or concatenates various Bioconductor classes.\n\nfrom biocutils import combine_sequences\nfirst_exons = combine_sequences(*all_first)\n\nWe can now subset peaks that overlap with the first exon\n\npeaks_with_first_exons = peaks_chr22.subset_by_overlaps(first_exons)\nprint(peaks_with_first_exons)\n\nGenomicRanges with 153 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 17369888 - 17370178               *\n  [1]    chr22 19756445 - 19756735               *\n  [2]    chr22 45975507 - 45975797               *\n           ...                 ...             ...\n[150]    chr22 49500975 - 49501265               *\n[151]    chr22 19131257 - 19131547               *\n[152]    chr22 29307104 - 29307394               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n4.3 Resizing and Shifting Peaks\n\nnarrow_peaks = peaks_chr22.narrow(start=10, width=100)\nshifted_peaks = narrow_peaks.shift(10)\n\nprint(\"Narrowed and Shifted Peaks:\")\nprint(shifted_peaks)\n\nNarrowed and Shifted Peaks:\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766807 - 19766907               *\n   [1]    chr22 17369907 - 17370007               *\n   [2]    chr22 19756464 - 19756564               *\n            ...                 ...             ...\n[1438]    chr22 27212077 - 27212177               *\n[1439]    chr22 49201378 - 49201478               *\n[1440]    chr22 49663381 - 49663481               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nResizing and shifting genomic ranges can be useful in various contexts. For example:\n\nNarrowing peaks might help focus on the center of ChIP-seq binding sites.\nShifting ranges can be used to look at regions adjacent to your features of interest. e.g. defining the predicted CRISPR cleavage site based on the position of the CRISPR gRNA sequence.\n\nThese operations demonstrate the flexibility of genomic range manipulations, which can be useful for fine-tuning analyses or testing hypotheses about the spatial relationships between genomic features.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#exercises",
    "href": "tutorials/genomic_ranges.html#exercises",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "5. Exercises",
    "text": "5. Exercises\n\nCalculate the average width of the ChIP-seq peaks on chromosome 22.\nDetermine how many peaks overlap with CpG islands.\nCompute the percentage of promoter regions that have at least one overlapping ChIP-seq peak.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#conclusion",
    "href": "tutorials/genomic_ranges.html#conclusion",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we’ve explored how to use BiocPy’s genomic ranges functionality to perform various genomic analyses. These tools and techniques provide a powerful way to work with genomic interval data in Python, mirroring the capabilities from Bioconductor. They form the foundation for many more complex genomic analyses and can be applied to a wide range of biological questions.\n\n\n\n\n\n\nNote\n\n\n\nRefer to the BiocPy documentation for more detailed information on these packages and their functionalities.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: `GenomicRanges` and range-based analyses"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html",
    "href": "tutorials/annotate_cell_types.html",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "",
    "text": "Welcome to this tutorial on annotating single-cell datasets with reference collections. The scRNAseq (R/Bioc, Python) package provides access to public single-cell RNA-seq datasets for use by other Bioconductor/BiocPy packages and workflows. These datasets are stored in language-agnostic representations described in ArtifactDB, enabling easy access to datasets and analysis results across multiple programming languages such as R and Python. We will showcase how to integrate and process single-cell datasets across languages, such as R and Python, and how to annotate cell types using reference datasets.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#outline",
    "href": "tutorials/annotate_cell_types.html#outline",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Outline",
    "text": "Outline\nIn this tutorial, you will learn how to:\n\nInstall and set up BiocPy packages in your Python environment.\nExplore the scrnaseq package and access public single-cell RNA-seq datasets.\nPerform basic operations on SingleCellExperiment objects, the core data structure for single-cell data.\nAnnotate cell types using reference datasets from the celldex package.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#prerequisites",
    "href": "tutorials/annotate_cell_types.html#prerequisites",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#installation",
    "href": "tutorials/annotate_cell_types.html#installation",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "Installation",
    "text": "Installation\nLet’s start by installing the required packages.\n\nPython (shell)R\n\n\npip install scrnaseq celldex singler\nThis will install the scrnaseq, celldex, singler packages from PyPI.\n\n\nBiocManager::install(c(\"scRNAseq\", \"celldex\", \"SingleR\"), \n     repos='http://cran.us.r-project.org')\nThis will install the scRNAseq, celldex, SingleR, packages from Bioconductor.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "href": "tutorials/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "1. Accessing and Exploring Single-Cell Datasets",
    "text": "1. Accessing and Exploring Single-Cell Datasets\nNow that we have the necessary packages installed, let’s explore the scrnaseq package and learn how to access public single-cell RNA-seq datasets. Datasets published to the scrnaseq package are decorated with metadata such as the study title, species, number of cells, etc., to facilitate discovery. Let’s see how we can list and search for datasets.\n\n1.1 List All Datasets\nThe list_datasets() function in Python or surveyDatasets() in R will display all available datasets published to the scRNAseq collection along with their metadata.\n\nPythonR\n\n\n\nimport scrnaseq\ndatasets = scrnaseq.list_datasets()\ndatasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\naztekin-tail-2019\nIdentification of a regeneration-organizing ce...\n2023-12-14\n\n\n1\nsplicing-demonstration-2020\n[reprocessed, subset] The Mammalian Spermatoge...\n2023-12-20\n\n\n2\nmarques-brain-2016\nOligodendrocyte heterogeneity in the mouse juv...\n2023-12-19\n\n\n\n\n\n\n\n\n\nsuppressMessages(library(scRNAseq))\nall_ds &lt;- surveyDatasets()\nhead(all_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n\nThis lists all available datasets in the scrnaseq package and displays their names, titles, and versions.\n\n\n1.2 Search for Datasets\nYou can also search for datasets based on metadata using search_datasets() in Python or searchDatasets() in R. This supports both simple text queries and complex boolean expressions.\n\nPythonR\n\n\n\nimport scrnaseq\n\npancreas_datasets = scrnaseq.search_datasets(\"pancreas\")\npancreas_datasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\nmuraro-pancreas-2016\nA Single-Cell Transcriptome Atlas of the Human...\n2023-12-19\n\n\n2\nbaron-pancreas-2016\nA Single-Cell Transcriptomic Map of the Human ...\n2023-12-14\n\n\n\n\n\n\n\n\n\npancreas_ds &lt;- searchDatasets(\"pancreas\")\nhead(pancreas_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n\nThis R|Python code searches for datasets containing the term “pancreas” and displays their names, titles, and versions.\n\n1.2.1 Advanced Searches\nFor more complex searches involving boolean operations, use define_text_query() in Python or defineTextQuery() in R. Here’s an example to find datasets using the mouse reference genome (GRCm38) and containing the words neuro or pancrea.\n\n\n\n\n\n\nTip\n\n\n\nCheck out the reference manual for more details and usage of these functions.\n\n\n\nPythonR\n\n\n\nfrom gypsum_client import define_text_query\nimport scrnaseq\n\nres = scrnaseq.search_datasets(\n     define_text_query(\"GRCm38\", field=\"genome\")\n     & (\n          define_text_query(\"neuro%\", partial=True)\n          | define_text_query(\"pancrea%\", partial=True)\n     )\n)\nres[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\ncampbell-brain-2017\nA molecular census of arcuate hypothalamus and...\n2023-12-14\n\n\n2\nhu-cortex-2017\nDissecting cell-type composition and activity-...\n2023-12-20\n\n\n\n\n\n\n\n\n\nsuppressWarnings(library(gypsum))\nres &lt;- searchDatasets(\n    defineTextQuery(\"GRCm38\", field=\"genome\") &\n    (defineTextQuery(\"neuro%\", partial=TRUE) | \n     defineTextQuery(\"pancrea%\", partial=TRUE))\n)\nhead(res[,c(\"name\", \"title\", \"version\")], 3)\n\n\n\nThis performs a complex search to find datasets tagged as “mouse” in the reference genome field and containing the keywords “neuro” or “pancrea”.\n\n\n\n\n\n\nImportant\n\n\n\nOnce a dataset is identified, always list the name and version of the dataset in your scripts for reproducibility.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#download-dataset",
    "href": "tutorials/annotate_cell_types.html#download-dataset",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "2. Download dataset",
    "text": "2. Download dataset\nAfter identifying a dataset of interest, use fetch_dataset() in Python or fetchDataset() in R to download the dataset. This will load the dataset as a SingleCellExperiment object.\n\n\n\n\n\n\nNote\n\n\n\nR/Bioconductor users might already be familiar with the SingleCellExperiment class. BiocPy also provides the same implementation in the singlecellexperiment package.\n\n\nFor this tutorial, let’s download the zeisel-brain dataset:\n\nPythonR\n\n\n\nimport scrnaseq\nsce = scrnaseq.fetch_dataset(\"zeisel-brain-2015\", \"2023-12-14\")\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\n\n\nsce &lt;- fetchDataset(\"zeisel-brain-2015\", \"2023-12-14\")\nsce\n\n\n\n\n2.1 Side-quest on SingleCellExperiment in Python\nThe Python implementation of the SingleCellExperiment class adheres to Bioconductor’s specification and offers similar interface and methods. Our goal is to make it simple for analysts to switch between R and Python. A key difference is the shift from functional to an object-oriented paradigm.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the design, refer to the BiocPy developer guide or the singlecellexperiment documentation.\n\n\nThis Python code demonstrates basic operations on a SingleCellExperiment object, including retrieving assay names, column names, column metadata, accessing counts, and coercing to an AnnData object for interoperability with existing analysis ready eco-systems in Python.\n\nPython\n\n\n\nprint(\"assays: \", sce.get_assay_names()) # or sce.assay_names\n\nprint(\"column names: \", sce.get_column_names()) # or sce.column_names\n\nprint(\"column metadata: \", sce.get_column_data()) # or sce.column_data\n\nprint(\"access counts: \", sce.assays[\"counts\"]) # or # sce.assay(\"counts\")\n\nassays:  ['counts']\ncolumn names:  ['1772071015_C02', '1772071017_G12', '1772071017_A05', '1772071014_B06', '1772067065_H06', '1772071017_E02', '1772067065_B07', '1772067060_B09', '1772071014_E04', '1772071015_D04', '1772071015_C11', '1772071017_D04', '1772071017_D06', '1772067082_D07', '1772071017_F09', '1772071017_A09', '1772067094_C05', '1772067059_B06', '1772067096_E05', '1772066089_C05', '1772067094_F04', '1772071045_A01', '1772071015_C08', '1772071045_D06', '1772071017_A03', '1772071017_F07', '1772071017_E06', '1772067066_C10', '1772071017_B05', '1772071014_E06', '1772067058_D11', '1772071014_B04', '1772067066_B09', '1772071017_E10', '1772071015_B08', '1772071014_C11', '1772067066_E10', '1772067065_F11', '1772071014_H11', '1772071017_B11', '1772071014_A07', '1772071017_B03', '1772071015_B04', '1772071014_D03', '1772067065_D06', '1772067066_H08', '1772067096_G11', '1772071017_G11', '1772067054_E12', '1772067083_B12', '1772067054_G01', '1772067096_A02', '1772067093_H05', '1772067083_B09', '1772071014_H12', '1772067082_H11', '1772067094_D06', '1772071015_F03', '1772071015_B11', '1772071014_G10', '1772067066_B07', '1772067065_G01', '1772071015_F07', '1772067065_E07', '1772071015_C10', '1772067063_E06', '1772067065_A11', '1772071015_G12', '1772067058_D07', '1772067065_D01', '1772071015_A02', '1772071014_F01', '1772071015_D06', '1772071017_B02', '1772071017_D07', '1772071017_A11', '1772071017_B01', '1772071017_C07', '1772071015_H11', '1772071014_A05', '1772071017_A10', '1772071017_C08', '1772071017_B09', '1772067066_A09', '1772067065_A12', '1772071015_G04', '1772067066_B02', '1772071015_E06', '1772067064_E04', '1772071015_C01', '1772071014_F06', '1772071017_D10', '1772071017_C05', '1772071014_E05', '1772071017_E04', '1772058148_D08', '1772067065_F07', '1772062128_G08', '1772066102_B02', '1772063077_B03', '1772062114_H03', '1772066074_A03', '1772066102_C09', '1772062114_E02', '1772063068_G07', '1772062115_A12', '1772062113_F08', '1772066108_B02', '1772066102_G06', '1772067059_E03', '1772071035_G04', '1772066102_C06', '1772067057_H02', '1772062115_G05', '1772066097_G03', '1772063064_G08', '1772067082_B01', '1772066099_C04', '1772071040_A12', '1772063078_F01', '1772067082_F03', '1772071044_A03', '1772067060_B04', '1772071045_C11', '1772067083_B10', '1772066077_E08', '1772063078_F12', '1772062115_C05', '1772066099_C11', '1772063064_G03', '1772071036_E09', '1772062128_D11', '1772067058_A12', '1772063078_B02', '1772066108_E06', '1772066100_A12', '1772066073_B03', '1772067076_A06', '1772062111_G03', '1772063061_H03', '1772066097_H05', '1772067065_A02', '1772066077_H12', '1772062128_G04', '1772062109_H03', '1772063063_F01', '1772062128_B10', '1772063061_B03', '1772063061_B05', '1772058177_G09', '1772066095_D02', '1772066097_G12', '1772066097_G02', '1772066100_G07', '1772066097_H01', '1772071045_H03', '1772067083_F08', '1772067083_H01', '1772066101_F04', '1772067058_H12', '1772067082_F02', '1772067058_H05', '1772071035_B09', '1772071015_H07', '1772071036_C02', '1772066108_F04', '1772071035_H02', '1772062109_H07', '1772067076_E03', '1772067059_G10', '1772067076_D04', '1772066099_H06', '1772066102_G12', '1772071035_E07', '1772066073_B02', '1772067076_A03', '1772066102_B11', '1772066089_A01', '1772066099_A01', '1772067057_H04', '1772066102_C11', '1772071045_A10', '1772066096_G01', '1772066102_H10', '1772066099_C12', '1772071044_H10', '1772067083_D10', '1772066099_E04', '1772066100_D08', '1772066099_H02', '1772066089_H04', '1772066089_B06', '1772066102_G08', '1772066102_A04', '1772066097_B06', '1772067076_E04', '1772066097_C06', '1772067057_D12', '1772066100_A05', '1772066101_F03', '1772071014_A06', '1772071015_A11', '1772071015_C09', '1772063071_A06', '1772058148_F09', '1772067066_H09', '1772067065_G10', '1772071015_A05', '1772067065_B10', '1772067065_A01', '1772062128_F10', '1772071017_H06', '1772071014_A12', '1772067065_F08', '1772058148_H04', '1772066102_B06', '1772063077_H05', '1772067076_A12', '1772067065_B12', '1772067065_G11', '1772067066_A10', '1772067066_E02', '1772067066_A11', '1772067065_B09', '1772067065_F10', '1772063063_H03', '1772071017_A01', '1772067066_D04', '1772067065_G12', '1772071017_G05', '1772071017_D12', '1772071015_A01', '1772071017_H10', '1772063070_B10', '1772063065_C02', '1772071015_E10', '1772067082_B09', '1772062115_H01', '1772071041_B06', '1772066090_C05', '1772067096_F07', '1772071015_F05', '1772067083_G04', '1772062115_G06', '1772071015_G09', '1772066095_F07', '1772071017_G02', '1772062111_C11', '1772058148_H03', '1772066100_D06', '1772071017_C10', '1772071014_B10', '1772062128_G06', '1772067057_A08', '1772063068_F12', '1772063074_E11', '1772066100_D04', '1772066100_F03', '1772067093_D01', '1772066100_E01', '1772067073_C01', '1772067083_B11', '1772067054_F12', '1772058177_D04', '1772067082_H03', '1772071017_D01', '1772067094_H08', '1772067096_A01', '1772058148_H08', '1772067093_F03', '1772071015_E08', '1772067083_C02', '1772066100_H07', '1772071014_C04', '1772067096_G05', '1772071017_A08', '1772066097_G04', '1772067094_A09', '1772067082_D05', '1772067082_B03', '1772063064_B06', '1772067082_D04', '1772067065_A08', '1772066100_F08', '1772067082_C02', '1772067082_B02', '1772067093_H07', '1772071017_A06', '1772071014_F12', '1772071014_E02', '1772067069_H02', '1772063071_B07', '1772067073_F04', '1772067069_A03', '1772067066_E04', '1772067063_C05', '1772067069_C12', '1772067064_C12', '1772071041_F07', '1772071040_B04', '1772067063_E09', '1772067070_D04', '1772067064_C07', '1772067069_A11', '1772067064_H09', '1772071040_B01', '1772067064_B04', '1772063063_E12', '1772067069_D10', '1772062109_B03', '1772067064_C09', '1772067064_D02', '1772067069_H10', '1772071017_G01', '1772067063_B02', '1772060240_A07', '1772067073_A01', '1772067064_B01', '1772067074_A06', '1772062116_B04', '1772071041_G09', '1772067069_B02', '1772067070_C01', '1772067070_A03', '1772071017_C06', '1772067064_B05', '1772067073_C12', '1772067064_C02', '1772067070_G11', '1772067074_F07', '1772067069_G06', '1772067070_F07', '1772071041_H11', '1772067066_A06', '1772071040_G08', '1772067064_G02', '1772071040_E01', '1772067070_F03', '1772067074_D05', '1772067069_G03', '1772067070_E11', '1772071017_D11', '1772071041_E12', '1772071041_F09', '1772071041_D09', '1772071041_H12', '1772067073_F08', '1772071041_D04', '1772071040_F05', '1772071041_E01', '1772071041_G07', '1772071041_G03', '1772071041_H09', '1772071041_G08', '1772067070_G08', '1772067064_F02', '1772067064_F01', '1772063063_H02', '1772063065_C11', '1772063071_G03', '1772063068_A01', '1772063071_E06', '1772071041_A04', '1772063068_B01', '1772063070_F03', '1772063063_G11', '1772063062_H11', '1772063077_D06', '1772071041_H10', '1772063064_D02', '1772067074_C05', '1772067066_B03', '1772063068_F11', '1772067070_D06', '1772067074_B09', '1772063077_D12', '1772067074_F03', '1772071041_C05', '1772067070_G12', '1772071041_A02', '1772067074_B01', '1772062115_G01', '1772067063_B12', '1772067063_H04', '1772067073_G09', '1772067069_E04', '1772067073_C04', '1772063071_H01', '1772063065_A10', '1772063068_D04', '1772067069_F05', '1772063068_F07', '1772063068_A02', '1772063063_E04', '1772063065_F02', '1772067074_F12', '1772067064_A01', '1772063064_B11', '1772062128_E10', '1772063065_F03', '1772060224_B06', '1772071041_H05', '1772062109_E06', '1772071040_G09', '1772071041_E10', '1772062128_D07', '1772062128_D10', '1772063078_B12', '1772071041_A06', '1772060240_F12', '1772063065_D04', '1772062116_B11', '1772063078_A04', '1772063068_D03', '1772062128_D12', '1772063070_E01', '1772062116_G05', '1772063068_H12', '1772063070_B11', '1772071041_A05', '1772060240_H05', '1772063065_F04', '1772063065_G10', '1772067074_D10', '1772071040_B12', '1772063065_D12', '1772063065_B02', '1772067074_F10', '1772060224_H02', '1772063068_E06', '1772071041_B01', '1772060226_F11', '1772067069_C08', '1772063065_C08', '1772062116_A06', '1772063061_A05', '1772063068_F02', '1772060240_D06', '1772063063_D11', '1772062115_C11', '1772071041_C10', '1772060225_C12', '1772063068_G11', '1772067069_C05', '1772063065_C09', '1772063065_E02', '1772063068_G10', '1772067073_B04', '1772067074_D08', '1772071040_H01', '1772063062_F07', '1772062113_E01', '1772063071_E07', '1772063065_D02', '1772063071_C08', '1772063062_F05', '1772063068_A06', '1772066104_F10', '1772058177_G10', '1772063068_H01', '1772067073_F10', '1772063062_C04', '1772062109_A11', '1772063068_C10', '1772063068_G04', '1772063065_A03', '1772062128_A09', '1772063071_F08', '1772067058_G11', '1772071015_D07', '1772071015_D08', '1772067054_G11', '1772067064_A12', '1772067066_C03', '1772066095_D06', '1772062109_F09', '1772067082_D08', '1772060224_C03', '1772071040_H03', '1772067059_E04', '1772067058_C12', '1772066073_C01', '1772067076_A05', '1772067059_A05', '1772067082_B12', '1772066100_D12', '1772067076_C01', '1772067082_F05', '1772067082_C10', '1772067082_G07', '1772066098_B05', '1772066097_H07', '1772066102_F02', '1772063062_D03', '1772067064_A11', '1772067073_E06', '1772071040_F10', '1772071040_D11', '1772062116_B02', '1772071041_D08', '1772067064_G12', '1772062109_E09', '1772067074_A02', '1772067074_C04', '1772071040_F06', '1772067074_G06', '1772067063_B09', '1772071041_F02', '1772067073_B06', '1772067073_G04', '1772067070_B11', '1772062111_H10', '1772067063_A01', '1772071040_A11', '1772071041_E04', '1772062118_B11', '1772067070_G04', '1772071040_E02', '1772071041_D11', '1772071040_B06', '1772067070_H11', '1772063071_C01', '1772062111_B01', '1772063068_C01', '1772060240_B10', '1772060240_B01', '1772066096_B04', '1772060225_E01', '1772063077_C12', '1772063065_F01', '1772062115_D01', '1772062118_A01', '1772063065_A01', '1772067070_D10', '1772071040_A01', '1772063068_B10', '1772067066_G02', '1772063077_G04', '1772063071_E01', '1772067070_D05', '1772062111_H11', '1772071041_B12', '1772063077_E05', '1772067073_F02', '1772062111_A09', '1772063061_A10', '1772062128_C12', '1772063061_A03', '1772063074_E06', '1772063064_H01', '1772071014_C08', '1772067064_H05', '1772063068_A12', '1772062109_H06', '1772062109_D03', '1772067065_G07', '1772062128_D01', '1772071014_H02', '1772063061_H04', '1772062115_C09', '1772063078_E02', '1772063061_H12', '1772063061_E05', '1772058177_G03', '1772063068_E07', '1772063061_C11', '1772063061_D11', '1772063061_E06', '1772063071_A03', '1772058171_C07', '1772063061_G12', '1772062128_H06', '1772062115_C08', '1772063061_C02', '1772063061_C06', '1772063061_H01', '1772063061_B06', '1772063071_E12', '1772058177_C10', '1772058177_H05', '1772063061_F06', '1772058177_H07', '1772058171_E01', '1772063061_A02', '1772063061_B01', '1772063068_F09', '1772063064_C02', '1772063061_G01', '1772063068_B04', '1772063077_C06', '1772063061_H08', '1772062128_E06', '1772063063_E11', '1772063070_F01', '1772063078_F03', '1772062115_D06', '1772063062_D12', '1772062113_D06', '1772063062_D06', '1772062114_F10', '1772063078_C04', '1772063068_C12', '1772062109_G11', '1772062115_E09', '1772063062_A03', '1772062114_G07', '1772062113_G03', '1772067063_H06', '1772062114_A02', '1772062109_D07', '1772062113_E03', '1772067073_H12', '1772062111_H03', '1772067073_D11', '1772063071_D09', '1772063071_E09', '1772062113_D03', '1772063070_D11', '1772067074_D06', '1772063063_A07', '1772062111_C10', '1772071041_E08', '1772063065_D09', '1772062111_E07', '1772067070_F11', '1772063063_H04', '1772067073_D12', '1772071040_G12', '1772062115_E10', '1772063068_E12', '1772060225_E04', '1772063068_G01', '1772063065_B10', '1772063065_H05', '1772060224_F11', '1772062113_A04', '1772071040_H08', '1772063074_C06', '1772063065_A08', '1772063071_B03', '1772067058_A05', '1772063071_E05', '1772062113_B05', '1772063078_E04', '1772063068_C02', '1772063068_E08', '1772063068_C05', '1772063070_D09', '1772063077_B04', '1772062114_B06', '1772063065_B05', '1772063078_D10', '1772063078_E06', '1772063078_G09', '1772063070_F09', '1772063068_B07', '1772063068_A07', '1772062114_G09', '1772060224_C05', '1772063078_C10', '1772062128_F12', '1772060240_F09', '1772062128_A11', '1772060240_E07', '1772060240_E09', '1772060240_D04', '1772063068_D02', '1772063063_A02', '1772063068_E03', '1772060240_A02', '1772060240_C06', '1772060240_B09', '1772060240_A05', '1772060240_G02', '1772063065_A06', '1772063077_B02', '1772063068_E02', '1772063068_C11', '1772063068_C06', '1772063077_A07', '1772067054_A04', '1772066073_G02', '1772066098_A07', '1772067060_B12', '1772067059_F12', '1772067082_C12', '1772067069_B11', '1772067082_F04', '1772066077_H11', '1772071044_H04', '1772067058_F04', '1772066077_D08', '1772066090_A08', '1772067093_F09', '1772066070_B03', '1772071035_C06', '1772071036_C05', '1772067083_D06', '1772066090_F10', '1772066090_F06', '1772071035_G06', '1772071036_E02', '1772067082_E08', '1772066090_C03', '1772066077_G03', '1772067054_D06', '1772067093_F07', '1772067059_A07', '1772067094_F06', '1772066073_G06', '1772071040_C06', '1772071040_D07', '1772062116_E12', '1772066073_D09', '1772067058_F12', '1772066080_B06', '1772066090_G07', '1772066099_A12', '1772067058_H04', '1772067059_G08', '1772067070_D03', '1772071044_H01', '1772062111_B08', '1772066099_F07', '1772067076_C05', '1772071040_H11', '1772066077_H01', '1772066097_E07', '1772067070_C07', '1772071017_A02', '1772062109_C04', '1772071017_G07', '1772067074_A09', '1772071041_C06', '1772067070_D09', '1772067094_B06', '1772067063_C06', '1772063063_D03', '1772071041_B09', '1772067094_A03', '1772067066_D09', '1772071017_E11', '1772071017_B07', '1772060225_G12', '1772071041_A09', '1772067069_D09', '1772066107_A06', '1772066090_G08', '1772066076_C06', '1772066102_C12', '1772066070_H06', '1772066090_H06', '1772066076_D09', '1772066080_H01', '1772066080_E04', '1772066076_E02', '1772066099_D09', '1772066080_D06', '1772066070_H11', '1772067076_B12', '1772066080_D10', '1772066099_F03', '1772067076_F06', '1772066108_H03', '1772066077_A05', '1772066076_D05', '1772066076_A05', '1772067059_B09', '1772067076_C12', '1772067060_E11', '1772066070_F03', '1772066102_B10', '1772067054_A07', '1772067096_G07', '1772066090_E03', '1772066108_D11', '1772066070_A08', '1772066076_D07', '1772066097_G06', '1772066090_H03', '1772066090_E06', '1772066102_D10', '1772066070_C01', '1772066090_F01', '1772066070_C11', '1772066077_D05', '1772066070_E05', '1772066070_C04', '1772066100_B12', '1772066097_G07', '1772066070_E08', '1772066077_E06', '1772067096_H05', '1772067082_D09', '1772066074_C01', '1772067096_E02', '1772067096_G04', '1772066102_H06', '1772067094_A04', '1772066080_B10', '1772066090_C11', '1772066077_A04', '1772066077_H08', '1772066070_A04', '1772066090_H07', '1772067082_G01', '1772066073_F08', '1772066090_D11', '1772067076_D08', '1772067082_D01', '1772067083_D02', '1772067082_A11', '1772066107_E06', '1772067094_G06', '1772066077_B01', '1772066074_F03', '1772067093_B04', '1772066070_C06', '1772066070_C05', '1772066070_E12', '1772066070_G05', '1772066070_D08', '1772066090_G10', '1772066090_A01', '1772066070_B07', '1772066090_D07', '1772066100_A08', '1772066107_G05', '1772066070_H12', '1772066077_G12', '1772066070_F02', '1772066077_B12', '1772066089_C03', '1772066077_C10', '1772071044_G04', '1772066090_H05', '1772066090_B01', '1772066090_F07', '1772066108_E08', '1772066107_C10', '1772066070_C09', '1772066077_F04', '1772066090_G09', '1772066090_A11', '1772062116_F11', '1772066070_G11', '1772066077_G09', '1772066073_E05', '1772067094_C04', '1772066070_B05', '1772066073_G08', '1772066077_C09', '1772066107_A12', '1772066074_F01', '1772067096_D04', '1772066070_C03', '1772066080_D12', '1772067096_F12', '1772066090_E04', '1772067054_C07', '1772066089_A02', '1772066070_H04', '1772066107_E01', '1772067096_C11', '1772066070_F12', '1772066107_B09', '1772066070_E09', '1772066090_C10', '1772066070_H08', '1772066099_C03', '1772066090_E09', '1772066070_F07', '1772066070_D11', '1772066089_D12', '1772066090_C09', '1772067094_D09', '1772067059_A12', '1772067096_A04', '1772067058_G12', '1772067076_D10', '1772066102_G02', '1772071035_A07', '1772071045_F12', '1772066099_D11', '1772071044_G10', '1772067076_A01', '1772071045_F02', '1772071045_G12', '1772067076_A02', '1772067054_D11', '1772071036_D10', '1772067094_H12', '1772067058_F02', '1772067096_D10', '1772066099_A04', '1772067094_F01', '1772066108_H02', '1772067094_G07', '1772071036_F11', '1772067094_H04', '1772067096_C05', '1772067096_C12', '1772067054_D04', '1772067094_H07', '1772067058_G07', '1772067094_H11', '1772067096_H06', '1772067059_E11', '1772067096_E04', '1772071044_E08', '1772067094_F02', '1772071035_D08', '1772071036_H11', '1772067094_A02', '1772067054_G10', '1772067093_H02', '1772066102_A07', '1772067058_E06', '1772067093_A03', '1772067058_G10', '1772071036_H03', '1772067096_B12', '1772067094_A12', '1772067096_A09', '1772067060_E12', '1772067094_C02', '1772066102_D04', '1772067054_B03', '1772067058_B01', '1772067082_G02', '1772067054_E07', '1772066096_D07', '1772066095_C11', '1772067054_H06', '1772066073_E09', '1772071044_A11', '1772067059_H12', '1772067058_E11', '1772067060_C03', '1772066073_H02', '1772071035_H06', '1772066080_C02', '1772071045_B06', '1772066095_E07', '1772071036_F12', '1772071044_A09', '1772067059_D05', '1772067058_A11', '1772071044_E12', '1772067076_D06', '1772066076_H02', '1772066099_A07', '1772066074_B02', '1772071044_A07', '1772066077_B07', '1772066080_H11', '1772066099_B05', '1772071044_F04', '1772071036_B10', '1772066107_G03', '1772066099_G02', '1772067057_D06', '1772066076_H07', '1772071035_A12', '1772071044_B06', '1772071035_C09', '1772071045_A07', '1772067058_F06', '1772066099_D02', '1772071036_E07', '1772066089_C07', '1772071045_F04', '1772071036_C12', '1772066107_B02', '1772071036_A09', '1772066080_F12', '1772071035_H04', '1772071036_G08', '1772067057_G05', '1772071036_A01', '1772071035_F04', '1772071036_C08', '1772067059_G04', '1772066074_C08', '1772066102_B12', '1772066107_A01', '1772071036_D07', '1772067054_A12', '1772066080_F06', '1772071035_C04', '1772066107_H11', '1772067059_D04', '1772066074_E07', '1772066107_E03', '1772066107_E05', '1772066077_A12', '1772067059_G07', '1772071036_D11', '1772067058_B06', '1772067059_C12', '1772071045_H07', '1772066107_H04', '1772067058_C06', '1772066077_D12', '1772067096_H02', '1772066107_F12', '1772071036_E04', '1772071044_D11', '1772066077_G05', '1772066107_H06', '1772066077_E05', '1772067058_E04', '1772066107_H03', '1772067057_E06', '1772066077_E04', '1772066107_G10', '1772066077_G04', '1772066077_D10', '1772066077_B09', '1772071036_C06', '1772066077_F05', '1772066090_C02', '1772066077_C11', '1772066077_A10', '1772071035_G09', '1772066107_B04', '1772066077_D06', '1772066077_E09', '1772066077_E11', '1772066077_C06', '1772066076_D06', '1772067094_E04', '1772067058_C07', '1772071035_E06', '1772067060_A01', '1772067083_B04', '1772066077_C01', '1772067057_C11', '1772066103_E06', '1772066107_D02', '1772066107_E04', '1772071045_A04', '1772067058_H06', '1772067059_H04', '1772071036_H04', '1772066090_B09', '1772066077_C04', '1772071035_D03', '1772066077_D07', '1772066107_A02', '1772067060_G04', '1772071036_G04', '1772071036_C10', '1772066096_E11', '1772071036_B06', '1772071036_B04', '1772066107_A03', '1772071036_C11', '1772071044_H06', '1772067059_D09', '1772066073_F07', '1772067094_E06', '1772066076_D02', '1772066103_C06', '1772071036_B11', '1772066089_C12', '1772066090_C04', '1772066104_H07', '1772067059_E12', '1772067076_C04', '1772071036_A11', '1772066107_C11', '1772067059_G12', '1772066103_A02', '1772071036_A12', '1772066107_A11', '1772066077_F06', '1772066096_G09', '1772066076_B02', '1772066096_E07', '1772066103_D11', '1772066108_H01', '1772066096_B07', '1772066096_D03', '1772066102_A09', '1772071045_D04', '1772067054_E05', '1772067094_H06', '1772067058_H10', '1772071044_G05', '1772071044_C07', '1772067082_C08', '1772066073_E04', '1772067058_A07', '1772071036_B05', '1772071045_H04', '1772071044_E11', '1772071044_G01', '1772067096_G10', '1772066098_H11', '1772071035_E10', '1772067094_B10', '1772067093_C02', '1772067058_C05', '1772066101_B04', '1772071045_G05', '1772067076_F05', '1772066073_E11', '1772067096_H04', '1772071044_H12', '1772066096_B12', '1772067059_E06', '1772067060_E04', '1772066097_F06', '1772066096_A09', '1772066100_B03', '1772071044_F05', '1772071035_D12', '1772066095_C04', '1772071045_E10', '1772066080_A04', '1772071035_H12', '1772066103_D05', '1772071044_F10', '1772066073_G07', '1772066096_H08', '1772066101_D06', '1772066073_A11', '1772066070_A11', '1772066080_A06', '1772066107_G02', '1772066101_C06', '1772067060_E02', '1772066089_A05', '1772066089_A06', '1772071035_D05', '1772071035_B10', '1772066108_E04', '1772071035_A06', '1772066096_F02', '1772066070_B11', '1772066108_C07', '1772066098_G02', '1772066096_D12', '1772066080_A02', '1772071035_G05', '1772066107_C06', '1772066107_B06', '1772066096_D09', '1772066095_F03', '1772066095_G06', '1772067059_C02', '1772066076_F12', '1772071035_F10', '1772066099_C06', '1772067057_C05', '1772066102_F09', '1772071035_D11', '1772066074_F08', '1772066076_D11', '1772066073_D07', '1772066077_C12', '1772066107_H01', '1772066070_B12', '1772066076_B11', '1772066080_G10', '1772066076_F09', '1772066080_C06', '1772066108_G07', '1772066096_E04', '1772066070_F10', '1772067057_H10', '1772066070_A10', '1772066095_E05', '1772066101_C09', '1772066101_G12', '1772066108_G09', '1772066089_A12', '1772066099_G06', '1772066070_H10', '1772071036_A06', '1772066089_E11', '1772066089_H05', '1772066089_F04', '1772066098_E11', '1772066096_C06', '1772066076_G10', '1772066080_A01', '1772066096_A12', '1772066101_E11', '1772066097_F11', '1772066095_G01', '1772071036_E12', '1772066096_C10', '1772066077_A01', '1772067076_C11', '1772066073_E01', '1772066099_E12', '1772066073_F01', '1772067059_H11', '1772066099_E02', '1772066073_F02', '1772066107_F04', '1772066089_G06', '1772066073_H11', '1772066103_D07', '1772067059_H10', '1772066076_A12', '1772066077_G07', '1772066089_H02', '1772067057_H06', '1772066089_H06', '1772066099_F11', '1772067057_G10', '1772066099_F01', '1772066102_E11', '1772066080_G11', '1772066102_F04', '1772066080_B05', '1772067059_A10', '1772066089_D04', '1772066096_D11', '1772066107_F06', '1772066107_D11', '1772066099_G04', '1772066102_B05', '1772071035_H10', '1772066099_A11', '1772066107_G06', '1772066107_B10', '1772066099_E06', '1772066099_B06', '1772067076_F04', '1772066073_A06', '1772066107_D04', '1772066108_F02', '1772066076_A01', '1772067076_B05', '1772071035_E04', '1772067057_D08', '1772066073_D02', '1772066073_C02', '1772066076_A09', '1772066107_B07', '1772066099_D06', '1772066107_F11', '1772066107_G01', '1772066080_H06', '1772066097_G11', '1772066074_G03', '1772066107_C04', '1772066070_F04', '1772066070_G07', '1772071035_E12', '1772066102_E12', '1772071035_B04', '1772066080_G06', '1772066099_F06', '1772066076_D01', '1772067076_D05', '1772066099_F04', '1772067057_A03', '1772066077_B11', '1772066089_C06', '1772067059_A09', '1772067076_E07', '1772067076_D09', '1772066099_G11', '1772066089_A03', '1772066099_B02', '1772066107_G12', '1772066073_C09', '1772066076_B03', '1772066080_A12', '1772066073_B04', '1772066076_E08', '1772066097_D11', '1772066080_F10', '1772066101_A08', '1772066073_E12', '1772066096_F07', '1772066073_A01', '1772066073_C03', '1772066102_F08', '1772066099_D12', '1772067057_A06', '1772066102_B01', '1772066097_F04', '1772071036_B07', '1772066099_D01', '1772066107_F10', '1772067076_E12', '1772066099_E01', '1772066102_A01', '1772066097_D12', '1772066073_D11', '1772066101_A09', '1772071044_D06', '1772066107_C12', '1772067058_A06', '1772067076_C10', '1772066097_A03', '1772066107_A05', '1772066097_A04', '1772067057_B10', '1772067057_B02', '1772066070_C02', '1772066076_F07', '1772066100_A09', '1772066102_B04', '1772066073_G12', '1772066099_G05', '1772066073_C07', '1772066077_D04', '1772066100_C10', '1772066089_E04', '1772066073_B12', '1772067076_G10', '1772066102_F10', '1772066077_G11', '1772066096_D01', '1772066102_D02', '1772066108_D05', '1772066102_A11', '1772066102_D08', '1772066110_D05', '1772067058_A09', '1772066099_B03', '1772066073_B05', '1772066099_A03', '1772066089_D02', '1772066073_B01', '1772066108_B05', '1772066102_F11', '1772066089_B03', '1772066107_D05', '1772067076_B03', '1772066076_B04', '1772066107_F09', '1772066099_H12', '1772066102_E02', '1772066108_G10', '1772066099_B01', '1772067057_C04', '1772066102_E04', '1772067094_F10', '1772067094_C10', '1772067096_H12', '1772067093_C12', '1772067093_D11', '1772067093_C04', '1772067093_F12', '1772067096_E06', '1772067094_C11', '1772067096_E08', '1772067094_G05', '1772067093_F02', '1772067093_A07', '1772067054_E11', '1772067096_A03', '1772067054_H05', '1772067082_F11', '1772067082_A06', '1772071044_C11', '1772067093_C03', '1772067082_F08', '1772066100_B01', '1772067058_B11', '1772066074_E02', '1772066098_C01', '1772066097_A02', '1772066076_G08', '1772066107_C05', '1772066073_B09', '1772067082_D12', '1772067083_D08', '1772067094_F11', '1772067093_D03', '1772067094_E03', '1772067054_E06', '1772067096_E10', '1772067096_B10', '1772067054_H11', '1772067094_D12', '1772067094_D08', '1772067094_H10', '1772067054_A09', '1772067054_A03', '1772067054_E04', '1772067054_D05', '1772066100_E05', '1772066100_A06', '1772067093_A10', '1772067058_A08', '1772067076_F11', '1772066103_G10', '1772067058_G05', '1772066104_H05', '1772066098_C05', '1772066073_D04', '1772066074_D02', '1772066095_A04', '1772067094_C09', '1772067094_F03', '1772071044_G12', '1772067096_G12', '1772067054_H12', '1772067093_G11', '1772067094_A06', '1772066103_D12', '1772067093_A01', '1772067096_E11', '1772066101_C11', '1772066107_F08', '1772067082_F01', '1772071035_C08', '1772066101_E05', '1772067082_A01', '1772066098_G10', '1772066076_B08', '1772066074_E03', '1772066104_G09', '1772066101_F12', '1772066073_E08', '1772066102_H03', '1772066107_E12', '1772067057_F10', '1772066100_C08', '1772067083_D03', '1772071044_C08', '1772066095_H08', '1772067054_A05', '1772067054_B07', '1772067058_H08', '1772066073_E02', '1772066100_F04', '1772071044_A08', '1772066098_D03', '1772066103_F12', '1772067058_F05', '1772066074_B03', '1772066097_E04', '1772066096_D04', '1772066076_D10', '1772066096_E03', '1772066102_F03', '1772066076_F10', '1772066100_D11', '1772066101_C07', '1772066100_A03', '1772067076_G09', '1772067058_A01', '1772067093_C07', '1772066070_F01', '1772067094_G04', '1772067054_B10', '1772067058_G08', '1772066100_F05', '1772066077_H06', '1772071044_E05', '1772071035_C05', '1772066103_C03', '1772066100_A10', '1772071036_A05', '1772066096_E01', '1772066080_G02', '1772066101_E12', '1772066098_D02', '1772066107_B11', '1772066098_H05', '1772066100_B07', '1772066104_A04', '1772066101_C12', '1772066101_G10', '1772066073_F09', '1772066102_B07', '1772066102_E05', '1772066102_F05', '1772066100_F10', '1772066098_C03', '1772066098_E03', '1772071035_F05', '1772066095_F06', '1772066101_C01', '1772066097_H11', '1772071036_G03', '1772066098_D05', '1772066095_G03', '1772066101_C08', '1772066101_D08', '1772066095_B11', '1772066097_C10', '1772066096_D10', '1772066098_H06', '1772066101_D03', '1772066096_E05', '1772066098_A06', '1772066080_H05', '1772066098_F07', '1772066098_B02', '1772066099_F12', '1772066090_F11', '1772066080_B01', '1772066107_B05', '1772067057_H05', '1772066102_F06', '1772066073_B08', '1772066100_G02', '1772066098_E02', '1772066097_A05', '1772066073_D10', '1772066098_E09', '1772071036_E01', '1772066101_G04', '1772066098_D09', '1772066096_B10', '1772066104_A01', '1772066097_D06', '1772066098_A08', '1772066097_D07', '1772066107_H12', '1772066089_H10', '1772066101_H01', '1772066076_C05', '1772066101_D02', '1772066089_B02', '1772066080_B12', '1772067076_A09', '1772066096_G02', '1772066097_F12', '1772066080_E06', '1772066073_F04', '1772066096_F09', '1772066074_B01', '1772066098_F02', '1772066095_D01', '1772066098_A02', '1772066101_D11', '1772066098_H04', '1772066100_A11', '1772066074_B08', '1772066099_B10', '1772066080_C05', '1772066099_C05', '1772066089_G12', '1772066099_H03', '1772066080_D01', '1772066070_A05', '1772066073_H01', '1772066101_F05', '1772066098_E01', '1772066097_E12', '1772066095_B10', '1772066096_C05', '1772066089_B10', '1772066101_F11', '1772066074_A01', '1772066097_C11', '1772066073_C10', '1772066101_A04', '1772066108_G05', '1772066097_C05', '1772066107_B12', '1772066089_F09', '1772066099_F05', '1772066090_B10', '1772066095_C01', '1772066096_E12', '1772066098_E05', '1772066102_D05', '1772066089_G05', '1772066076_A03', '1772066097_A11', '1772066102_A12', '1772066100_E09', '1772066070_H05', '1772066089_G10', '1772067076_H04', '1772066103_A05', '1772066095_C03', '1772066089_F11', '1772066073_A10', '1772066097_G10', '1772066098_C09', '1772066097_H03', '1772066096_A01', '1772067057_D10', '1772066097_H10', '1772066095_C06', '1772066095_B09', '1772066074_A09', '1772066096_F01', '1772066097_A06', '1772066102_A10', '1772066099_A08', '1772066089_A09', '1772066097_C02', '1772066102_A02', '1772066074_D07', '1772067057_C12', '1772066099_B11', '1772066076_E01', '1772066073_C11', '1772066074_F07', '1772066101_C05', '1772066096_G10', '1772066099_H05', '1772066097_B05', '1772066095_H12', '1772066076_A04', '1772066080_H03', '1772066102_G05', '1772066080_G03', '1772066073_F06', '1772067057_C06', '1772067076_A07', '1772066098_C08', '1772066097_B04', '1772066107_G04', '1772066099_G10', '1772066089_G11', '1772066097_G05', '1772066096_F12', '1772066073_C04', '1772066089_D10', '1772066099_G12', '1772066097_A01', '1772066099_A06', '1772067057_G07', '1772067076_C07', '1772067064_G07', '1772067070_D08', '1772058177_D03', '1772067074_C07', '1772063070_G03', '1772058177_D09', '1772066080_G07', '1772063063_C07', '1772066080_D07', '1772062114_G10', '1772063061_G05', '1772058171_C02', '1772067063_D03', '1772062111_F07', '1772071036_G12', '1772067070_A05', '1772062111_H05', '1772062114_A12', '1772066095_B05', '1772060226_F05', '1772066098_C04', '1772062115_A09', '1772066090_F05', '1772062109_A05', '1772062116_B05', '1772060240_A10', '1772066070_G12', '1772062115_D07', '1772063063_F08', '1772060224_G07', '1772060224_B04', '1772062115_C01', '1772066090_G12', '1772060225_A11', '1772066108_A08', '1772063078_B09', '1772063062_E07', '1772062115_G09', '1772063078_A11', '1772060225_A05', '1772062115_F08', '1772062128_B02', '1772058177_E11', '1772067059_D12', '1772063061_A09', '1772058177_A06', '1772058171_F09', '1772058171_B01', '1772058177_E10', '1772058171_H07', '1772067073_B03', '1772067069_H05', '1772063063_E07', '1772067069_B03', '1772067074_E07', '1772067069_F06', '1772060240_C09', '1772071044_G06', '1772063063_F03', '1772063063_B04', '1772067060_A02', '1772067059_F05', '1772066098_B11', '1772063061_A11', '1772063063_C02', '1772060240_F11', '1772063063_F05', '1772060225_F06', '1772063063_F10', '1772060225_E07', '1772060225_D10', '1772060225_B07', '1772063063_E10', '1772060226_G12', '1772060226_F10', '1772066077_A06', '1772062109_B08', '1772063079_C10', '1772060225_H11', '1772062111_F10', '1772066090_A04', '1772066110_F08', '1772062111_F05', '1772058177_D02', '1772062128_F06', '1772066110_H11', '1772066099_E05', '1772067076_B10', '1772066077_H04', '1772066099_D10', '1772066102_E10', '1772062111_F11', '1772062111_F06', '1772062109_C06', '1772062113_G05', '1772062111_C08', '1772062109_A03', '1772062111_C01', '1772062111_E06', '1772062109_H10', '1772066108_H11', '1772063077_C03', '1772062116_A12', '1772062109_E07', '1772066099_H01', '1772062128_B11', '1772062116_H06', '1772062113_D10', '1772062109_G03', '1772062114_B01', '1772062113_H02', '1772063074_C02', '1772062118_E08', '1772066099_B12', '1772063077_B07', '1772066096_C01', '1772062114_B10', '1772062113_B09', '1772062113_D01', '1772062109_E08', '1772062113_D08', '1772062113_G12', '1772066089_C04', '1772062115_H08', '1772062116_F01', '1772062115_C03', '1772067076_H05', '1772062115_G07', '1772066108_H05', '1772066089_E05', '1772062118_G05', '1772071041_E05', '1772063061_H11', '1772067054_A11', '1772067065_G08', '1772071040_D02', '1772071041_G10', '1772067066_C04', '1772071041_F05', '1772063070_E07', '1772063070_H07', '1772071041_F06', '1772067066_B04', '1772067060_G06', '1772067074_F09', '1772071040_C12', '1772071040_C10', '1772058148_G09', '1772067066_H05', '1772067059_D11', '1772066110_A04', '1772067064_G04', '1772067064_H01', '1772067073_D10', '1772067073_F06', '1772071041_D10', '1772058148_F07', '1772067069_D04', '1772058148_A01', '1772058148_G08', '1772067064_B10', '1772071036_G02', '1772063070_G01', '1772067070_H09', '1772058148_G11', '1772067066_E12', '1772067064_D10', '1772067063_B07', '1772062118_D03', '1772067074_F05', '1772071040_C04', '1772063070_C06', '1772058148_A03', '1772058148_B08', '1772058148_D07', '1772067073_C02', '1772067073_G10', '1772062116_C06', '1772062116_A02', '1772062116_G03', '1772062118_D02', '1772067073_E11', '1772063062_B03', '1772071040_A06', '1772058148_F02', '1772058148_A10', '1772067074_D12', '1772066080_B04', '1772062116_F05', '1772067074_E11', '1772067064_B06', '1772067073_D01', '1772067069_A09', '1772071041_D06', '1772071040_H06', '1772071040_H10', '1772062111_B11', '1772067064_C08', '1772067069_A02', '1772060240_H04', '1772062116_B06', '1772063063_H07', '1772067074_A11', '1772062111_B02', '1772067074_F04', '1772063063_D08', '1772071040_G11', '1772063063_G10', '1772071040_D04', '1772062118_C04', '1772062109_C12', '1772062109_H04', '1772071040_G05', '1772060240_F06', '1772071040_C11', '1772067064_C10', '1772063070_G06', '1772062128_H02', '1772062128_D03', '1772063061_B12', '1772058148_C02', '1772062116_C11', '1772063061_F04', '1772060225_D12', '1772058177_C06', '1772060240_B12', '1772062113_B06', '1772062114_H12', '1772063062_A06', '1772062109_G05', '1772063079_C12', '1772062116_G06', '1772062113_G01', '1772062113_F02', '1772062113_B01', '1772062111_C09', '1772062111_G02', '1772060224_A07', '1772062113_F07', '1772062114_F03', '1772062111_D11', '1772058171_F05', '1772062111_E03', '1772062113_A05', '1772060224_C04', '1772058171_G08', '1772062113_B04', '1772062113_D09', '1772062109_C07', '1772062109_F01', '1772062113_G11', '1772062114_A03', '1772058177_A02', '1772058171_C03', '1772062109_A07', '1772063061_A07', '1772062111_G01', '1772058171_C12', '1772058171_D10', '1772062109_B01', '1772063079_F07', '1772058171_H02', '1772062128_H11', '1772066108_D06', '1772062111_D05', '1772062113_C03', '1772062116_B12', '1772062118_F02', '1772062114_C07', '1772067057_B03', '1772062118_F08', '1772062114_B03', '1772058171_D06', '1772063062_C10', '1772058171_C09', '1772063062_C07', '1772062116_E08', '1772062116_E07', '1772062113_B03', '1772062116_A09', '1772062114_E11', '1772062128_H05', '1772058148_A06', '1772062111_G11', '1772062113_A01', '1772060224_G06', '1772062109_A12', '1772062115_B06', '1772066108_G12', '1772071040_D12', '1772058171_F06', '1772063063_D06', '1772062116_D04', '1772063064_D06', '1772063074_G12', '1772062113_A02', '1772058148_A04', '1772062113_A12', '1772063062_H08', '1772063063_B06', '1772062113_F03', '1772062109_C03', '1772062116_F04', '1772063062_G01', '1772062116_E02', '1772063062_C01', '1772063074_H11', '1772063079_D07', '1772071040_G04', '1772063063_A01', '1772063063_A12', '1772071014_D12', '1772062109_A09', '1772067069_G04', '1772062111_E11', '1772063074_A11', '1772063062_G11', '1772062118_H04', '1772062109_F04', '1772060240_C04', '1772067074_F06', '1772063063_B10', '1772071041_A08', '1772063062_B04', '1772066097_B12', '1772062114_E05', '1772063077_D02', '1772060240_G11', '1772063074_C12', '1772062118_H10', '1772060224_H04', '1772060240_F04', '1772063062_F12', '1772062115_D05', '1772071040_D05', '1772063074_G07', '1772063063_G02', '1772063061_G08', '1772063061_D10', '1772062114_E06', '1772062111_E04', '1772060224_H05', '1772063062_D05', '1772063061_D01', '1772060240_F02', '1772062114_F05', '1772071041_A12', '1772062116_H05', '1772063062_G05', '1772063062_E08', '1772063062_E11', '1772062118_C01', '1772071040_A08', '1772062128_A01', '1772063078_H04', '1772063063_C10', '1772062113_G09', '1772062115_E01', '1772063074_F10', '1772063068_D10', '1772063062_E01', '1772063063_B11', '1772063062_A08', '1772060225_E02', '1772063061_F05', '1772071041_A10', '1772062118_A03', '1772063079_F04', '1772071041_B04', '1772062116_A11', '1772062118_B03', '1772063061_G11', '1772063061_D12', '1772063078_B01', '1772062113_B11', '1772062115_A04', '1772060225_G01', '1772066098_A04', '1772063078_E11', '1772066098_B04', '1772060225_C05', '1772062115_D04', '1772063078_B06', '1772062118_F10', '1772063068_G06', '1772063078_C07', '1772063078_B07', '1772062113_A08', '1772062115_C06', '1772060225_C11', '1772063077_E09', '1772063074_A04', '1772063074_G04', '1772062115_B10', '1772060225_G04', '1772060224_A11', '1772060224_B03', '1772060224_C10', '1772062115_C04', '1772062111_B04', '1772060225_C07', '1772062114_B09', '1772063062_F03', '1772063078_F05', '1772063078_C09', '1772060240_F10', '1772062116_E04', '1772063078_C08', '1772063078_F02', '1772063078_B11', '1772062115_A02', '1772060224_D03', '1772062111_A12', '1772063078_F11', '1772066080_D05', '1772060240_G10', '1772062116_E01', '1772060225_G06', '1772060240_A12', '1772063079_C01', '1772060224_A06', '1772063061_H10', '1772062114_D06', '1772066096_C04', '1772063061_C05', '1772060225_F12', '1772063061_E08', '1772062118_E02', '1772062114_H05', '1772063061_C03', '1772062114_H10', '1772062115_A06', '1772062114_B12', '1772063079_E08', '1772063061_B11', '1772063061_F11', '1772066070_C12', '1772062114_A08', '1772063078_G08', '1772063074_A09', '1772060225_B12', '1772063079_A06', '1772063077_D09', '1772060224_A02', '1772062118_B05', '1772060225_F09', '1772063074_G10', '1772063079_A12', '1772063079_D01', '1772063074_F12', '1772067073_A08', '1772063077_C01', '1772060225_A12', '1772063079_F09', '1772063078_A03', '1772062114_H04', '1772062115_D03', '1772063064_E03', '1772063079_D08', '1772060224_E09', '1772063079_H03', '1772062111_H07', '1772060224_H11', '1772063074_H10', '1772063064_D09', '1772066089_F12', '1772062116_F10', '1772063078_E03', '1772060224_B05', '1772060224_D01', '1772063079_D09', '1772063063_H08', '1772060225_G07', '1772060226_D12', '1772063062_D01', '1772063064_H11', '1772062114_D10', '1772060225_H12', '1772060226_A01', '1772060226_A11', '1772060226_D01', '1772060226_D11', '1772060225_D07', '1772060226_F06', '1772060226_A07', '1772060226_D03', '1772060226_D04', '1772060226_E10', '1772060226_B11', '1772060226_A08', '1772060226_G04', '1772060226_H11', '1772060226_G06', '1772060226_H04', '1772060226_G11', '1772060226_F04', '1772060226_F08', '1772060226_C07', '1772060226_B03', '1772060226_G05', '1772060226_A12', '1772063065_F12', '1772060226_B04', '1772060226_B10', '1772062114_A06', '1772060226_C04', '1772060226_H01', '1772060226_B07', '1772062115_E11', '1772060226_G10', '1772060226_A06', '1772060226_B02', '1772060226_E05', '1772060226_C03', '1772060226_E12', '1772060226_D06', '1772060226_A10', '1772060226_E11', '1772060226_B12', '1772060225_E12', '1772062115_E07', '1772063068_F10', '1772062111_B05', '1772062111_C06', '1772063065_H06', '1772062111_C02', '1772060225_B06', '1772062128_E11', '1772058148_B06', '1772063079_E02', '1772060225_A07', '1772066100_F06', '1772063074_A12', '1772062118_G06', '1772062114_F08', '1772062115_C10', '1772062128_C05', '1772063077_F04', '1772060225_H10', '1772063074_H05', '1772060224_A01', '1772060225_C02', '1772062109_F08', '1772062115_G04', '1772060225_D08', '1772062115_F05', '1772060224_B08', '1772062115_B03', '1772063074_C03', '1772062113_E10', '1772063068_A09', '1772060224_F03', '1772062128_G11', '1772060225_C04', '1772060225_D09', '1772062113_C09', '1772062128_B04', '1772063062_F08', '1772063068_E05', '1772062114_C06', '1772060224_C08', '1772063061_D05', '1772062109_D10', '1772063077_A12', '1772063078_D05', '1772063078_B08', '1772063071_A05', '1772063078_A09', '1772063062_D10', '1772063065_D03', '1772063079_G07', '1772066095_A03', '1772066098_A11', '1772063068_B05', '1772063077_D10', '1772063068_F06', '1772063078_G01', '1772063065_B03', '1772062109_C11', '1772063078_D09', '1772066077_A03', '1772063065_H08', '1772063062_D08', '1772063074_E01', '1772062111_G04', '1772063064_G09', '1772067070_C09', '1772060225_D06', '1772062109_B11', '1772062115_A10', '1772062118_D10', '1772063068_H06', '1772062111_A10', '1772063065_A02', '1772066098_F01', '1772066070_B06', '1772066097_D10', '1772063062_F09', '1772066098_A03', '1772063062_F01', '1772066098_D10', '1772066074_A08', '1772066101_H08', '1772060226_H10', '1772066098_E12', '1772062118_H05', '1772062118_B06', '1772066098_C06', '1772066095_F09', '1772067059_A01', '1772062116_F08', '1772071035_A02', '1772067074_A01', '1772062111_E08', '1772063078_D12', '1772062111_C03', '1772067094_E11', '1772062111_D09', '1772067058_A10', '1772062118_C07', '1772063079_H01', '1772063063_E02', '1772058171_E06', '1772066108_E05', '1772062128_H08', '1772066104_C11', '1772063063_C08', '1772066102_A05', '1772062118_H03', '1772063074_E07', '1772067094_F05', '1772063063_A04', '1772067083_C11', '1772067060_F01', '1772058148_G01', '1772058148_E07', '1772067058_D12', '1772063061_E07', '1772067054_A06', '1772062128_E09', '1772066107_E11', '1772067054_C12', '1772067070_C12', '1772062128_G02', '1772071045_D02', '1772058177_D06', '1772058177_F03', '1772062128_E12', '1772062128_F09', '1772058177_D08', '1772062118_A05', '1772063063_E06', '1772066070_G10', '1772062128_C01', '1772071045_E11', '1772066076_G06', '1772066103_H11', '1772063063_E05', '1772071045_F05', '1772066076_B12', '1772067058_F10', '1772062128_D09', '1772067064_A09', '1772067054_F08', '1772067096_F04', '1772067059_C11', '1772066096_G11', '1772062115_G11', '1772067076_B09', '1772063063_A11', '1772066100_G06', '1772067058_B10', '1772063070_D01', '1772067060_H04', '1772058148_B01', '1772058148_A11', '1772067059_E05', '1772067063_G11', '1772062128_F08', '1772067060_E10', '1772066076_G04', '1772066098_D12', '1772058148_A09', '1772063074_B06', '1772066090_D10', '1772067076_G01', '1772066076_F05', '1772066108_H10', '1772067059_G06', '1772066095_F11', '1772066077_B04', '1772066102_G11', '1772066108_E12', '1772058177_E04', '1772067076_B06', '1772067057_A12', '1772066090_B02', '1772066077_C02', '1772067076_G12', '1772062115_E03', '1772066099_E11', '1772066108_A05', '1772062118_H12', '1772062111_C04', '1772066108_C04', '1772062115_H05', '1772062109_B05', '1772062109_D04', '1772066076_F11', '1772060224_D10', '1772066108_H08', '1772066102_D12', '1772063074_A01', '1772062118_C10', '1772063062_E06', '1772062118_G11', '1772062111_C05', '1772062115_B11', '1772062115_G12', '1772062118_F01', '1772066076_E05', '1772063062_H01', '1772062113_D12', '1772062111_E12', '1772062113_C02', '1772062114_A01', '1772062118_D05', '1772062118_G02', '1772062115_B08', '1772062109_H02', '1772062111_B07', '1772062111_B10', '1772062109_F06', '1772062113_C06', '1772062113_C11', '1772063070_C10', '1772062111_A07', '1772062111_H04', '1772063061_F12', '1772063079_H02', '1772062118_E01', '1772062115_E04', '1772062109_F12', '1772063070_D05', '1772062113_G06', '1772063061_E12', '1772062113_E02', '1772062113_H11', '1772062111_H02', '1772062113_D04', '1772063079_D02', '1772063079_E09', '1772066095_G12', '1772063061_D02', '1772063078_F04', '1772062113_F12', '1772063079_C04', '1772062116_H02', '1772058171_B09', '1772062115_C07', '1772063064_E07', '1772066108_H04', '1772067060_D02', '1772063079_D11', '1772062113_E07', '1772058171_B04', '1772058177_E07', '1772067076_D02', '1772058177_D12', '1772058171_E07', '1772058177_C01', '1772058171_A02', '1772058171_B05', '1772062111_E05', '1772058171_D03', '1772058177_A03', '1772058171_E02', '1772058171_A04', '1772063074_D10', '1772058171_G01', '1772058177_E06', '1772058177_C02', '1772058177_B05', '1772058171_D04', '1772058171_D01', '1772058177_F08', '1772058171_C01', '1772058171_F03', '1772058171_A11', '1772058171_G11', '1772058171_A09', '1772058171_F08', '1772058177_F06', '1772058171_B08', '1772058171_G03', '1772058177_A01', '1772058177_B06', '1772058148_G12', '1772058171_B07', '1772058177_G05', '1772063064_F07', '1772058171_E10', '1772058171_B06', '1772058177_E12', '1772058171_D02', '1772058177_B04', '1772062128_F04', '1772058171_D08', '1772058171_E05', '1772058177_B09', '1772058177_C12', '1772058177_D05', '1772058171_G10', '1772058171_C04', '1772058171_C08', '1772058171_C10', '1772062128_C10', '1772063061_B04', '1772058171_F04', '1772060226_D02', '1772062109_F11', '1772066090_E08', '1772067057_G11', '1772058148_F06', '1772058177_A09', '1772058177_A07', '1772060225_E03', '1772058177_D10', '1772058177_D11', '1772062109_D01', '1772058177_C03', '1772062109_E05', '1772062128_F05', '1772067070_C04', '1772066095_B12', '1772058148_E12', '1772058148_D12', '1772058148_A05', '1772066104_B07', '1772062111_G10', '1772060226_E03', '1772060240_H11', '1772066096_G06', '1772058177_A12', '1772062128_C02', '1772066095_G07', '1772058171_C05', '1772062128_A07', '1772058177_E01', '1772058177_B11', '1772058177_F07', '1772058177_G04', '1772063074_B03', '1772058171_F11', '1772062113_A11', '1772062111_H06', '1772063061_F10', '1772062116_D02', '1772062115_A07', '1772062115_C02', '1772062109_E12', '1772062109_D06', '1772062128_D02', '1772062118_F04', '1772063078_G02', '1772063063_H11', '1772062118_A11', '1772060224_F07', '1772063077_F06', '1772062111_A05', '1772060224_B12', '1772066076_A07', '1772067064_D12', '1772060240_F05', '1772063077_E03', '1772063074_F08', '1772058177_F04', '1772067074_D04', '1772066080_F07', '1772062111_G06', '1772062109_D12', '1772062109_A06', '1772062113_E05', '1772062111_F12', '1772062118_H01', '1772063074_H12', '1772067064_B09', '1772067057_B09', '1772060224_H07', '1772067094_C07', '1772067070_C02', '1772067096_G06', '1772060240_H10', '1772062116_G09', '1772067058_C04', '1772063077_D08', '1772063063_A03', '1772060226_H12', '1772066090_B06', '1772062118_F03', '1772063062_D07', '1772062128_H04', '1772062118_E06', '1772071044_B03', '1772060225_F05', '1772060226_F12', '1772062115_H11', '1772062109_C05', '1772058177_E03', '1772060224_B07', '1772060226_H02', '1772062118_D09', '1772062118_F11', '1772062111_D12', '1772062128_B03', '1772066090_D03', '1772063071_E02', '1772063064_A11', '1772060224_B09', '1772063078_H11', '1772063061_G03', '1772063071_D01', '1772063064_B05', '1772062111_E02', '1772063062_H12', '1772058177_C08', '1772058148_A07', '1772060240_A03', '1772067070_H08', '1772063079_C02', '1772063071_A01', '1772063079_A09', '1772067070_C05', '1772063079_A11', '1772062113_G08', '1772062128_G09', '1772060240_D11', '1772071044_B01', '1772071036_E10', '1772062113_D11', '1772063063_B01', '1772058171_E12', '1772063064_F06', '1772058148_H05', '1772066103_B12', '1772058177_G06', '1772058177_H06', '1772058177_H02', '1772058177_D01', '1772058171_E11', '1772058177_F10', '1772058171_G09', '1772058171_G07', '1772058177_F12', '1772058177_G12', '1772058171_F01', '1772058171_H05', '1772058171_G05', '1772062128_D06', '1772063079_B05', '1772062109_H08', '1772062109_D05', '1772062111_D07', '1772063077_D11', '1772062113_H07', '1772062111_G12', '1772063079_C11', '1772063079_H12', '1772060224_E05', '1772063070_F11', '1772062114_A09', '1772062111_H12', '1772063070_B04', '1772063064_E04', '1772058177_G07', '1772062113_C01', '1772067073_A12', '1772063063_C11', '1772062109_B07', '1772067058_F03', '1772071040_D01', '1772063063_G05', '1772067069_E07', '1772067063_A11', '1772071040_F09', '1772067063_A07', '1772066096_C02', '1772066098_E07', '1772058148_D04', '1772067074_H04', '1772058148_E02', '1772067073_B09', '1772063071_D11', '1772071040_E11', '1772067074_H09', '1772071041_H04', '1772067073_F07', '1772058148_C04', '1772058148_E09', '1772067074_H08', '1772058148_F12', '1772071036_D04', '1772063070_A07', '1772067074_F11', '1772063064_B04', '1772063070_A05', '1772071040_B11', '1772063070_E06', '1772066102_E06', '1772060240_D07', '1772067063_B03', '1772058148_F05', '1772066108_B09', '1772066102_C04', '1772060224_A05', '1772063070_G07', '1772066095_B03', '1772063065_D10', '1772060226_E09', '1772063061_B10', '1772062115_F01', '1772063065_D08', '1772066097_C03', '1772058148_F10', '1772066077_E10', '1772063065_B12', '1772063063_H05', '1772063068_B12', '1772067058_D06', '1772062109_G06', '1772062116_H04', '1772063062_G06', '1772058171_G04', '1772067063_D05', '1772058177_A05', '1772058177_F11', '1772063079_A07', '1772062116_H07', '1772063070_F02', '1772060224_C09', '1772067073_H05', '1772058171_A12', '1772067073_H10', '1772067074_D07', '1772062109_E02', '1772060224_F01', '1772066099_F09', '1772062111_A11', '1772058171_A06', '1772060224_F04', '1772060224_H12', '1772063071_F12', '1772062111_A08', '1772058177_A08', '1772060224_H01', '1772066095_A07', '1772058177_B01', '1772062111_B12', '1772063064_A08', '1772063064_B02', '1772062115_G08', '1772062114_H08', '1772063071_G12', '1772060225_H04', '1772058177_H03', '1772063064_F09', '1772060224_D12', '1772066080_C04', '1772063062_B10', '1772062128_E01', '1772062128_A02', '1772062128_C11', '1772060240_B11', '1772063078_A02', '1772058148_B03', '1772062128_C09', '1772062116_C03', '1772058177_H04', '1772063071_B06', '1772067063_E01', '1772058171_A01', '1772062111_F09', '1772066104_A09', '1772060240_G06', '1772062109_B04', '1772063071_B12', '1772063071_D02', '1772067058_D10', '1772067069_H12', '1772063062_A05', '1772063071_G02', '1772066096_E06', '1772071014_H04', '1772066098_B06', '1772071044_C05', '1772067058_E08', '1772071044_C04', '1772067096_A11', '1772066098_C02', '1772071045_F10', '1772066076_C10', '1772062109_D11', '1772062111_B03', '1772071014_C07', '1772067063_E05', '1772071045_D05', '1772071015_H09', '1772071014_G04', '1772071014_H07', '1772071014_D06', '1772071014_F02', '1772058171_H01', '1772071015_A08', '1772071015_D10', '1772067064_A10', '1772071015_H10', '1772062118_H11', '1772067069_C11', '1772071014_E01', '1772071015_D02', '1772062128_D05', '1772071014_D07', '1772071014_A02', '1772063071_H08', '1772062128_E02', '1772066110_G07', '1772066096_C07', '1772066096_B01', '1772063077_F03', '1772058177_E09', '1772066096_A04', '1772071036_F10', '1772066076_A11', '1772066102_H01', '1772062109_F07', '1772058177_D07', '1772067076_F10', '1772058171_F07', '1772062114_D03', '1772062114_B05', '1772058177_B03', '1772058171_B03', '1772063064_D08', '1772071015_A12', '1772071015_G05', '1772063062_B05', '1772063061_F08', '1772062128_B12', '1772062114_E01', '1772063068_F04', '1772063065_D11', '1772063064_H03', '1772066098_C10', '1772058171_A08', '1772063071_B11', '1772062128_E04', '1772063071_H07', '1772063071_H09', '1772062118_G01', '1772063062_D09', '1772063068_D06', '1772066095_B02', '1772063065_E10', '1772062115_D08', '1772060226_B09', '1772066099_H10', '1772063071_H02', '1772066080_C10', '1772066090_G04', '1772066095_C10', '1772063077_A11', '1772066098_B12', '1772066076_E12', '1772067060_G01', '1772066098_A01', '1772067082_A12', '1772066090_A06', '1772066101_G05', '1772066098_D07', '1772067076_H10', '1772071036_E06', '1772067060_D10', '1772066080_A11', '1772066070_E03', '1772066090_C12', '1772066090_F08', '1772071036_F04', '1772062128_F01', '1772066070_A06', '1772062118_A08', '1772062114_B04', '1772062128_C08', '1772066110_D07', '1772062109_A08', '1772067057_E02', '1772062115_F11', '1772060240_F07', '1772062113_F04', '1772062118_A10', '1772062114_D04', '1772063077_G09', '1772063077_F11', '1772060240_B02', '1772058148_C01', '1772067093_A09', '1772060224_G08', '1772060240_D05', '1772060240_B05', '1772071044_C01', '1772060224_D09', '1772062109_E04', '1772063061_C12', '1772063063_F04', '1772071045_C02', '1772063074_D02', '1772062109_E11', '1772060240_H12', '1772066077_D11', '1772062118_G03', '1772071041_B08', '1772067096_A10', '1772062114_F06', '1772067054_G12', '1772063062_C11', '1772062113_E12', '1772067063_G08', '1772058148_G05', '1772063064_E06', '1772058148_C05', '1772062128_C04', '1772063063_E01', '1772060224_E12', '1772058148_E08', '1772058177_C04', '1772063077_B01', '1772063077_E12', '1772058148_C09', '1772063074_C07', '1772063063_F12', '1772067073_H07', '1772067066_C06', '1772067073_E04', '1772067064_C11', '1772063063_G08', '1772067063_E07', '1772066090_F02', '1772062116_B01', '1772067063_A06', '1772066076_E11', '1772071040_B09', '1772071044_H11', '1772066102_D01', '1772071045_H02', '1772067070_B12', '1772058148_G03', '1772058148_E06', '1772062128_G01', '1772058148_F08', '1772062111_A04', '1772062118_C05', '1772063061_D08', '1772063062_E03', '1772067074_F02', '1772060226_C10', '1772063078_D03', '1772067083_H04', '1772060225_C06', '1772066101_B02', '1772062109_G12', '1772067094_B04', '1772066080_C03', '1772063078_G04', '1772062128_E07', '1772063070_B07', '1772063078_G06', '1772067059_C05', '1772066100_B04', '1772060226_H05', '1772058148_B11', '1772066110_H07', '1772067058_B03', '1772062128_E08', '1772062113_C04', '1772058177_G08', '1772060240_H06', '1772063078_G03', '1772071035_H05', '1772066098_F09', '1772063077_D01', '1772066090_G01', '1772067076_H12', '1772066076_G11', '1772067093_E09', '1772067094_G09', '1772066108_B03', '1772067057_F12', '1772067076_E06', '1772067060_H11', '1772067059_E10', '1772067094_G10', '1772066080_C11', '1772066096_C12', '1772066102_C03', '1772066101_B07', '1772066110_F06', '1772058148_B12', '1772063063_C12', '1772066076_F02', '1772060226_E06', '1772063065_A11', '1772058148_D11', '1772058148_C07', '1772058148_B02', '1772058148_A12', '1772071041_G06', '1772063079_E03', '1772058177_B08', '1772066110_A07', '1772063078_E07', '1772058177_B10', '1772060240_C12', '1772067073_A03', '1772067069_E08', '1772058148_D03', '1772058148_D10', '1772067060_B11', '1772063062_D11', '1772058148_F01', '1772063062_D04', '1772066076_H03', '1772058177_G01', '1772062111_B09', '1772066076_C02', '1772062113_E06', '1772066080_B09', '1772063061_C07', '1772062111_D02', '1772063077_A05', '1772063079_F03', '1772063077_B05', '1772058171_E08', '1772062113_H10', '1772067074_G05', '1772062113_D02', '1772066076_C01', '1772066080_E09', '1772067057_E04', '1772066080_D11', '1772067074_C09', '1772063077_B06', '1772066076_H04', '1772062116_E06', '1772067064_D03', '1772063063_G07', '1772067063_E08', '1772058148_G02', '1772066080_G05', '1772063074_F11', '1772063074_C04', '1772062111_E09', '1772062111_F01', '1772063074_H03', '1772063062_H10', '1772058148_D02', '1772063078_G10', '1772066110_D12', '1772071017_A07', '1772063071_G10', '1772058148_C03', '1772063061_D09', '1772067059_B04', '1772066097_D04', '1772063068_D01', '1772066098_A12', '1772058148_F03']\ncolumn metadata:  BiocFrame with 3005 rows and 9 columns\n                       tissue            group #     total mRNA mol               well                sex                age           diameter\n                 &lt;StringList&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt;\n1772071015_C02       sscortex                1.0            21580.0               11.0                1.0               21.0                0.0\n1772071017_G12       sscortex                1.0            21748.0               95.0               -1.0               20.0               9.56\n1772071017_A05       sscortex                1.0            31642.0               33.0               -1.0               20.0               11.1\n                          ...                ...                ...                ...                ...                ...                ...\n1772063068_D01       sscortex                9.0             4015.0                4.0                1.0               26.0               8.63\n1772066098_A12 ca1hippocampus                9.0             2896.0               89.0               -1.0               26.0               9.23\n1772058148_F03       sscortex                9.0             4460.0               22.0                1.0               26.0               10.4\n                     level1class  level2class\n                    &lt;StringList&gt; &lt;StringList&gt;\n1772071015_C02      interneurons        Int10\n1772071017_G12      interneurons        Int10\n1772071017_A05      interneurons         Int6\n                             ...          ...\n1772063068_D01 endothelial-mural         Vsmc\n1772066098_A12 endothelial-mural         Vsmc\n1772058148_F03 endothelial-mural         Vsmc\naccess counts:  &lt;20006 x 3005&gt; sparse ReloadedArray object of type 'uint16'\n[[  0,   0,   0, ...,   0,   0,   1],\n [  3,   1,   0, ...,   0,   0,   1],\n [  3,   1,   6, ...,   0,   0,   0],\n ...,\n [158, 326, 209, ..., 193,  36, 359],\n [ 31,  88,  97, ...,  50,  12,  52],\n [ 13,  14,   9, ...,  18,   3,  13]]\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe package uses delayed arrays, to load file-backed arrays and matrices. This reduces memory usage when loading large datasets. This package provides similar functionality to the R/Bioconductor’s DelayedArray eco-system.\n\n\n\nfrom delayedarray import to_scipy_sparse_matrix\nprint(\"counts as csr: \")\nprint(repr(to_scipy_sparse_matrix(sce.assays[\"counts\"], \"csc\")))\n\ncounts as csr: \n&lt;20006x3005 sparse matrix of type '&lt;class 'numpy.uint16'&gt;'\n    with 11349080 stored elements in Compressed Sparse Column format&gt;\n\n\nor realize the entire matrix when loaded from disk,\n\nsce = scrnaseq.fetch_dataset(\n    \"zeisel-brain-2015\", \"2023-12-14\", \n    realize_assays=True)\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\nWe also provide coercions to various package to take advantage of methods in the Python ecosystem, e.g. scverse and AnnData\n\nprint(\"coerce to AnnData: \", sce.to_anndata())\n\ncoerce to AnnData:  (AnnData object with n_obs × n_vars = 3005 × 20006\n    obs: 'tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class', 'rownames'\n    var: 'featureType', 'rownames'\n    layers: 'counts', None)",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#annotate-cell-types",
    "href": "tutorials/annotate_cell_types.html#annotate-cell-types",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "3. Annotate Cell Types",
    "text": "3. Annotate Cell Types\nWe can now annotate cell types by using reference datasets and matching cells based on their expression profiles. In this tutorial, we will use singleR in R or its Python equivalent singler.\nBefore running the singler algorithm, we need to download an appropriate reference dataset from the celldex package.\n\n3.1 Access Reference Datasets from celldex\nSimilar to the scRNAseq package, the celldex package provides access to the collection of reference expression datasets with curated cell type labels, for use in procedures like automated annotation of single-cell data or deconvolution of bulk RNA-seq to reference datasets. These datasets are also stored in language-agnostic representations for use in downstream analyses.\n\n\n\n\n\n\nNote\n\n\n\nThe celldex package is available on R/Bioconductor and PyPI.\n\n\nFor this tutorial, let’s download the Mouse RNA-seq reference from celldex using fetch_reference() in Python or fetchReference() in R. This reference consists of a collection of mouse bulk RNA-seq data sets downloaded from the gene expression omnibus (Benayoun et al. 2019). A variety of cell types are available, again mostly from blood but also covering several other tissues.\n\nPythonR\n\n\n\nimport celldex\n\nmouse_rnaseq_ref = celldex.fetch_reference(\n    \"mouse_rnaseq\", \"2024-02-26\", \n    realize_assays=True)\nprint(mouse_rnaseq_ref)\n\nclass: SummarizedExperiment\ndimensions: (21214, 358)\nassays(1): ['logcounts']\nrow_data columns(0): []\nrow_names(21214): ['Xkr4', 'Rp1', 'Sox17', ..., 'MGC107098', 'LOC100039574', 'LOC100039753']\ncolumn_data columns(3): ['label.main', 'label.fine', 'label.ont']\ncolumn_names(358): ['ERR525589Aligned', 'ERR525592Aligned', 'SRR275532Aligned', ..., 'SRR1044042Aligned', 'SRR1044043Aligned', 'SRR1044044Aligned']\nmetadata(0): \n\n\n\n\n\nsuppressWarnings(library(celldex))\nmouse_rnaseq_ref &lt;- fetchReference(\"mouse_rnaseq\", \"2024-02-26\", realize.assays=TRUE)\nmouse_rnaseq_ref\n\n\n\nNow, let’s identify cells from the zeisel-brain dataset using the mouse_rnaseq reference dataset.\n\nPythonR\n\n\n\nimport singler\n\nmatches = singler.annotate_single(\n    test_data=sce, \n    ref_data = mouse_rnaseq_ref,\n    ref_labels = \"label.main\"\n)\n\nimport pandas as pd\n\npd.Series(matches[\"best\"]).value_counts()\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/biocframe/BiocFrame.py:591: UserWarning: Setting property 'metadata' is an in-place operation, use 'set_metadata' instead\n  warn(\n\n\nNeurons              1704\nOligodendrocytes      844\nAstrocytes            180\nEndothelial cells     177\nMacrophages            45\nEpithelial cells       20\nMicroglia              18\nFibroblasts            17\nName: count, dtype: int64\n\n\n\n\nsuppressWarnings(library(SingleR))\ncell_labels &lt;- SingleR(test = assay(sce, \"counts\"), ref = mouse_rnaseq_ref, labels = mouse_rnaseq_ref$label.main)\n\ntable(cell_labels$labels)",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "href": "tutorials/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "4. Analyze Single-cell RNA-seq datasets",
    "text": "4. Analyze Single-cell RNA-seq datasets\n\n\n\nsingle-cell-methods\n\n\nAaron has implemented the single-cell methods from scran in C++. This allows us to reuse the same implementation in JS and develop applications for analyzing single-cell data (Kana), or in Python through the scranpy package. This avoids different interpretations of the analysis results by switching programming languages (Pachter et al, The impact of package selection and versioning on single-cell RNA-seq analysis | bioRxiv )\nTo analyze the dataset,\n\nimport scranpy\n\nresults = scranpy.analyze_sce(sce)\n\n# results is a complex object, lets explore the umap and tsne dimensions\nprint(results.tsne)\n\nTsneEmbedding(x=array([23.33658388, 22.8094184 , 23.45253415, ..., 16.0497226 ,\n       12.82033159, 20.09691125]), y=array([-13.48101462, -13.57116802, -12.70062904, ...,  -1.55527947,\n         1.61006778,   3.4322148 ]))\n\n\n\n4.1 Seems like magic?\nRunning the analyze_sce() function uses the default parameters to run the single-cell workflow. If you want to customize or want to have fine-grained control on the analysis steps, set the parameter dry_run=True.\n\n\n\n\n\n\nNote\n\n\n\nThis prints out the exact series of steps the function does under the hood to perform the analysis. You can then use this to customize the analysis to your specific dataset or use case.\n\n\n\nprint(scranpy.analyze_sce(sce, dry_run=True))\n\nimport scranpy\nimport numpy\n\nresults = AnalyzeResults()\nresults.rna_quality_control_metrics = scranpy.quality_control.per_cell_rna_qc_metrics(rna_matrix, options=update(options.per_cell_rna_qc_metrics_options, cell_names=options.miscellaneous_options.cell_names))\nresults.rna_quality_control_thresholds = scranpy.quality_control.suggest_rna_qc_filters(results.rna_quality_control_metrics, options=update(options.suggest_rna_qc_filters_options, block=options.miscellaneous_options.block))\nresults.rna_quality_control_filter = scranpy.quality_control.create_rna_qc_filter(results.rna_quality_control_metrics, results.rna_quality_control_thresholds, options=update(options.create_rna_qc_filter_options, block=options.miscellaneous_options.block))\ndiscard = numpy.zeros(rna_ptr.shape[1], dtype=bool)\ndiscard = numpy.logical_or(discard, results.rna_quality_control_filter)\nrna_filtered = scranpy.quality_control.filter_cells(rna_matrix, filter=discard)\nresults.quality_control_retained = numpy.logical_not(discard)\nfiltered_block = None\nraw_size_factors = results.rna_quality_control_metrics.column('sums')[results.quality_control_retained]\n(rna_normed, final_size_factors) = scranpy.normalization.log_norm_counts(rna_filtered, options=update(options.rna_log_norm_counts_options, size_factors=raw_size_factors, center_size_factors_options=update(options.rna_log_norm_counts_options.center_size_factors_options, block=filtered_block), with_size_factors=True))\nresults.rna_size_factors = final_size_factors\nresults.gene_variances = scranpy.feature_selection.model_gene_variances(rna_normed, options=update(options.model_gene_variances_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names))\nresults.hvgs = scranpy.feature_selection.choose_hvgs(results.gene_variances.column('residuals'), options=options.choose_hvgs_options)\nresults.rna_pca = scranpy.dimensionality_reduction.run_pca(rna_normed, options=update(options.rna_run_pca_options, subset=results.hvgs, block=filtered_block))\nlowdim = results.rna_pca.principal_components\n(get_tsne, get_umap, graph, remaining_threads) = scranpy.run_neighbor_suite(lowdim, build_neighbor_index_options=options.build_neighbor_index_options, find_nearest_neighbors_options=options.find_nearest_neighbors_options, run_umap_options=options.run_umap_options, run_tsne_options=options.run_tsne_options, build_snn_graph_options=options.build_snn_graph_options, num_threads=options.find_nearest_neighbors_options.num_threads)\nresults.snn_graph = graph\nresults.clusters = results.snn_graph.community_multilevel(resolution=options.miscellaneous_options.snn_graph_multilevel_resolution).membership\nresults.rna_markers = scranpy.marker_detection.score_markers(rna_normed, grouping=results.clusters, options=update(options.rna_score_markers_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names, num_threads=remaining_threads))\nresults.tsne = get_tsne()\nresults.umap = get_umap()\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsers can also run individual steps from the analysis without having to perform the full analysis, e.g. compute log normalized counts or find markers, etc.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#visualize-results",
    "href": "tutorials/annotate_cell_types.html#visualize-results",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "5. Visualize Results",
    "text": "5. Visualize Results\nI can’t have a tutorial without a section on visualization or figures.\nWe will use the seaborn and matplotlib packages in Python to create visualizations. We’ll plot the t-SNE embedding and color the cells by their cluster assignments.\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=results.clusters, palette=\"deep\"\n)\n\n\n\n\n\n\n\n\nor the UMAP embedding with the cell types we identified from celldex\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.umap.x, y=results.umap.y, \n    hue=matches[\"best\"][:3002], palette=\"deep\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaution\n\n\n\nDuring the QC step, some cells were filtered, hence we filter the matches and this is incorrect (since we don’t know which cells were filtered).\nWe’ll leave this as an exercise for the reader to change the order of steps: 1) run the dataset through the QC step 2) filter cells, and then 3) annotate using singleR.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#exercises",
    "href": "tutorials/annotate_cell_types.html#exercises",
    "title": "Tutorial 2: Access single-cell datasets from scRNAseq collection and annotate cell types",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nShare or Upload your datasets to scrna-seq, Instructions to upload are available in their respective R/Bioc and Python packages.\nExplore top markers for each cluster identified by scranpy.\nPerform multi-modal analysis (scranpy supports RNA, ADT, CRISPR).\nsave your results and explore in Kana.\n\nCongratulations! You have now completed the tutorial on accessing single-cell datasets using scRNAseq and ArtifactDB, and annotating cell types using reference datasets from celldex. For more detailed usage and advanced analyses, refer to the respective documentation of these packages.\nBy integrating R and Python workflows, you can leverage the strengths of both languages and perform comprehensive single-cell analysis. Keep exploring and happy analyzing!",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Access single-cell datasets from `scRNAseq` collection and annotate cell types"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html",
    "href": "tutorials/sessioninfo.html",
    "title": "Session Info",
    "section": "",
    "text": "The code base for this repository is available at https://github.com/BiocPy/tutorial.\nThis book is automatically built to identify issues caused by changes in the dependencies. We use quarto for reproducing the scripts provided in this book.",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html#pre-requisites",
    "href": "tutorials/sessioninfo.html#pre-requisites",
    "title": "Session Info",
    "section": "Pre-requisites",
    "text": "Pre-requisites\n\nimport sys\nimport subprocess\n\nfrom rich import print",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html#python",
    "href": "tutorials/sessioninfo.html#python",
    "title": "Session Info",
    "section": "Python",
    "text": "Python\nThe Python version on the GitHub runner\n\nprint(sys.version_info)\n\nsys.version_info(major=3, minor=11, micro=9, releaselevel='final', serial=0)",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html#packages",
    "href": "tutorials/sessioninfo.html#packages",
    "title": "Session Info",
    "section": "Packages",
    "text": "Packages\nVersions of packages installed for generating this build\n\nimport math\n\nimport genomicranges\nimport summarizedexperiment\nimport singlecellexperiment\nimport multiassayexperiment\nimport rds2py\nimport celldex\nimport scrnaseq\nimport session_info\n\n\nsession_info.show()\n\n\nClick to view session information\n-----\ncelldex                     0.1.1\ngenomicranges               0.4.28\nmultiassayexperiment        0.4.2\nrds2py                      0.4.4\nrich                        NA\nscrnaseq                    0.2.0\nsession_info                1.0.0\nsinglecellexperiment        0.4.6\nsummarizedexperiment        0.4.5\n-----\n\n\nClick to view modules imported as dependencies\nPIL                         10.4.0\nanndata                     0.10.8\nanyio                       NA\narrow                       1.3.0\nasciitree                   NA\nasttokens                   NA\nattr                        23.2.0\nattrs                       23.2.0\nbabel                       2.15.0\nbiocframe                   0.5.11\nbiocutils                   0.1.5\ncertifi                     2024.07.04\ncffi                        1.16.0\ncharset_normalizer          3.3.2\ncomm                        0.2.2\ncycler                      0.12.1\ncython_runtime              NA\ndateutil                    2.9.0.post0\ndebugpy                     1.8.2\ndecorator                   5.1.1\ndefusedxml                  0.7.1\ndelayedarray                0.5.1\ndolomite_base               0.2.4\nexecuting                   2.0.1\nfastjsonschema              NA\nfilelock                    3.15.4\nfqdn                        NA\ngypsum_client               0.1.3\nh5py                        3.11.0\nidna                        3.7\nipykernel                   6.29.5\niranges                     0.2.11\nisoduration                 NA\njedi                        0.19.1\njinja2                      3.1.4\njson5                       0.9.25\njsonpointer                 3.0.0\njsonschema                  4.23.0\njsonschema_specifications   NA\njupyter_events              0.10.0\njupyter_server              2.14.2\njupyterlab_server           2.27.3\nkiwisolver                  1.4.5\nmarkupsafe                  2.1.5\nmatplotlib                  3.9.1\nmatplotlib_inline           0.1.7\nmpl_toolkits                NA\nnatsort                     8.4.0\nnbformat                    5.10.4\nnumcodecs                   0.13.0\nnumpy                       1.26.4\noverrides                   NA\npackaging                   24.1\npandas                      2.2.2\nparso                       0.8.4\nplatformdirs                4.2.2\nprometheus_client           NA\nprompt_toolkit              3.0.47\npsutil                      6.0.0\npure_eval                   0.2.2\npyarrow                     17.0.0\npydev_ipython               NA\npydevconsole                NA\npydevd                      2.9.5\npydevd_file_utils           NA\npydevd_plugins              NA\npydevd_tracing              NA\npygments                    2.18.0\npyparsing                   3.1.2\npythonjsonlogger            NA\npytz                        2024.1\nreferencing                 NA\nrequests                    2.32.3\nrfc3339_validator           0.1.4\nrfc3986_validator           0.1.1\nrpds                        NA\nscipy                       1.12.0\nsend2trash                  NA\nsix                         1.16.0\nsniffio                     1.3.1\nstack_data                  0.6.3\ntorch                       2.3.1+cu121\ntorchgen                    NA\ntornado                     6.4.1\ntqdm                        4.66.4\ntraitlets                   5.14.3\ntyping_extensions           NA\nuri_template                NA\nurllib3                     2.2.2\nwcwidth                     0.2.13\nwebcolors                   24.6.0\nwebsocket                   1.8.0\nyaml                        6.0.1\nzarr                        2.18.2\nzmq                         26.0.3\n\n \n-----\nIPython             8.26.0\njupyter_client      8.6.2\njupyter_core        5.7.2\njupyterlab          4.2.3\nnotebook            7.2.1\n-----\nPython 3.11.9 (main, Jun 25 2024, 18:25:01) [GCC 11.4.0]\nLinux-6.5.0-1023-azure-x86_64-with-glibc2.35\n-----\nSession information updated at 2024-07-17 20:24",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "notebook/genomic_ranges.html",
    "href": "notebook/genomic_ranges.html",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "",
    "text": "Genomic range operations are fundamental to many bioinformatics analyses. They allow us to work with intervals of genomic coordinates, which is crucial for understanding the relationships between different genomic features such as genes, regulatory elements, and experimental data like ChIP-seq peaks. In this tutorial, we’ll explore how to work with genomic interval data using BiocPy’s GenomicRanges package, which provides Python implementations similar to the R/Bioconductor GenomicRanges package."
  },
  {
    "objectID": "notebook/genomic_ranges.html#outline",
    "href": "notebook/genomic_ranges.html#outline",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Outline",
    "text": "Outline\nIn this workshop, we’ll walk through several key aspects of working with genomic ranges in Python:\n\nReading Genomic Data: We’ll start by reading in genomic data from RDS files, including exon positions grouped by transcripts.\nBasic Genomic Operations: We’ll cover fundamental operations like finding transcription start sites (TSS) and promoter regions.\nOverlap Analysis: We’ll learn how to find overlaps between different genomic features, a common task in many analyses.\nAdvanced Operations: We’ll explore more complex operations like finding peaks within specific regions and resizing genomic intervals."
  },
  {
    "objectID": "notebook/genomic_ranges.html#prerequisites",
    "href": "notebook/genomic_ranges.html#prerequisites",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following packages installed:\n\nInstallation\nLet’s start by installing the required packages for R and Python.\n\nPython (shell)\nYou can install the Python packages using pip:\n\n!pip install -U biocutils genomicranges rds2py numpy pandas geniml\n\nRequirement already satisfied: biocutils in /Users/kancherj/miniforge3/lib/python3.10/site-packages (0.1.5)\nRequirement already satisfied: genomicranges in /Users/kancherj/miniforge3/lib/python3.10/site-packages (0.4.28)\nRequirement already satisfied: rds2py in /Users/kancherj/miniforge3/lib/python3.10/site-packages (0.4.4)\nRequirement already satisfied: numpy in /Users/kancherj/miniforge3/lib/python3.10/site-packages (1.26.4)\nCollecting numpy\n  Using cached numpy-2.0.0-cp310-cp310-macosx_14_0_arm64.whl.metadata (60 kB)\nRequirement already satisfied: pandas in /Users/kancherj/miniforge3/lib/python3.10/site-packages (2.2.2)\nRequirement already satisfied: geniml in /Users/kancherj/miniforge3/lib/python3.10/site-packages (0.4.0)\nRequirement already satisfied: biocframe&gt;=0.5.11 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from genomicranges) (0.5.11)\nRequirement already satisfied: iranges&gt;=0.2.11 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from iranges[optional]&gt;=0.2.11-&gt;genomicranges) (0.2.11)\nRequirement already satisfied: Cython in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rds2py) (3.0.10)\nRequirement already satisfied: scipy in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rds2py) (1.12.0)\nRequirement already satisfied: singlecellexperiment&gt;=0.4.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rds2py) (0.4.6)\nRequirement already satisfied: summarizedexperiment&gt;=0.4.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rds2py) (0.4.5)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: anndata&gt;0.9.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.10.8)\nRequirement already satisfied: genimtools&gt;=0.0.12 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.0.13)\nRequirement already satisfied: fastembed&gt;=0.2.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.3.4)\nRequirement already satisfied: gensim in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (4.3.2)\nRequirement already satisfied: huggingface-hub in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.23.5)\nRequirement already satisfied: logmuse in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.2.8)\nRequirement already satisfied: matplotlib in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (3.8.3)\nRequirement already satisfied: hnswlib in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.8.0)\nRequirement already satisfied: paramiko&gt;=3.0.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (3.4.0)\nRequirement already satisfied: peppy&gt;=0.40.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.40.3)\nRequirement already satisfied: pyBigWig in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.3.23)\nRequirement already satisfied: qdrant-client in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (1.10.1)\nRequirement already satisfied: requests&gt;=2.31.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (2.31.0)\nRequirement already satisfied: scanpy in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (1.10.2)\nRequirement already satisfied: seaborn in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.13.2)\nRequirement already satisfied: torch in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (2.3.1)\nRequirement already satisfied: ubiquerg&gt;=0.6.3 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.8.0)\nRequirement already satisfied: pyarrow in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (15.0.2)\nRequirement already satisfied: lightning in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (2.3.3)\nRequirement already satisfied: langchain-huggingface==0.0.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.0.2)\nRequirement already satisfied: botocore&gt;=1.34.54 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (1.34.131)\nRequirement already satisfied: boto3&gt;=1.34.54 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (1.34.131)\nRequirement already satisfied: pybiocfilecache&gt;=0.4.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (0.4.0)\nRequirement already satisfied: zarr&gt;=2.17.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (2.18.2)\nRequirement already satisfied: pyyaml&gt;=6.0.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (6.0.1)\nRequirement already satisfied: s3fs&gt;=2024.3.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from geniml) (2024.6.1)\nRequirement already satisfied: langchain-core&lt;0.3,&gt;=0.1.52 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-huggingface==0.0.2-&gt;geniml) (0.2.20)\nRequirement already satisfied: sentence-transformers&gt;=2.6.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-huggingface==0.0.2-&gt;geniml) (3.0.1)\nRequirement already satisfied: text-generation&lt;0.8.0,&gt;=0.7.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-huggingface==0.0.2-&gt;geniml) (0.7.0)\nRequirement already satisfied: tokenizers&gt;=0.19.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-huggingface==0.0.2-&gt;geniml) (0.19.1)\nRequirement already satisfied: transformers&gt;=4.39.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-huggingface==0.0.2-&gt;geniml) (4.42.4)\nRequirement already satisfied: array-api-compat!=1.5,&gt;1.4 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from anndata&gt;0.9.0-&gt;geniml) (1.7.1)\nRequirement already satisfied: exceptiongroup in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from anndata&gt;0.9.0-&gt;geniml) (1.2.1)\nRequirement already satisfied: h5py&gt;=3.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from anndata&gt;0.9.0-&gt;geniml) (3.11.0)\nRequirement already satisfied: natsort in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from anndata&gt;0.9.0-&gt;geniml) (8.4.0)\nRequirement already satisfied: packaging&gt;=20.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from anndata&gt;0.9.0-&gt;geniml) (23.2)\nRequirement already satisfied: jmespath&lt;2.0.0,&gt;=0.7.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from boto3&gt;=1.34.54-&gt;geniml) (1.0.1)\nRequirement already satisfied: s3transfer&lt;0.11.0,&gt;=0.10.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from boto3&gt;=1.34.54-&gt;geniml) (0.10.2)\nRequirement already satisfied: urllib3!=2.2.0,&lt;3,&gt;=1.25.4 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from botocore&gt;=1.34.54-&gt;geniml) (2.2.1)\nRequirement already satisfied: PyStemmer&lt;3.0.0,&gt;=2.2.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (2.2.0.1)\nRequirement already satisfied: loguru&lt;0.8.0,&gt;=0.7.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (0.7.2)\nRequirement already satisfied: mmh3&lt;5.0,&gt;=4.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (4.1.0)\nRequirement already satisfied: onnx&lt;2.0.0,&gt;=1.15.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (1.16.1)\nRequirement already satisfied: onnxruntime&lt;2.0.0,&gt;=1.17.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (1.18.1)\nRequirement already satisfied: pillow&lt;11.0.0,&gt;=10.3.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (10.4.0)\nRequirement already satisfied: snowballstemmer&lt;3.0.0,&gt;=2.2.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (2.2.0)\nRequirement already satisfied: tqdm&lt;5.0,&gt;=4.66 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from fastembed&gt;=0.2.5-&gt;geniml) (4.66.2)\nRequirement already satisfied: filelock in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from huggingface-hub-&gt;geniml) (3.15.4)\nRequirement already satisfied: fsspec&gt;=2023.5.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from huggingface-hub-&gt;geniml) (2024.6.1)\nRequirement already satisfied: typing-extensions&gt;=3.7.4.3 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from huggingface-hub-&gt;geniml) (4.10.0)\nRequirement already satisfied: ncls==0.0.68 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from iranges&gt;=0.2.11-&gt;iranges[optional]&gt;=0.2.11-&gt;genomicranges) (0.0.68)\nRequirement already satisfied: polars in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from iranges[optional]&gt;=0.2.11-&gt;genomicranges) (1.1.0)\nRequirement already satisfied: bcrypt&gt;=3.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from paramiko&gt;=3.0.0-&gt;geniml) (4.1.3)\nRequirement already satisfied: cryptography&gt;=3.3 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from paramiko&gt;=3.0.0-&gt;geniml) (42.0.8)\nRequirement already satisfied: pynacl&gt;=1.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from paramiko&gt;=3.0.0-&gt;geniml) (1.5.0)\nRequirement already satisfied: rich&gt;=10.3.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from peppy&gt;=0.40.1-&gt;geniml) (13.7.1)\nRequirement already satisfied: pephubclient&gt;=0.4.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from peppy&gt;=0.40.1-&gt;geniml) (0.4.2)\nRequirement already satisfied: sqlalchemy&lt;2.1,&gt;=2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pybiocfilecache&gt;=0.4.0-&gt;geniml) (2.0.31)\nRequirement already satisfied: six&gt;=1.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.16.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from requests&gt;=2.31.0-&gt;geniml) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from requests&gt;=2.31.0-&gt;geniml) (3.6)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from requests&gt;=2.31.0-&gt;geniml) (2024.2.2)\nRequirement already satisfied: aiobotocore&lt;3.0.0,&gt;=2.5.4 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from s3fs&gt;=2024.3.1-&gt;geniml) (2.13.1)\nRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from s3fs&gt;=2024.3.1-&gt;geniml) (3.9.5)\nRequirement already satisfied: asciitree in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from zarr&gt;=2.17.2-&gt;geniml) (0.3.3)\nRequirement already satisfied: numcodecs&gt;=0.10.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from zarr&gt;=2.17.2-&gt;geniml) (0.13.0)\nRequirement already satisfied: fasteners in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from zarr&gt;=2.17.2-&gt;geniml) (0.19)\nRequirement already satisfied: smart-open&gt;=1.8.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from gensim-&gt;geniml) (7.0.4)\nRequirement already satisfied: lightning-utilities&lt;2.0,&gt;=0.10.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from lightning-&gt;geniml) (0.11.5)\nRequirement already satisfied: torchmetrics&lt;3.0,&gt;=0.7.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from lightning-&gt;geniml) (1.4.0.post0)\nRequirement already satisfied: pytorch-lightning in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from lightning-&gt;geniml) (2.3.3)\nRequirement already satisfied: sympy in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from torch-&gt;geniml) (1.13.0)\nRequirement already satisfied: networkx in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from torch-&gt;geniml) (3.3)\nRequirement already satisfied: jinja2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from torch-&gt;geniml) (3.1.3)\nRequirement already satisfied: setuptools in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from logmuse-&gt;geniml) (69.2.0)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from matplotlib-&gt;geniml) (1.2.0)\nRequirement already satisfied: cycler&gt;=0.10 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from matplotlib-&gt;geniml) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from matplotlib-&gt;geniml) (4.50.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from matplotlib-&gt;geniml) (1.4.5)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from matplotlib-&gt;geniml) (3.1.2)\nRequirement already satisfied: grpcio&gt;=1.41.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from qdrant-client-&gt;geniml) (1.64.1)\nRequirement already satisfied: grpcio-tools&gt;=1.41.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from qdrant-client-&gt;geniml) (1.64.1)\nRequirement already satisfied: httpx&gt;=0.20.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (0.27.0)\nRequirement already satisfied: portalocker&lt;3.0.0,&gt;=2.7.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from qdrant-client-&gt;geniml) (2.10.1)\nRequirement already satisfied: pydantic&gt;=1.10.8 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from qdrant-client-&gt;geniml) (2.8.2)\nRequirement already satisfied: joblib in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (1.4.2)\nRequirement already satisfied: legacy-api-wrap&gt;=1.4 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (1.4)\nRequirement already satisfied: numba&gt;=0.56 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (0.60.0)\nRequirement already satisfied: patsy in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (0.5.6)\nRequirement already satisfied: pynndescent&gt;=0.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (0.5.13)\nRequirement already satisfied: scikit-learn&gt;=0.24 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (1.5.1)\nRequirement already satisfied: session-info in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (1.0.0)\nRequirement already satisfied: statsmodels&gt;=0.13 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (0.14.2)\nRequirement already satisfied: umap-learn!=0.5.0,&gt;=0.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scanpy-&gt;geniml) (0.5.6)\nRequirement already satisfied: wrapt&lt;2.0.0,&gt;=1.10.10 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiobotocore&lt;3.0.0,&gt;=2.5.4-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (1.16.0)\nRequirement already satisfied: aioitertools&lt;1.0.0,&gt;=0.5.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiobotocore&lt;3.0.0,&gt;=2.5.4-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (0.11.0)\nRequirement already satisfied: aiosignal&gt;=1.1.2 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (1.3.1)\nRequirement already satisfied: attrs&gt;=17.3.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (23.2.0)\nRequirement already satisfied: frozenlist&gt;=1.1.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (1.4.1)\nRequirement already satisfied: multidict&lt;7.0,&gt;=4.5 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (6.0.5)\nRequirement already satisfied: yarl&lt;2.0,&gt;=1.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (1.9.4)\nRequirement already satisfied: async-timeout&lt;5.0,&gt;=4.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from aiohttp!=4.0.0a0,!=4.0.0a1-&gt;s3fs&gt;=2024.3.1-&gt;geniml) (4.0.3)\nRequirement already satisfied: cffi&gt;=1.12 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from cryptography&gt;=3.3-&gt;paramiko&gt;=3.0.0-&gt;geniml) (1.16.0)\nRequirement already satisfied: protobuf&lt;6.0dev,&gt;=5.26.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from grpcio-tools&gt;=1.41.0-&gt;qdrant-client-&gt;geniml) (5.27.2)\nRequirement already satisfied: anyio in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpx&gt;=0.20.0-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (4.4.0)\nRequirement already satisfied: httpcore==1.* in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpx&gt;=0.20.0-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (1.0.5)\nRequirement already satisfied: sniffio in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpx&gt;=0.20.0-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (1.3.1)\nRequirement already satisfied: h11&lt;0.15,&gt;=0.13 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpcore==1.*-&gt;httpx&gt;=0.20.0-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (0.14.0)\nRequirement already satisfied: h2&lt;5,&gt;=3 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (4.1.0)\nRequirement already satisfied: jsonpatch&lt;2.0,&gt;=1.33 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-core&lt;0.3,&gt;=0.1.52-&gt;langchain-huggingface==0.0.2-&gt;geniml) (1.33)\nRequirement already satisfied: langsmith&lt;0.2.0,&gt;=0.1.75 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-core&lt;0.3,&gt;=0.1.52-&gt;langchain-huggingface==0.0.2-&gt;geniml) (0.1.88)\nRequirement already satisfied: tenacity!=8.4.0,&lt;9.0.0,&gt;=8.1.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langchain-core&lt;0.3,&gt;=0.1.52-&gt;langchain-huggingface==0.0.2-&gt;geniml) (8.2.3)\nRequirement already satisfied: llvmlite&lt;0.44,&gt;=0.43.0dev0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from numba&gt;=0.56-&gt;scanpy-&gt;geniml) (0.43.0)\nRequirement already satisfied: coloredlogs in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from onnxruntime&lt;2.0.0,&gt;=1.17.0-&gt;fastembed&gt;=0.2.5-&gt;geniml) (15.0.1)\nRequirement already satisfied: flatbuffers in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from onnxruntime&lt;2.0.0,&gt;=1.17.0-&gt;fastembed&gt;=0.2.5-&gt;geniml) (24.3.25)\nRequirement already satisfied: typer&gt;=0.7.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pephubclient&gt;=0.4.2-&gt;peppy&gt;=0.40.1-&gt;geniml) (0.12.3)\nRequirement already satisfied: annotated-types&gt;=0.4.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pydantic&gt;=1.10.8-&gt;qdrant-client-&gt;geniml) (0.7.0)\nRequirement already satisfied: pydantic-core==2.20.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from pydantic&gt;=1.10.8-&gt;qdrant-client-&gt;geniml) (2.20.1)\nRequirement already satisfied: markdown-it-py&gt;=2.2.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rich&gt;=10.3.0-&gt;peppy&gt;=0.40.1-&gt;geniml) (3.0.0)\nRequirement already satisfied: pygments&lt;3.0.0,&gt;=2.13.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from rich&gt;=10.3.0-&gt;peppy&gt;=0.40.1-&gt;geniml) (2.17.2)\nRequirement already satisfied: threadpoolctl&gt;=3.1.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from scikit-learn&gt;=0.24-&gt;scanpy-&gt;geniml) (3.5.0)\nRequirement already satisfied: regex!=2019.12.17 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from transformers&gt;=4.39.0-&gt;langchain-huggingface==0.0.2-&gt;geniml) (2024.5.15)\nRequirement already satisfied: safetensors&gt;=0.4.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from transformers&gt;=4.39.0-&gt;langchain-huggingface==0.0.2-&gt;geniml) (0.4.3)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from jinja2-&gt;torch-&gt;geniml) (2.1.5)\nRequirement already satisfied: stdlib-list in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from session-info-&gt;scanpy-&gt;geniml) (0.10.0)\nRequirement already satisfied: mpmath&lt;1.4,&gt;=1.1.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from sympy-&gt;torch-&gt;geniml) (1.3.0)\nRequirement already satisfied: pycparser in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from cffi&gt;=1.12-&gt;cryptography&gt;=3.3-&gt;paramiko&gt;=3.0.0-&gt;geniml) (2.21)\nRequirement already satisfied: humanfriendly&gt;=9.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from coloredlogs-&gt;onnxruntime&lt;2.0.0,&gt;=1.17.0-&gt;fastembed&gt;=0.2.5-&gt;geniml) (10.0)\nRequirement already satisfied: hyperframe&lt;7,&gt;=6.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from h2&lt;5,&gt;=3-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (6.0.1)\nRequirement already satisfied: hpack&lt;5,&gt;=4.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from h2&lt;5,&gt;=3-&gt;httpx[http2]&gt;=0.20.0-&gt;qdrant-client-&gt;geniml) (4.0.0)\nRequirement already satisfied: jsonpointer&gt;=1.9 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from jsonpatch&lt;2.0,&gt;=1.33-&gt;langchain-core&lt;0.3,&gt;=0.1.52-&gt;langchain-huggingface==0.0.2-&gt;geniml) (2.4)\nRequirement already satisfied: orjson&lt;4.0.0,&gt;=3.9.14 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from langsmith&lt;0.2.0,&gt;=0.1.75-&gt;langchain-core&lt;0.3,&gt;=0.1.52-&gt;langchain-huggingface==0.0.2-&gt;geniml) (3.10.6)\nRequirement already satisfied: mdurl~=0.1 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from markdown-it-py&gt;=2.2.0-&gt;rich&gt;=10.3.0-&gt;peppy&gt;=0.40.1-&gt;geniml) (0.1.2)\nRequirement already satisfied: click&gt;=8.0.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from typer&gt;=0.7.0-&gt;pephubclient&gt;=0.4.2-&gt;peppy&gt;=0.40.1-&gt;geniml) (8.1.7)\nRequirement already satisfied: shellingham&gt;=1.3.0 in /Users/kancherj/miniforge3/lib/python3.10/site-packages (from typer&gt;=0.7.0-&gt;pephubclient&gt;=0.4.2-&gt;peppy&gt;=0.40.1-&gt;geniml) (1.5.4)\n\n\n\n\nR\n```r\nBiocManager::install(c(\"AnnotationHub\"), \n     repos='http://cran.us.r-project.org')\n```"
  },
  {
    "objectID": "notebook/genomic_ranges.html#save-annotations-as-rds",
    "href": "notebook/genomic_ranges.html#save-annotations-as-rds",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "1. Save Annotations as RDS",
    "text": "1. Save Annotations as RDS\nLet’s download the human reference genome and save the exon positions grouped by transcripts. For the purpose of the tutorial, we’ll limit the exons to chromosome 22.\n\nR\n```r\nsuppressMessages(library(AnnotationHub))\n\nah &lt;- AnnotationHub()\nensdb &lt;- query(ah, \"Ensembl 112 EnsDb for Homo sapiens\")[[1]]\nexons_by_tx &lt;- exonsBy(ensdb, \n    by = \"tx\", filter = SeqNameFilter(c(\"22\")), \n    columns= c(\"exon_id\", \"tx_name\", \"tx_id\", \"gene_name\", \"gene_id\"))\nsaveRDS(exons_by_tx, \"hg38_exons_by_tx.rds\")\n```"
  },
  {
    "objectID": "notebook/genomic_ranges.html#reading-rds-files-in-python",
    "href": "notebook/genomic_ranges.html#reading-rds-files-in-python",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "2. Reading RDS files in Python",
    "text": "2. Reading RDS files in Python\nThe rds2py Python package allows us to read RDS files and create equivalent Python representations of R objects. Key features include:\n\nParsing common R objects into Python equivalents (e.g., matrices to NumPy arrays, data frames to Pandas DataFrames).\nAbility to read S4 classes, enabling direct parsing of Bioconductor data types from R to Python.\n\nReading an RDS file with rds2py involves two steps:\n\nParse the RDS file into a Python dictionary containing data, its attributes, and associated metadata.\nConvert this dictionary into a suitable Python object using specific parser functions.\n\nThis process allows a seamless transition between R and Python for bioinformatics analyses.\n\nfrom rds2py import read_rds\nhg38_robject = read_rds(\"./hg38_exons_by_tx.rds\")\n\nfrom rds2py.granges import as_granges_list\nby_tx = as_granges_list(hg38_robject)\n\nprint(\"Exons by transcript:\")\nprint(by_tx)\n\nExons by transcript:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 9 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n[1]    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\n[2]    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n[3]    chr22 44725244 - 44725293               + | ENSE00003568825 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         4\n[4]    chr22 44726577 - 44726635               + | ENSE00003465556 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         5\n[5]    chr22 44731730 - 44731822               + | ENSE00003642381 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         6\n[6]    chr22 44732251 - 44732392               + | ENSE00003658491 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         7\n[7]    chr22 44735027 - 44735163               + | ENSE00003692865 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         8\n[8]    chr22 44736772 - 44737681               + | ENSE00001846334 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         9\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 10 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n[1]    chr22 50603626 - 50603720               + | ENSE00003768317 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         2\n[2]    chr22 50603841 - 50605065               + | ENSE00003772801 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         3\n[3]    chr22 50605368 - 50605444               + | ENSE00003773674 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         4\n[4]    chr22 50605562 - 50605735               + | ENSE00003765641 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         5\n[5]    chr22 50605825 - 50605935               + | ENSE00003763622 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         6\n[6]    chr22 50606658 - 50606766               + | ENSE00003773228 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         7\n[7]    chr22 50606921 - 50606992               + | ENSE00003769486 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         8\n[8]    chr22 50610212 - 50610311               + | ENSE00003772161 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         9\n[9]    chr22 50610707 - 50613982               + | ENSE00003731955 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735        10\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 2 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n[1]    chr22 20241415 - 20243111               - | ENSE00001557601 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         2\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 15 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 33919995 - 33920477               - |  LRG_856t1e1 LRG_856t2 LRG_856t2    LARGE1 LRG_856         1\n [1]    chr22 33761371 - 33761559               - |  LRG_856t1e3 LRG_856t2 LRG_856t2    LARGE1 LRG_856         2\n [2]    chr22 33650367 - 33650669               - |  LRG_856t1e4 LRG_856t2 LRG_856t2    LARGE1 LRG_856         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[12]    chr22 33283202 - 33283349               - | LRG_856t1e14 LRG_856t2 LRG_856t2    LARGE1 LRG_856        13\n[13]    chr22 33277060 - 33277256               - | LRG_856t1e15 LRG_856t2 LRG_856t2    LARGE1 LRG_856        14\n[14]    chr22 33272509 - 33274625               - | LRG_856t1e16 LRG_856t2 LRG_856t2    LARGE1 LRG_856        15\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 7 ranges and 6 metadata columns\n    seqnames              ranges          strand      exon_id  tx_name    tx_id gene_name gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;       &lt;list&gt;   &lt;list&gt;   &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n[0]    chr22 37244114 - 37244266               - | LRG_97t1e1 LRG_97t1 LRG_97t1      RAC2  LRG_97         1\n[1]    chr22 37241587 - 37241659               - | LRG_97t1e2 LRG_97t1 LRG_97t1      RAC2  LRG_97         2\n[2]    chr22 37232801 - 37232919               - | LRG_97t1e3 LRG_97t1 LRG_97t1      RAC2  LRG_97         3\n[3]    chr22 37231932 - 37231995               - | LRG_97t1e4 LRG_97t1 LRG_97t1      RAC2  LRG_97         4\n[4]    chr22 37231231 - 37231391               - | LRG_97t1e5 LRG_97t1 LRG_97t1      RAC2  LRG_97         5\n[5]    chr22 37226671 - 37226804               - | LRG_97t1e6 LRG_97t1 LRG_97t1      RAC2  LRG_97         6\n[6]    chr22 37225270 - 37226040               - | LRG_97t1e7 LRG_97t1 LRG_97t1      RAC2  LRG_97         7\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 21 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 20982297 - 20982572               + |  LRG_989t1e1 LRG_989t1 LRG_989t1     LZTR1 LRG_989         1\n [1]    chr22 20983027 - 20983090               + |  LRG_989t1e2 LRG_989t1 LRG_989t1     LZTR1 LRG_989         2\n [2]    chr22 20985841 - 20985898               + |  LRG_989t1e3 LRG_989t1 LRG_989t1     LZTR1 LRG_989         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[18]    chr22 20996696 - 20996802               + | LRG_989t1e19 LRG_989t1 LRG_989t1     LZTR1 LRG_989        19\n[19]    chr22 20996886 - 20996967               + | LRG_989t1e20 LRG_989t1 LRG_989t1     LZTR1 LRG_989        20\n[20]    chr22 20997232 - 20999033               + | LRG_989t1e21 LRG_989t1 LRG_989t1     LZTR1 LRG_989        21\n------\nseqinfo(1 sequences): chr22"
  },
  {
    "objectID": "notebook/genomic_ranges.html#basic-genomic-operations",
    "href": "notebook/genomic_ranges.html#basic-genomic-operations",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "2. Basic Genomic Operations",
    "text": "2. Basic Genomic Operations\nNow, let’s perform some basic operations like finding Transcription Start Sites (TSS) and promoter regions. These operations are fundamental in genomic analysis as they help us identify key regulatory regions of the genome.\n\n2.1 Create a GenomicRangesList by gene\nTo identify TSS or define promoter regions, let’s first reprocess the input to create a GenomicRangesList by gene symbols.\nTo achieve this, we unlist the GenomicRangesList object. This is accomplished in Python using the as_genomic_ranges() method.\n\nall_ranges = by_tx.as_genomic_ranges()\n\nThen we split the object using the gene_name metadata column in mcols().\nWe provide accessors to get or set attributes of the class. Most folks in Python may be familiar with direct access to class members (via properties or @property), but this should generally be avoided, as it is too easy to perform modifications via one-liners with the class.property on the left-hand side of an assignment.\n\nFor more information, please refer to our [developer guide](https://github.com/BiocPy/developer_guide).\nWhile gene IDs are unique, gene symbols are not. In addition, this list has genes with no symbols.\n\nby_gene = all_ranges.split(\n    groups=all_ranges.get_mcols().get_column(\"gene_name\")\n)\n\nprint(\"Exons by gene:\")\nprint(by_gene)\n\nExons by gene:\nGenomicRangesList with 932 ranges and 0 metadata columns\n \nName:  \nGenomicRanges with 1846 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000255890    chr22 23402361 - 23402568               - | ENSE00001754779 ENST00000255890 ENST00000255890           ENSG00000290920         1\nENST00000255890    chr22 23402037 - 23402156               - | ENSE00001700441 ENST00000255890 ENST00000255890           ENSG00000290920         2\nENST00000255890    chr22 23401841 - 23401954               - | ENSE00004028898 ENST00000255890 ENST00000255890           ENSG00000290920         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\nENST00000706202    chr22 21008247 - 21009450               - | ENSE00003995059 ENST00000706202 ENST00000706202           ENSG00000291240         7\nENST00000714325    chr22 18939446 - 18947693               + | ENSE00003802171 ENST00000714325 ENST00000714325           ENSG00000284294         1\nENST00000715281    chr22 35838583 - 35838658               - | ENSE00004026430 ENST00000715281 ENST00000715281           ENSG00000293594         1\n------\nseqinfo(1 sequences): chr22\n \nName: 5_8S_rRNA \nGenomicRanges with 1 range and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000612732    chr22 11249809 - 11249960               - | ENSE00003735240 ENST00000612732 ENST00000612732 5_8S_rRNA ENSG00000276871         1\n------\nseqinfo(1 sequences): chr22\n \nName: A4GALT \nGenomicRanges with 20 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000249005    chr22 42695491 - 42695634               - | ENSE00001109573 ENST00000249005 ENST00000249005    A4GALT ENSG00000128274         1\nENST00000249005    chr22 42692122 - 42693998               - | ENSE00000880583 ENST00000249005 ENST00000249005    A4GALT ENSG00000128274         2\nENST00000381278    chr22 42720797 - 42720820               - | ENSE00003818792 ENST00000381278 ENST00000381278    A4GALT ENSG00000128274         1\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n      LRG_795t1    chr22 42720797 - 42720871               - |     LRG_795t1e1       LRG_795t1       LRG_795t1    A4GALT         LRG_795         1\n      LRG_795t1    chr22 42695491 - 42695632               - |     LRG_795t1e2       LRG_795t1       LRG_795t1    A4GALT         LRG_795         2\n      LRG_795t1    chr22 42692121 - 42693998               - |     LRG_795t1e3       LRG_795t1       LRG_795t1    A4GALT         LRG_795         3\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 26 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000402174    chr22 28917389 - 28917482               + | ENSE00001552635 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         1\nENST00000402174    chr22 28987076 - 28987202               + | ENSE00003547707 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         2\nENST00000402174    chr22 29042495 - 29042570               + | ENSE00001329477 ENST00000402174 ENST00000402174     ZNRF3 ENSG00000183579         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\nENST00000544604    chr22 29048389 - 29048492               + | ENSE00001325812 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         7\nENST00000544604    chr22 29049197 - 29050949               + | ENSE00001308098 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         8\nENST00000544604    chr22 29053579 - 29057489               + | ENSE00001427475 ENST00000544604 ENST00000544604     ZNRF3 ENSG00000183579         9\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3 \nGenomicRanges with 3 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000325660    chr22 29031391 - 29031477               - | ENSE00001718965 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         1\nENST00000325660    chr22 29031084 - 29031157               - | ENSE00001643791 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         2\nENST00000325660    chr22 29024999 - 29027010               - | ENSE00001267818 ENST00000325660 ENST00000325660 ZNRF3-AS1 ENSG00000177993         3\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3-AS1 \nGenomicRanges with 2 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000412798    chr22 28992721 - 28992938               + | ENSE00001659048 ENST00000412798 ENST00000412798 ZNRF3-IT1 ENSG00000235786         1\nENST00000412798    chr22 29018164 - 29018621               + | ENSE00001595182 ENST00000412798 ENST00000412798 ZNRF3-IT1 ENSG00000235786         2\n------\nseqinfo(1 sequences): chr22\n \n\n\n\n\n\n2.2 Finding Transcription Start Sites (TSS)\nTranscription Start Sites (TSS) are the locations where transcription of a gene begins. Identifying TSS is crucial for understanding gene regulation, as many regulatory elements are located near the TSS.\nLet’s use the range() method to get the full extent of each gene.\n\nranges_by_gene = by_gene.range()\n\nprint(\"Gene ranges:\")\nprint(ranges_by_gene)\n\nGene ranges:\nGenomicRangesList with 932 ranges and 0 metadata columns\n \nName:  \nGenomicRanges with 2 ranges and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 11066418 - 50674175               +\n[1]    chr22 15282557 - 50755435               -\n------\nseqinfo(1 sequences): chr22\n \nName: 5_8S_rRNA \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 11249809 - 11249960               -\n------\nseqinfo(1 sequences): chr22\n \nName: A4GALT \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 42692121 - 42721299               -\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 28883572 - 29057489               +\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 29024999 - 29031477               -\n------\nseqinfo(1 sequences): chr22\n \nName: ZNRF3-AS1 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n \n\n\n\nWe convert the list to a GenomicRanges object.\n\ngr_by_gene = ranges_by_gene.as_genomic_ranges()\n\nprint(\"as GenomicRanges:\")\nprint(gr_by_gene)\n\nas GenomicRanges:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11066418 - 50674175               +\n             chr22 15282557 - 50755435               -\n5_8S_rRNA    chr22 11249809 - 11249960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\nThen we resize to a width of 1 base pair at the start of each range to pinpoint the TSS.\n\ntss = gr_by_gene.resize(width=1, fix=\"start\")\n\nprint(\"Transcript Start Sites:\")\nprint(gr_by_gene)\n\nTranscript Start Sites:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11066418 - 50674175               +\n             chr22 15282557 - 50755435               -\n5_8S_rRNA    chr22 11249809 - 11249960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n2.3 Defining Promoter Regions\nHere, we’re defining promoters as the region 2000 base pairs upstream to 200 base pairs downstream of each TSS. This definition can vary depending on the specific analysis, but this range often captures important regulatory elements.\n\npromoters = tss.promoters(upstream=2000, downstream=200)\n\nprint(\"Promoter Regions:\")\nprint(promoters)\n\nPromoter Regions:\nGenomicRanges with 936 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 11064418 - 11066618               +\n             chr22 50755235 - 50757435               -\n5_8S_rRNA    chr22 11249760 - 11251960               -\n               ...                 ...             ...\n    ZNRF3    chr22 28881572 - 28883772               +\nZNRF3-AS1    chr22 29031277 - 29033477               -\nZNRF3-IT1    chr22 28990721 - 28992921               +\n------\nseqinfo(1 sequences): chr22\n\n\nPlease be aware that because gene symbols may not be unique, this `GenomicRanges` object might contain duplicates. You might want to resolve duplicate symbols by making the symbols unique. We will leave this as an exercise for the reader."
  },
  {
    "objectID": "notebook/genomic_ranges.html#overlap-analysis",
    "href": "notebook/genomic_ranges.html#overlap-analysis",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "3. Overlap Analysis",
    "text": "3. Overlap Analysis\nA common task in genomic analysis is finding overlaps between different genomic features. This helps us understand the relationships between various elements in the genome and can provide insights into gene regulation and function.\n\n3.1 Reading ChIP-seq Peaks\nChIP-seq (Chromatin Immunoprecipitation followed by sequencing) is a method used to identify binding sites of DNA-associated proteins. The peaks represent regions where a protein of interest is likely bound to the DNA. We’re focusing on chromosome 22 for this example to keep the dataset manageable.\nFor the purpose of this tutorial, let’s download a bed file containing peaks from a ChIP-seq experiment on “Human B cells” to identify “EZH2” binding sites (from ENCODE) and cataloged in bedbase.org.\n\nfrom geniml.bbclient import BBClient\n\nbbclient = BBClient(cache_folder=\"cache\", bedbase_api=\"https://api.bedbase.org\")\nbedfile_id = \"be4054acf6e3feeb4dc490e6430e358e\" \nbedfile = bbclient.load_bed(bedfile_id)\npeaks = bedfile.to_granges()\n\nfilter_chr22 = [x == \"chr22\" for x in peaks.get_seqnames()]\npeaks_chr22 = peaks[filter_chr22]\n\nprint(peaks_chr22)\n\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1438]    chr22 27212058 - 27212348               *\n[1439]    chr22 49201359 - 49201649               *\n[1440]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n3.2 Finding Overlaps with TSS\nHere, we’re identifying ChIP-seq peaks that overlap with TSS. This analysis can help us understand if the protein of interest tends to bind near the start of genes, which could suggest a role in transcription initiation.\n\noverlaps = peaks_chr22.find_overlaps(tss)\n\nprint(\"Peak indices that overlap with first 10 TSS:\")\nprint(overlaps[:10])\n\nPeak indices that overlap with first 10 TSS:\n[[], [], [], [55], [217], [], [], [], [], []]\n\n\n`find_overlaps` returns a `list` with the same length as TSS, indicating which indices from peaks overlap with each of the TSS. Ideally, we would want to return a `Hits` object similar to the Bioconductor implementation.\n\n**TODO: Future plans to convert this into a `Hits` object.**\nLet’s identify the peaks that overlap with TSS.\n\nimport itertools\n\nall_indices = list(set(itertools.chain.from_iterable(overlaps)))\npeaks_by_tss = peaks_chr22[all_indices]\nprint(peaks_by_tss)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nInstead, one can subset peaks that overlap with TSS using the subset_by_overlaps method:\n\npeaks_by_tss2 = peaks_chr22.subset_by_overlaps(tss)\nprint(peaks_by_tss2)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nAdditionally, in some cases, we may want to ignore strand information (ignore_strand=True) when finding overlaps.\n\npeaks_by_tss_ignoring_strand = peaks_chr22.subset_by_overlaps(tss, ignore_strand=True)\nprint(peaks_by_tss_ignoring_strand)\n\nGenomicRanges with 35 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 38467935 - 38468225               *\n [2]    chr22 24952664 - 24952954               *\n          ...                 ...             ...\n[32]    chr22 21032552 - 21032842               *\n[33]    chr22 50270553 - 50270843               *\n[34]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nThis yields the same results for this particular scenario, but may not if the 'peaks' contain strand information.\n\n\n3.3 Finding Overlaps with Promoters\nThis operation finds ChIP-seq peaks that overlap with our defined promoter regions. If a significant number of peaks fall within promoters, it might suggest that the protein plays a role in gene regulation through promoter binding. This kind of analysis is often used to characterize the binding patterns of transcription factors or other regulatory proteins.\n\npeaks_by_promoters = peaks_chr22.subset_by_overlaps(promoters)\n\nprint(\"Peaks Overlapping with Promoters:\")\nprint(peaks_by_promoters)\n\nPeaks Overlapping with Promoters:\nGenomicRanges with 190 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19756445 - 19756735               *\n  [1]    chr22 37427967 - 37428257               *\n  [2]    chr22 22521942 - 22522232               *\n           ...                 ...             ...\n[187]    chr22 39993439 - 39993729               *\n[188]    chr22 22338004 - 22338294               *\n[189]    chr22 19131257 - 19131547               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n3.4 Finding Overlaps with Exons\nAnother analysis is to look at overlaps with all exons. This can help identify potential roles of the ChIP-seq peaks in splicing. Let’s modify our analysis to look at all exons:\n\n# Combine all exons into a single GenomicRanges object\nall_exons = by_gene.as_granges()\n\n# Find peaks overlapping with any exon\npeaks_by_exons = peaks_chr22.subset_by_overlaps(all_exons)\n\nprint(\"Peaks overlapping with exons:\")\nprint(peaks_by_exons)\n\n# Calculate the percentage of peaks that overlap with exons\npercent_overlapping = (len(peaks_by_exons) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_overlapping:.2f}%\")\n\nPeaks overlapping with exons:\nGenomicRanges with 279 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 29307104 - 29307394               *\n           ...                 ...             ...\n[276]    chr22 16969920 - 16970210               *\n[277]    chr22 35552420 - 35552710               *\n[278]    chr22 37931897 - 37932187               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\n\n\nThis analysis can provide insights into whether the protein of interest (captured by the ChIP-seq: “EZH2”) tends to bind within gene bodies, potentially influencing gene expression, splicing, or other co-transcriptional processes."
  },
  {
    "objectID": "notebook/genomic_ranges.html#advanced-operations",
    "href": "notebook/genomic_ranges.html#advanced-operations",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "4. Advanced Operations",
    "text": "4. Advanced Operations\nLet’s explore some more complex operations that are often used in genomic analyses.\n\n4.1 Comparing Exonic vs. Intronic Binding\nLet’s first identify intron regions. We will use the by_gene object we created that contains a GenomicRangesList split by gene.\n\n# Create intronic regions (regions within genes but not in exons)\ngene_ranges = by_gene.range().as_genomic_ranges()  # Get the full extent of each gene\nintrons = gene_ranges.subtract(all_exons).as_granges()\n\nprint(\"Intron regions:\")\nprint(introns)\n\nIntron regions:\nGenomicRanges with 1572 ranges and 0 metadata columns\n          seqnames              ranges          strand\n             &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n             chr22 15282557 - 15550904               -\n             chr22 15552888 - 15553211               -\n             chr22 15553587 - 15553691               -\n               ...                 ...             ...\n    ZNRF3    chr22 28883572 - 29057489               +\nZNRF3-AS1    chr22 29024999 - 29031477               -\nZNRF3-IT1    chr22 28992721 - 29018621               +\n------\nseqinfo(1 sequences): chr22\n\n\nTo gain further insight, we can compare the proportion of peaks overlapping with exons to those overlapping with introns:\n\n# Find peaks overlapping with introns\npeaks_by_introns = peaks_chr22.subset_by_overlaps(introns)\n\nprint(\"Peaks overlapping with introns:\")\nprint(peaks_by_introns)\n\n# Calculate percentages\npercent_exonic = (len(peaks_by_exons) / len(peaks_chr22)) * 100\npercent_intronic = (len(peaks_by_introns) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_exonic:.2f}%\")\nprint(f\"Percentage of peaks overlapping with introns: {percent_intronic:.2f}%\")\n\nPeaks overlapping with introns:\nGenomicRanges with 1438 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1435]    chr22 27212058 - 27212348               *\n[1436]    chr22 49201359 - 49201649               *\n[1437]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\nPercentage of peaks overlapping with introns: 99.79%\n\n\nThese percentages add up to over 100% because some peaks overlap both introns and exons, depending on how wide the peaks are. Ideally, you may want to filter the peaks based on preference as you annotate them with TSS, promoters, etc.\nThis comparison can help determine if the protein of interest shows a preference for binding in exonic or intronic regions, which could suggest different functional roles (e.g., splicing regulation for exonic binding vs. potential enhancer activity for intronic binding).\n\n\n4.2 Finding Overlaps with the first exon\n- This analysis is performed by transcript.\n- The rationale for this analysis may vary, but we are mostly showcasing complex genomic operations that are possible with the package.\nLet’s first put together a GenomicRanges object containing the first exon for each transcript.\n\nall_first = []\nfor txid, grl in by_tx:\n    strand = grl.get_strand(as_type = \"list\")[0]\n    if strand == \"-\":\n        all_first.append(grl.sort()[-1])\n    else:\n        all_first.append(grl.sort()[0])\n\nThen we combine all the individual genomic elements. The biocutils package provides utilities for convenient aspects of R that aren’t provided by base Python and generics. One of these generics is the 'combine' operation that merges or concatenates various Bioconductor classes.\n\nfrom biocutils import combine_sequences\nfirst_exons = combine_sequences(*all_first)\n\nWe can now subset peaks that overlap with the first exon\n\npeaks_with_first_exons = peaks_chr22.subset_by_overlaps(first_exons)\nprint(peaks_with_first_exons)\n\nGenomicRanges with 153 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 17369888 - 17370178               *\n  [1]    chr22 19756445 - 19756735               *\n  [2]    chr22 45975507 - 45975797               *\n           ...                 ...             ...\n[150]    chr22 49500975 - 49501265               *\n[151]    chr22 19131257 - 19131547               *\n[152]    chr22 29307104 - 29307394               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n4.3 Resizing and Shifting Peaks\n\nnarrow_peaks = peaks_chr22.narrow(start=10, width=100)\nshifted_peaks = narrow_peaks.shift(10)\n\nprint(\"Narrowed and Shifted Peaks:\")\nprint(shifted_peaks)\n\nNarrowed and Shifted Peaks:\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766807 - 19766907               *\n   [1]    chr22 17369907 - 17370007               *\n   [2]    chr22 19756464 - 19756564               *\n            ...                 ...             ...\n[1438]    chr22 27212077 - 27212177               *\n[1439]    chr22 49201378 - 49201478               *\n[1440]    chr22 49663381 - 49663481               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nResizing and shifting genomic ranges can be useful in various contexts. For example:\n\nNarrowing peaks might help focus on the center of ChIP-seq binding sites.\nShifting ranges can be used to look at regions adjacent to your features of interest. e.g. defining the predicted CRISPR cleavage site based on the position of the CRISPR gRNA sequence.\n\nThese operations demonstrate the flexibility of genomic range manipulations, which can be useful for fine-tuning analyses or testing hypotheses about the spatial relationships between genomic features."
  },
  {
    "objectID": "notebook/genomic_ranges.html#exercises",
    "href": "notebook/genomic_ranges.html#exercises",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "5. Exercises",
    "text": "5. Exercises\n\nCalculate the average width of the ChIP-seq peaks on chromosome 22.\nDetermine how many peaks overlap with CpG islands.\nCompute the percentage of promoter regions that have at least one overlapping ChIP-seq peak."
  },
  {
    "objectID": "notebook/genomic_ranges.html#conclusion",
    "href": "notebook/genomic_ranges.html#conclusion",
    "title": "Tutorial 1: GenomicRanges and range-based analyses",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we’ve explored how to use BiocPy’s genomic ranges functionality to perform various genomic analyses. These tools and techniques provide a powerful way to work with genomic interval data in Python, mirroring the capabilities from Bioconductor. They form the foundation for many more complex genomic analyses and can be applied to a wide range of biological questions.\nRefer to the [BiocPy documentation](https://biocpy.github.io/) for more detailed information on these packages and their functionalities."
  }
]