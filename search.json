[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "Welcome to our workshop on exploring the data structures and methods available in BiocPy, a project that aims to facilitate Bioconductor workflows in Python.\nIn this workshop, we will focus on interoperability between R and Python, covering two main topics:\n\nPerform range-based analyses using GenomicRanges.\nAnnotate cell types in single-cell RNA-seq data stored as SingleCellExperiment object.\n\nAttendees will learn how to represent and manipulate their datasets in Python in the same manner as in R/Bioconductor. All packages in BiocPy are published to PyPI, and the code is open-source on GitHub.\n\n\n\n\n\nJayaram Kancherla\nAaron Lun\n\nWe are looking for more contributions from the community to improve our packages! If you are interested, please check out the issues or discussion in our GitHub organization.\n\n\n\n\nA more detailed tutorial on BiocPy representations is available here.\nCheck out all the package in the BiocPy ecosystem on GitHub.\n\n\n\n\nThis is a reproducible Quarto book with reusable snippets. Check out the session information for versions of installed packages.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "Welcome to our workshop on exploring the data structures and methods available in BiocPy, a project that aims to facilitate Bioconductor workflows in Python.\nIn this workshop, we will focus on interoperability between R and Python, covering two main topics:\n\nPerform range-based analyses using GenomicRanges.\nAnnotate cell types in single-cell RNA-seq data stored as SingleCellExperiment object.\n\nAttendees will learn how to represent and manipulate their datasets in Python in the same manner as in R/Bioconductor. All packages in BiocPy are published to PyPI, and the code is open-source on GitHub.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#core-contributors",
    "href": "index.html#core-contributors",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "Jayaram Kancherla\nAaron Lun\n\nWe are looking for more contributions from the community to improve our packages! If you are interested, please check out the issues or discussion in our GitHub organization.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#other-resources",
    "href": "index.html#other-resources",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "A more detailed tutorial on BiocPy representations is available here.\nCheck out all the package in the BiocPy ecosystem on GitHub.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "index.html#developer-notes",
    "href": "index.html#developer-notes",
    "title": "Interoperability between R and Python using BiocPy",
    "section": "",
    "text": "This is a reproducible Quarto book with reusable snippets. Check out the session information for versions of installed packages.",
    "crumbs": [
      "Interoperability between R and Python using BiocPy"
    ]
  },
  {
    "objectID": "notebook/annotate_cell_types.html",
    "href": "notebook/annotate_cell_types.html",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "",
    "text": "Welcome to this tutorial on annotating single-cell datasets with reference collections. The scRNAseq (R/Bioc, Python) package provides access to public single-cell RNA-seq datasets for use by other Bioconductor/BiocPy packages and workflows. These datasets are stored in language-agnostic representations described in ArtifactDB, enabling easy access to datasets and analysis results across multiple programming languages such as R and Python. We will showcase how to integrate and process single-cell datasets across languages, such as R and Python, and how to annotate cell types using reference datasets."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#outline",
    "href": "notebook/annotate_cell_types.html#outline",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Outline",
    "text": "Outline\nIn this tutorial, we’ll walk through how to:\n\nExplore the scrnaseq package and access public single-cell RNA-seq datasets.\nPerform basic operations on SingleCellExperiment objects, the core data structure for single-cell data.\nAnnotate cell types using reference datasets from the celldex package."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#prerequisites",
    "href": "notebook/annotate_cell_types.html#prerequisites",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here.\n\nInstall the Python packages using pip:\npip install scrnaseq celldex singler\nInstall the R packages using BiocManager:\nBiocManager::install(c(\"scRNAseq\", \"celldex\", \"SingleR\"), \n     repos='http://cran.us.r-project.org')"
  },
  {
    "objectID": "notebook/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "href": "notebook/annotate_cell_types.html#accessing-and-exploring-single-cell-datasets",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "1. Accessing and exploring single-cell datasets",
    "text": "1. Accessing and exploring single-cell datasets\nLet’s explore the scrnaseq package and learn how to access public single-cell RNA-seq datasets. Datasets published to the scrnaseq package are decorated with metadata such as the study title, species, number of cells, etc., to facilitate discovery. Let’s see how we can list and search for datasets.\n\n1.1 List all datasets\nThe list_datasets() function in Python or surveyDatasets() in R will display all available datasets published to the scRNAseq collection along with their metadata. To list all available datasets in the scrnaseq package and displays their names, titles, and versions:\n\nimport scrnaseq\ndatasets = scrnaseq.list_datasets()\ndatasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\naztekin-tail-2019\nIdentification of a regeneration-organizing ce...\n2023-12-14\n\n\n1\nsplicing-demonstration-2020\n[reprocessed, subset] The Mammalian Spermatoge...\n2023-12-20\n\n\n2\nmarques-brain-2016\nOligodendrocyte heterogeneity in the mouse juv...\n2023-12-19\n\n\n\n\n\n\n\n\nR\nsuppressMessages(library(scRNAseq))\nall_ds &lt;- surveyDatasets()\nhead(all_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n\n1.2 Search for datasets\nYou can also search for datasets based on metadata using search_datasets() in Python or searchDatasets() in R. This supports both simple text queries and complex boolean expressions.\nLet’s search for datasets containing the term “pancreas” and displays their names, titles, and versions.\n\nimport scrnaseq\n\npancreas_datasets = scrnaseq.search_datasets(\"pancreas\")\npancreas_datasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\nmuraro-pancreas-2016\nA Single-Cell Transcriptome Atlas of the Human...\n2023-12-19\n\n\n2\nbaron-pancreas-2016\nA Single-Cell Transcriptomic Map of the Human ...\n2023-12-14\n\n\n\n\n\n\n\n\nR\npancreas_ds &lt;- searchDatasets(\"pancreas\")\nhead(pancreas_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n1.2.1 Advanced searches\nFor more complex searches involving boolean operations, use define_text_query() in Python or defineTextQuery() in R. Here’s an example to find datasets using the mouse reference genome (GRCm38) and containing the words neuro or pancrea.\nCheck out the reference manual for more details and usage of these functions.\n\nfrom gypsum_client import define_text_query\nimport scrnaseq\n\nres = scrnaseq.search_datasets(\n     define_text_query(\"GRCm38\", field=\"genome\")\n     & (\n          define_text_query(\"neuro%\", partial=True)\n          | define_text_query(\"pancrea%\", partial=True)\n     )\n)\nres[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\ncampbell-brain-2017\nA molecular census of arcuate hypothalamus and...\n2023-12-14\n\n\n2\nhu-cortex-2017\nDissecting cell-type composition and activity-...\n2023-12-20\n\n\n\n\n\n\n\n\n\nR\nsuppressWarnings(library(gypsum))\nres &lt;- searchDatasets(\n    defineTextQuery(\"GRCm38\", field=\"genome\") &\n    (defineTextQuery(\"neuro%\", partial=TRUE) | \n     defineTextQuery(\"pancrea%\", partial=TRUE))\n)\nhead(res[,c(\"name\", \"title\", \"version\")], 3)\nThis performs a complex search to find datasets tagged as “mouse” in the reference genome field and containing the keywords “neuro” or “pancrea”.\nOnce a dataset is identified, always list the name and version of the dataset in your scripts for reproducibility."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#download-dataset",
    "href": "notebook/annotate_cell_types.html#download-dataset",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "2. Download dataset",
    "text": "2. Download dataset\nAfter identifying a dataset of interest, use fetch_dataset() in Python or fetchDataset() in R to download the dataset. This will load the dataset as a SingleCellExperiment object.\nR/Bioconductor users might already be familiar with the [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) class. BiocPy also provides similar implementation in the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) package.\nFor this tutorial, let’s download the zeisel-brain dataset:\n\nimport scrnaseq\nsce = scrnaseq.fetch_dataset(\"zeisel-brain-2015\", \"2023-12-14\")\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\n\nR\nsce &lt;- fetchDataset(\"zeisel-brain-2015\", \"2023-12-14\")\nsce\n\n\n2.1 Side-quest on SingleCellExperiment in Python\nThe Python implementation of the SingleCellExperiment class adheres to Bioconductor’s specification and offers similar interface and methods. Our goal is to make it simple for analysts to switch between R and Python.\nFor more details on the design, refer to the [BiocPy developer guide](https://github.com/BiocPy/developer_guide) or the [singlecellexperiment](https://github.com/BiocPy/SingleCellExperiment) documentation.\nThis Python code demonstrates basic operations on a SingleCellExperiment object, including retrieving assay names, column names, column metadata, accessing counts, and coercing to an AnnData object for interoperability with existing analysis ready eco-systems in Python.\nTo display assays names from the object:\n\nprint(\"Assays names: \", sce.get_assay_names()) # or sce.assay_names\n\nAssays names:  ['counts']\n\n\nTo access cell barcodes or ids:\n\nprint(\"Cell barcodes (first 10): \", sce.get_column_names()[:10]) # or sce.column_names\n\nCell barcodes (first 10):  ['1772071015_C02', '1772071017_G12', '1772071017_A05', '1772071014_B06', '1772067065_H06', '1772071017_E02', '1772067065_B07', '1772067060_B09', '1772071014_E04', '1772071015_D04']\n\n\nTo access all cell annotations:\n\nprint(\"Column metadata: \", sce.get_column_data()) # or sce.column_data\n\nColumn metadata:  BiocFrame with 3005 rows and 9 columns\n                       tissue            group #     total mRNA mol               well                sex                age           diameter\n                 &lt;StringList&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt;\n1772071015_C02       sscortex                1.0            21580.0               11.0                1.0               21.0                0.0\n1772071017_G12       sscortex                1.0            21748.0               95.0               -1.0               20.0               9.56\n1772071017_A05       sscortex                1.0            31642.0               33.0               -1.0               20.0               11.1\n                          ...                ...                ...                ...                ...                ...                ...\n1772063068_D01       sscortex                9.0             4015.0                4.0                1.0               26.0               8.63\n1772066098_A12 ca1hippocampus                9.0             2896.0               89.0               -1.0               26.0               9.23\n1772058148_F03       sscortex                9.0             4460.0               22.0                1.0               26.0               10.4\n                     level1class  level2class\n                    &lt;StringList&gt; &lt;StringList&gt;\n1772071015_C02      interneurons        Int10\n1772071017_G12      interneurons        Int10\n1772071017_A05      interneurons         Int6\n                             ...          ...\n1772063068_D01 endothelial-mural         Vsmc\n1772066098_A12 endothelial-mural         Vsmc\n1772058148_F03 endothelial-mural         Vsmc\n\n\nTo access an assay matrix:\n\nprint(\"Counts matrix: \", sce.assays[\"counts\"]) # or # sce.assay(\"counts\")\n\nCounts matrix:  &lt;20006 x 3005&gt; sparse ReloadedArray object of type 'uint16'\n[[  0,   0,   0, ...,   0,   0,   1],\n [  3,   1,   0, ...,   0,   0,   1],\n [  3,   1,   6, ...,   0,   0,   0],\n ...,\n [158, 326, 209, ..., 193,  36, 359],\n [ 31,  88,  97, ...,  50,  12,  52],\n [ 13,  14,   9, ...,  18,   3,  13]]\n\n\nThe package uses delayed arrays (similar to the R/Bioconductor’s DelayedArray), to load file-backed arrays and matrices. This reduces memory usage when loading large datasets. Methods are available to coerce delayed arrays to sparse matrix representations from the scipy package:\n\nfrom delayedarray import to_scipy_sparse_matrix\nprint(\"counts as csr: \")\nprint(repr(to_scipy_sparse_matrix(sce.assays[\"counts\"], \"csc\")))\n\ncounts as csr: \n&lt;20006x3005 sparse matrix of type '&lt;class 'numpy.uint16'&gt;'\n    with 11349080 stored elements in Compressed Sparse Column format&gt;\n\n\nTo simplify this, we provide the realize_assays option to load matrices fully into memory when fetching the dataset.\n\nsce = scrnaseq.fetch_dataset(\n    \"zeisel-brain-2015\", \"2023-12-14\", \n    realize_assays=True)\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\nIn addition, we provide coercions from SingleCellExperiment class to take advantage of methods in the Python ecosystem, e.g. scverse and AnnData.\n\nprint(\"coerce to AnnData: \", sce.to_anndata())\n\ncoerce to AnnData:  (AnnData object with n_obs × n_vars = 3005 × 20006\n    obs: 'tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class', 'rownames'\n    var: 'featureType', 'rownames'\n    layers: 'counts', None)"
  },
  {
    "objectID": "notebook/annotate_cell_types.html#annotate-cell-types",
    "href": "notebook/annotate_cell_types.html#annotate-cell-types",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "3. Annotate cell types",
    "text": "3. Annotate cell types\nWe can now annotate cell types by using reference datasets and matching cells based on their expression profiles. In this tutorial, we will use SingleR in R or its Python equivalent singler.\nBefore running the singler algorithm, we need to download an appropriate reference dataset from the celldex package.\n\n3.1 Access reference datasets from celldex\nSimilar to the scRNAseq package, the celldex package provides access to the collection of reference expression datasets with curated cell type labels, for use in procedures like automated annotation of single-cell data or deconvolution of bulk RNA-seq to reference datasets. These datasets are also stored in language-agnostic representations for use in downstream analyses.\nFor this tutorial, let’s download the Mouse RNA-seq reference from celldex using fetch_reference() in Python or fetchReference() in R. This reference consists of a collection of mouse bulk RNA-seq data sets downloaded from the gene expression omnibus (Benayoun et al. 2019). A variety of cell types are available, again mostly from blood but also covering several other tissues.\n\nimport celldex\n\nmouse_rnaseq_ref = celldex.fetch_reference(\n    \"mouse_rnaseq\", \"2024-02-26\", \n    realize_assays=True)\nprint(mouse_rnaseq_ref)\n\nclass: SummarizedExperiment\ndimensions: (21214, 358)\nassays(1): ['logcounts']\nrow_data columns(0): []\nrow_names(21214): ['Xkr4', 'Rp1', 'Sox17', ..., 'MGC107098', 'LOC100039574', 'LOC100039753']\ncolumn_data columns(3): ['label.main', 'label.fine', 'label.ont']\ncolumn_names(358): ['ERR525589Aligned', 'ERR525592Aligned', 'SRR275532Aligned', ..., 'SRR1044042Aligned', 'SRR1044043Aligned', 'SRR1044044Aligned']\nmetadata(0): \n\n\n\n\nR\nsuppressWarnings(library(celldex))\nmouse_rnaseq_ref &lt;- fetchReference(\"mouse_rnaseq\", \"2024-02-26\", realize.assays=TRUE)\nmouse_rnaseq_ref\nNow, let’s annotate cells from the zeisel-brain dataset using the mouse_rnaseq reference dataset.\n\nimport singler\n\nmatches = singler.annotate_single(\n    test_data=sce, \n    ref_data = mouse_rnaseq_ref,\n    ref_labels = \"label.main\"\n)\n\nimport pandas as pd\n\npd.Series(matches[\"best\"]).value_counts()\n\n/Users/kancherj/miniforge3/envs/bioc2024/lib/python3.10/site-packages/biocframe/BiocFrame.py:591: UserWarning: Setting property 'metadata' is an in-place operation, use 'set_metadata' instead\n  warn(\n\n\nNeurons              1704\nOligodendrocytes      844\nAstrocytes            180\nEndothelial cells     177\nMacrophages            45\nEpithelial cells       20\nMicroglia              18\nFibroblasts            17\nName: count, dtype: int64\n\n\n\n\nR\nsuppressWarnings(library(SingleR))\ncell_labels &lt;- SingleR(test = assay(sce, \"counts\"), ref = mouse_rnaseq_ref, labels = mouse_rnaseq_ref$label.main)\n\ntable(cell_labels$labels)\nGive this is a brain dataset, the presence of neuron’s and other brain-related cell types makes sense."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "href": "notebook/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "4. Analyze single-cell RNA-seq datasets",
    "text": "4. Analyze single-cell RNA-seq datasets\n\n\n\nsingle-cell-methods\n\n\nAaron has implemented the single-cell methods from scran in C++. This allows us to reuse the same implementation in JS and develop applications for analyzing single-cell data (Kana), or in Python through the scranpy package.\nTo analyze the dataset using the default parameters:\n\nimport scranpy\n\nresults = scranpy.analyze_sce(sce)\n\n# results is a complex object, \n# let's explore the umap and tsne dimensions\nprint(results.tsne)\n\nTsneEmbedding(x=array([23.78283174, 23.20692407, 23.99748307, ..., 16.43261279,\n       12.91835402, 20.38262289]), y=array([-15.02586205, -15.00463774, -14.18924958, ...,  -1.56177656,\n         1.55240304,   3.51312435]))\n\n\n\n4.1 Want to know whats happening in the entire analysis\nRunning the analyze_sce() function uses the default parameters to run the single-cell workflow. If you want to customize or want to have fine-grained control on the analysis steps, set the parameter dry_run=True.\nThis prints out the exact series of steps the function runs under the hood to perform the analysis. You can then use this to customize the analysis to your specific dataset or use case.\n\nprint(scranpy.analyze_sce(sce, dry_run=True))\n\nimport scranpy\nimport numpy\n\nresults = AnalyzeResults()\nresults.rna_quality_control_metrics = scranpy.quality_control.per_cell_rna_qc_metrics(rna_matrix, options=update(options.per_cell_rna_qc_metrics_options, cell_names=options.miscellaneous_options.cell_names))\nresults.rna_quality_control_thresholds = scranpy.quality_control.suggest_rna_qc_filters(results.rna_quality_control_metrics, options=update(options.suggest_rna_qc_filters_options, block=options.miscellaneous_options.block))\nresults.rna_quality_control_filter = scranpy.quality_control.create_rna_qc_filter(results.rna_quality_control_metrics, results.rna_quality_control_thresholds, options=update(options.create_rna_qc_filter_options, block=options.miscellaneous_options.block))\ndiscard = numpy.zeros(rna_ptr.shape[1], dtype=bool)\ndiscard = numpy.logical_or(discard, results.rna_quality_control_filter)\nrna_filtered = scranpy.quality_control.filter_cells(rna_matrix, filter=discard)\nresults.quality_control_retained = numpy.logical_not(discard)\nfiltered_block = None\nraw_size_factors = results.rna_quality_control_metrics.column('sums')[results.quality_control_retained]\n(rna_normed, final_size_factors) = scranpy.normalization.log_norm_counts(rna_filtered, options=update(options.rna_log_norm_counts_options, size_factors=raw_size_factors, center_size_factors_options=update(options.rna_log_norm_counts_options.center_size_factors_options, block=filtered_block), with_size_factors=True))\nresults.rna_size_factors = final_size_factors\nresults.gene_variances = scranpy.feature_selection.model_gene_variances(rna_normed, options=update(options.model_gene_variances_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names))\nresults.hvgs = scranpy.feature_selection.choose_hvgs(results.gene_variances.column('residuals'), options=options.choose_hvgs_options)\nresults.rna_pca = scranpy.dimensionality_reduction.run_pca(rna_normed, options=update(options.rna_run_pca_options, subset=results.hvgs, block=filtered_block))\nlowdim = results.rna_pca.principal_components\n(get_tsne, get_umap, graph, remaining_threads) = scranpy.run_neighbor_suite(lowdim, build_neighbor_index_options=options.build_neighbor_index_options, find_nearest_neighbors_options=options.find_nearest_neighbors_options, run_umap_options=options.run_umap_options, run_tsne_options=options.run_tsne_options, build_snn_graph_options=options.build_snn_graph_options, num_threads=options.find_nearest_neighbors_options.num_threads)\nresults.snn_graph = graph\nresults.clusters = results.snn_graph.community_multilevel(resolution=options.miscellaneous_options.snn_graph_multilevel_resolution).membership\nresults.rna_markers = scranpy.marker_detection.score_markers(rna_normed, grouping=results.clusters, options=update(options.rna_score_markers_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names, num_threads=remaining_threads))\nresults.tsne = get_tsne()\nresults.umap = get_umap()\n\n\nUsers can also run individual steps from the analysis without having to perform the full analysis, e.g. compute log-normalized counts or find markers."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#visualize-results",
    "href": "notebook/annotate_cell_types.html#visualize-results",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "5. Visualize Results",
    "text": "5. Visualize Results\nI can’t have a tutorial without a section on visualization or figures.\nWe will use the seaborn and matplotlib packages in Python to create visualizations. We’ll plot the t-SNE embedding and color the cells by their cluster assignments.\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=results.clusters, palette=\"Paired\"\n)\n\n\n\n\n\n\n\n\nNow let’s color the embedding with the cell types we identified from celldex. We ran the singleR algorithm on the full datasets, but scranpy filtered a few cells during the QC step. Let’s identify which cells were kept.\n\nto_keep = [i for i,x in enumerate(results.rna_quality_control_filter) if x == False]\nfiltered_matches = [matches[\"best\"][i] for i in to_keep]\n\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=filtered_matches, palette=\"Paired\"\n)\n\n\n\n\n\n\n\n\nSimilarly also explore the UMAP embedding:\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.umap.x, y=results.umap.y, \n    hue=filtered_matches, palette=\"Paired\"\n)"
  },
  {
    "objectID": "notebook/annotate_cell_types.html#exercises",
    "href": "notebook/annotate_cell_types.html#exercises",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nShare or upload your datasets to scrna-seq package. Instructions to upload are available in their respective R/Bioc and Python packages.\nExplore top markers for each cluster identified by scranpy.\nSave your results and explore in Kana."
  },
  {
    "objectID": "notebook/annotate_cell_types.html#conclusion",
    "href": "notebook/annotate_cell_types.html#conclusion",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You have now completed the tutorial on accessing single-cell datasets using scRNAseq and ArtifactDB, and annotating cell types using reference datasets from celldex. For more detailed usage and advanced analyses, refer to the respective documentation of these packages."
  },
  {
    "objectID": "tutorials/sessioninfo.html",
    "href": "tutorials/sessioninfo.html",
    "title": "Session Info",
    "section": "",
    "text": "The code base for this repository is available at https://github.com/BiocPy/BiocWorkshop2024.",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html#python",
    "href": "tutorials/sessioninfo.html#python",
    "title": "Session Info",
    "section": "Python",
    "text": "Python\nThe Python version on the GitHub runner:\n\nimport sys\nprint(sys.version_info)\n\nsys.version_info(major=3, minor=11, micro=9, releaselevel='final', serial=0)",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/sessioninfo.html#packages",
    "href": "tutorials/sessioninfo.html#packages",
    "title": "Session Info",
    "section": "Packages",
    "text": "Packages\nVersions of packages installed during the build process:\n\nimport math\n\nimport genomicranges\nimport summarizedexperiment\nimport singlecellexperiment\nimport multiassayexperiment\nimport rds2py\nimport celldex\nimport scrnaseq\nimport session_info\n\n\nsession_info.show()\n\n\nClick to view session information\n-----\ncelldex                     0.1.1\ngenomicranges               0.4.28\nmultiassayexperiment        0.4.2\nrds2py                      0.4.4\nscrnaseq                    0.2.0\nsession_info                1.0.0\nsinglecellexperiment        0.4.6\nsummarizedexperiment        0.4.5\n-----\n\n\nClick to view modules imported as dependencies\nPIL                         10.4.0\nanndata                     0.10.8\nanyio                       NA\narrow                       1.3.0\nasciitree                   NA\nasttokens                   NA\nattr                        23.2.0\nattrs                       23.2.0\nbabel                       2.15.0\nbiocframe                   0.5.11\nbiocutils                   0.1.5\ncertifi                     2024.07.04\ncffi                        1.16.0\ncharset_normalizer          3.3.2\ncomm                        0.2.2\ncycler                      0.12.1\ncython_runtime              NA\ndateutil                    2.9.0.post0\ndebugpy                     1.8.2\ndecorator                   5.1.1\ndefusedxml                  0.7.1\ndelayedarray                0.5.1\ndolomite_base               0.2.4\nexecuting                   2.0.1\nfastjsonschema              NA\nfilelock                    3.15.4\nfqdn                        NA\ngypsum_client               0.1.3\nh5py                        3.11.0\nidna                        3.7\nipykernel                   6.29.5\niranges                     0.2.11\nisoduration                 NA\njedi                        0.19.1\njinja2                      3.1.4\njson5                       0.9.25\njsonpointer                 3.0.0\njsonschema                  4.23.0\njsonschema_specifications   NA\njupyter_events              0.10.0\njupyter_server              2.14.2\njupyterlab_server           2.27.3\nkiwisolver                  1.4.5\nmarkupsafe                  2.1.5\nmatplotlib                  3.9.1\nmatplotlib_inline           0.1.7\nmpl_toolkits                NA\nnatsort                     8.4.0\nnbformat                    5.10.4\nnumcodecs                   0.13.0\nnumpy                       1.26.4\noverrides                   NA\npackaging                   24.1\npandas                      2.2.2\nparso                       0.8.4\nplatformdirs                4.2.2\nprometheus_client           NA\nprompt_toolkit              3.0.47\npsutil                      6.0.0\npure_eval                   0.2.3\npyarrow                     17.0.0\npydev_ipython               NA\npydevconsole                NA\npydevd                      2.9.5\npydevd_file_utils           NA\npydevd_plugins              NA\npydevd_tracing              NA\npygments                    2.18.0\npyparsing                   3.1.2\npythonjsonlogger            NA\npytz                        2024.1\nreferencing                 NA\nrequests                    2.32.3\nrfc3339_validator           0.1.4\nrfc3986_validator           0.1.1\nrpds                        NA\nscipy                       1.12.0\nsend2trash                  NA\nsix                         1.16.0\nsniffio                     1.3.1\nstack_data                  0.6.3\ntorch                       2.3.1+cu121\ntorchgen                    NA\ntornado                     6.4.1\ntqdm                        4.66.4\ntraitlets                   5.14.3\ntyping_extensions           NA\nuri_template                NA\nurllib3                     2.2.2\nwcwidth                     0.2.13\nwebcolors                   24.6.0\nwebsocket                   1.8.0\nyaml                        6.0.1\nzarr                        2.18.2\nzmq                         26.0.3\n\n \n-----\nIPython             8.26.0\njupyter_client      8.6.2\njupyter_core        5.7.2\njupyterlab          4.2.4\nnotebook            7.2.1\n-----\nPython 3.11.9 (main, Jun 25 2024, 18:25:01) [GCC 11.4.0]\nLinux-6.5.0-1023-azure-x86_64-with-glibc2.35\n-----\nSession information updated at 2024-07-24 03:52",
    "crumbs": [
      "Session Info"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html",
    "href": "tutorials/annotate_cell_types.html",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "",
    "text": "Welcome to this tutorial on annotating single-cell datasets with reference collections. The scRNAseq (R/Bioc, Python) package provides access to public single-cell RNA-seq datasets for use by other Bioconductor/BiocPy packages and workflows. These datasets are stored in language-agnostic representations described in ArtifactDB, enabling easy access to datasets and analysis results across multiple programming languages such as R and Python. We will showcase how to integrate and process single-cell datasets across languages, such as R and Python, and how to annotate cell types using reference datasets.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#outline",
    "href": "tutorials/annotate_cell_types.html#outline",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Outline",
    "text": "Outline\nIn this tutorial, we’ll walk through how to:\n\nExplore the scrnaseq package and access public single-cell RNA-seq datasets.\nPerform basic operations on SingleCellExperiment objects, the core data structure for single-cell data.\nAnnotate cell types using reference datasets from the celldex package.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#prerequisites",
    "href": "tutorials/annotate_cell_types.html#prerequisites",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here.\n\nInstall the Python packages using pip:\n\nShell\n\n\npip install scrnaseq celldex singler\n\n\n\nInstall the R packages using BiocManager:\n\nR\n\n\nBiocManager::install(c(\"scRNAseq\", \"celldex\", \"SingleR\"), \n     repos='http://cran.us.r-project.org')",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#access-and-explore-single-cell-datasets",
    "href": "tutorials/annotate_cell_types.html#access-and-explore-single-cell-datasets",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "1. Access and explore single-cell datasets",
    "text": "1. Access and explore single-cell datasets\nLet’s explore the scrnaseq package and learn how to access public single-cell RNA-seq datasets. Datasets published to the scrnaseq package are decorated with metadata such as the study title, species, number of cells, etc., to facilitate discovery. Let’s see how we can list and search for datasets.\n\n1.1 List all datasets\nThe list_datasets() function in Python or surveyDatasets() in R will display all available datasets published to the scRNAseq collection along with their metadata. To list all available datasets in the scrnaseq package and displays their names, titles, and versions:\n\nPythonR\n\n\n\nimport scrnaseq\ndatasets = scrnaseq.list_datasets()\ndatasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\naztekin-tail-2019\nIdentification of a regeneration-organizing ce...\n2023-12-14\n\n\n1\nsplicing-demonstration-2020\n[reprocessed, subset] The Mammalian Spermatoge...\n2023-12-20\n\n\n2\nmarques-brain-2016\nOligodendrocyte heterogeneity in the mouse juv...\n2023-12-19\n\n\n\n\n\n\n\n\n\nsuppressMessages(library(scRNAseq))\nall_ds &lt;- surveyDatasets()\nhead(all_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n\n\n\n1.2 Search for datasets\nYou can also search for datasets based on metadata using search_datasets() in Python or searchDatasets() in R. This supports both simple text queries and complex boolean expressions.\nLet’s search for datasets containing the term “pancreas” and displays their names, titles, and versions.\n\nPythonR\n\n\n\nimport scrnaseq\n\npancreas_datasets = scrnaseq.search_datasets(\"pancreas\")\npancreas_datasets[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\nmuraro-pancreas-2016\nA Single-Cell Transcriptome Atlas of the Human...\n2023-12-19\n\n\n2\nbaron-pancreas-2016\nA Single-Cell Transcriptomic Map of the Human ...\n2023-12-14\n\n\n\n\n\n\n\n\n\npancreas_ds &lt;- searchDatasets(\"pancreas\")\nhead(pancreas_ds[, c(\"name\", \"title\", \"version\")], 3)\n\n\n\n\n1.2.1 Advanced searches\nFor more complex searches involving boolean operations, use define_text_query() in Python or defineTextQuery() in R. Here’s an example to find datasets using the mouse reference genome (GRCm38) and containing the words neuro or pancrea.\n\n\n\n\n\n\nTip\n\n\n\nCheck out the reference manual for more details and usage of these functions.\n\n\n\nPythonR\n\n\n\nfrom gypsum_client import define_text_query\nimport scrnaseq\n\nres = scrnaseq.search_datasets(\n     define_text_query(\"GRCm38\", field=\"genome\")\n     & (\n          define_text_query(\"neuro%\", partial=True)\n          | define_text_query(\"pancrea%\", partial=True)\n     )\n)\nres[[\"name\", \"title\", \"version\"]].head(3)\n\n\n\n\n\n\n\n\nname\ntitle\nversion\n\n\n\n\n0\ngrun-bone_marrow-2016\nDe Novo Prediction of Stem Cell Identity using...\n2023-12-14\n\n\n1\ncampbell-brain-2017\nA molecular census of arcuate hypothalamus and...\n2023-12-14\n\n\n2\nhu-cortex-2017\nDissecting cell-type composition and activity-...\n2023-12-20\n\n\n\n\n\n\n\n\n\nsuppressWarnings(library(gypsum))\nres &lt;- searchDatasets(\n    defineTextQuery(\"GRCm38\", field=\"genome\") &\n    (defineTextQuery(\"neuro%\", partial=TRUE) | \n     defineTextQuery(\"pancrea%\", partial=TRUE))\n)\nhead(res[,c(\"name\", \"title\", \"version\")], 3)\n\n\n\nThis performs a complex search to find datasets tagged as “mouse” in the reference genome field and containing the keywords “neuro” or “pancrea”.\n\n\n\n\n\n\nImportant\n\n\n\nOnce a dataset is identified, always list the name and version of the dataset in your scripts for reproducibility.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#download-dataset",
    "href": "tutorials/annotate_cell_types.html#download-dataset",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "2. Download dataset",
    "text": "2. Download dataset\nAfter identifying a dataset of interest, use fetch_dataset() in Python or fetchDataset() in R to download the dataset. This will load the dataset as a SingleCellExperiment object.\n\n\n\n\n\n\nNote\n\n\n\nR/Bioconductor users might already be familiar with the SingleCellExperiment class. BiocPy also provides similar implementation in the singlecellexperiment package.\n\n\nFor this tutorial, let’s download the zeisel-brain dataset:\n\nPythonR\n\n\n\nimport scrnaseq\nsce = scrnaseq.fetch_dataset(\"zeisel-brain-2015\", \"2023-12-14\")\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\n\n\nsce &lt;- fetchDataset(\"zeisel-brain-2015\", \"2023-12-14\")\nsce\n\n\n\n\n2.1 Side-quest on SingleCellExperiment in Python\nThe Python implementation of the SingleCellExperiment class adheres to Bioconductor’s specification and offers similar interface and methods. Our goal is to make it simple for analysts to switch between R and Python.\n\n\n\n\n\n\nNote\n\n\n\nFor more details on the design, refer to the BiocPy developer guide or the singlecellexperiment documentation.\n\n\nThis Python code demonstrates basic operations on a SingleCellExperiment object, including retrieving assay names, column names, column metadata, accessing counts, and coercing to an AnnData object for interoperability with existing analysis ready eco-systems in Python.\nTo display assays names from the object:\n\nPython\n\n\n\nprint(\"Assays names: \", sce.get_assay_names()) # or sce.assay_names\n\nAssays names:  ['counts']\n\n\n\n\n\nTo access cell barcodes or ids:\n\nPython\n\n\n\nprint(\"Cell barcodes (first 10): \", sce.get_column_names()[:10]) # or sce.column_names\n\nCell barcodes (first 10):  ['1772071015_C02', '1772071017_G12', '1772071017_A05', '1772071014_B06', '1772067065_H06', '1772071017_E02', '1772067065_B07', '1772067060_B09', '1772071014_E04', '1772071015_D04']\n\n\n\n\n\nTo access all cell annotations:\n\nPython\n\n\n\nprint(\"Column metadata: \", sce.get_column_data()) # or sce.column_data\n\nColumn metadata:  BiocFrame with 3005 rows and 9 columns\n                       tissue            group #     total mRNA mol               well                sex                age           diameter\n                 &lt;StringList&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt; &lt;ndarray[float64]&gt;\n1772071015_C02       sscortex                1.0            21580.0               11.0                1.0               21.0                0.0\n1772071017_G12       sscortex                1.0            21748.0               95.0               -1.0               20.0               9.56\n1772071017_A05       sscortex                1.0            31642.0               33.0               -1.0               20.0               11.1\n                          ...                ...                ...                ...                ...                ...                ...\n1772063068_D01       sscortex                9.0             4015.0                4.0                1.0               26.0               8.63\n1772066098_A12 ca1hippocampus                9.0             2896.0               89.0               -1.0               26.0               9.23\n1772058148_F03       sscortex                9.0             4460.0               22.0                1.0               26.0               10.4\n                     level1class  level2class\n                    &lt;StringList&gt; &lt;StringList&gt;\n1772071015_C02      interneurons        Int10\n1772071017_G12      interneurons        Int10\n1772071017_A05      interneurons         Int6\n                             ...          ...\n1772063068_D01 endothelial-mural         Vsmc\n1772066098_A12 endothelial-mural         Vsmc\n1772058148_F03 endothelial-mural         Vsmc\n\n\n\n\n\nTo access an assay matrix:\n\nPython\n\n\n\nprint(\"Counts matrix: \", sce.assays[\"counts\"]) # or # sce.assay(\"counts\")\n\nCounts matrix:  &lt;20006 x 3005&gt; sparse ReloadedArray object of type 'uint16'\n[[  0,   0,   0, ...,   0,   0,   1],\n [  3,   1,   0, ...,   0,   0,   1],\n [  3,   1,   6, ...,   0,   0,   0],\n ...,\n [158, 326, 209, ..., 193,  36, 359],\n [ 31,  88,  97, ...,  50,  12,  52],\n [ 13,  14,   9, ...,  18,   3,  13]]\n\n\n\n\n\nThe package uses delayed arrays (similar to the R/Bioconductor’s DelayedArray), to load file-backed arrays and matrices. This reduces memory usage when loading large datasets. Methods are available to coerce delayed arrays to sparse matrix representations from the scipy package:\n\nPython\n\n\n\nfrom delayedarray import to_scipy_sparse_matrix\nprint(\"counts as csr: \")\nprint(repr(to_scipy_sparse_matrix(sce.assays[\"counts\"], \"csc\")))\n\ncounts as csr: \n&lt;20006x3005 sparse matrix of type '&lt;class 'numpy.uint16'&gt;'\n    with 11349080 stored elements in Compressed Sparse Column format&gt;\n\n\n\n\n\nTo simplify this, we provide the realize_assays option to load matrices fully into memory when fetching the dataset.\n\nPython\n\n\n\nsce = scrnaseq.fetch_dataset(\n    \"zeisel-brain-2015\", \"2023-12-14\", \n    realize_assays=True)\nprint(sce)\n\nclass: SingleCellExperiment\ndimensions: (20006, 3005)\nassays(1): ['counts']\nrow_data columns(1): ['featureType']\nrow_names(20006): ['Tspan12', 'Tshz1', 'Fnbp1l', ..., 'mt-Rnr2', 'mt-Rnr1', 'mt-Nd4l']\ncolumn_data columns(9): ['tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class']\ncolumn_names(3005): ['1772071015_C02', '1772071017_G12', '1772071017_A05', ..., '1772063068_D01', '1772066098_A12', '1772058148_F03']\nmain_experiment_name: gene\nreduced_dims(0): []\nalternative_experiments(2): ['repeat', 'ERCC']\nrow_pairs(0): []\ncolumn_pairs(0): []\nmetadata(0): \n\n\n\n\n\n\nIn addition, we provide coercions from SingleCellExperiment class to take advantage of methods in the Python ecosystem, e.g. scverse and AnnData.\n\nPython\n\n\n\nprint(\"coerce to AnnData: \", sce.to_anndata())\n\ncoerce to AnnData:  (AnnData object with n_obs × n_vars = 3005 × 20006\n    obs: 'tissue', 'group #', 'total mRNA mol', 'well', 'sex', 'age', 'diameter', 'level1class', 'level2class', 'rownames'\n    var: 'featureType', 'rownames'\n    layers: 'counts', None)",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#annotate-cell-types",
    "href": "tutorials/annotate_cell_types.html#annotate-cell-types",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "3. Annotate cell types",
    "text": "3. Annotate cell types\nWe can now annotate cell types by using reference datasets and matching cells based on their expression profiles. In this tutorial, we will use SingleR in R or its Python equivalent singler.\nBefore running the singler algorithm, we need to download an appropriate reference dataset from the celldex package.\n\n3.1 Access reference datasets from celldex\nSimilar to the scRNAseq package, the celldex package provides access to the collection of reference expression datasets with curated cell type labels, for use in procedures like automated annotation of single-cell data or deconvolution of bulk RNA-seq to reference datasets. These datasets are also stored in language-agnostic representations for use in downstream analyses.\nFor this tutorial, let’s download the Mouse RNA-seq reference from celldex using fetch_reference() in Python or fetchReference() in R. This reference consists of a collection of mouse bulk RNA-seq data sets downloaded from the gene expression omnibus (Benayoun et al. 2019). A variety of cell types are available, again mostly from blood but also covering several other tissues.\n\nPythonR\n\n\n\nimport celldex\n\nmouse_rnaseq_ref = celldex.fetch_reference(\n    \"mouse_rnaseq\", \"2024-02-26\", \n    realize_assays=True)\nprint(mouse_rnaseq_ref)\n\nclass: SummarizedExperiment\ndimensions: (21214, 358)\nassays(1): ['logcounts']\nrow_data columns(0): []\nrow_names(21214): ['Xkr4', 'Rp1', 'Sox17', ..., 'MGC107098', 'LOC100039574', 'LOC100039753']\ncolumn_data columns(3): ['label.main', 'label.fine', 'label.ont']\ncolumn_names(358): ['ERR525589Aligned', 'ERR525592Aligned', 'SRR275532Aligned', ..., 'SRR1044042Aligned', 'SRR1044043Aligned', 'SRR1044044Aligned']\nmetadata(0): \n\n\n\n\n\nsuppressWarnings(library(celldex))\nmouse_rnaseq_ref &lt;- fetchReference(\"mouse_rnaseq\", \"2024-02-26\", realize.assays=TRUE)\nmouse_rnaseq_ref\n\n\n\nNow, let’s annotate cells from the zeisel-brain dataset using the mouse_rnaseq reference dataset.\n\nPythonR\n\n\n\nimport singler\n\nmatches = singler.annotate_single(\n    test_data=sce, \n    ref_data = mouse_rnaseq_ref,\n    ref_labels = \"label.main\"\n)\n\nimport pandas as pd\n\npd.Series(matches[\"best\"]).value_counts()\n\n/opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/biocframe/BiocFrame.py:591: UserWarning: Setting property 'metadata' is an in-place operation, use 'set_metadata' instead\n  warn(\n\n\nNeurons              1704\nOligodendrocytes      844\nAstrocytes            180\nEndothelial cells     177\nMacrophages            45\nEpithelial cells       20\nMicroglia              18\nFibroblasts            17\nName: count, dtype: int64\n\n\n\n\nsuppressWarnings(library(SingleR))\ncell_labels &lt;- SingleR(test = assay(sce, \"counts\"), ref = mouse_rnaseq_ref, labels = mouse_rnaseq_ref$label.main)\n\ntable(cell_labels$labels)\n\n\n\nGive this is a brain dataset, the presence of neuron’s and other brain-related cell types makes sense.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "href": "tutorials/annotate_cell_types.html#analyze-single-cell-rna-seq-datasets",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "4. Analyze single-cell RNA-seq datasets",
    "text": "4. Analyze single-cell RNA-seq datasets\n\n\n\nsingle-cell-methods\n\n\nAaron has implemented the single-cell methods from scran in C++. This allows us to reuse the same implementation in JS and develop applications for analyzing single-cell data (Kana), or in Python through the scranpy package.\nTo analyze the dataset using the default parameters:\n\nPython\n\n\n\nimport scranpy\n\nresults = scranpy.analyze_sce(sce)\n\n# results is a complex object, \n# let's explore the umap and tsne dimensions\nprint(results.tsne)\n\nTsneEmbedding(x=array([23.33658388, 22.8094184 , 23.45253415, ..., 16.0497226 ,\n       12.82033159, 20.09691125]), y=array([-13.48101462, -13.57116802, -12.70062904, ...,  -1.55527947,\n         1.61006778,   3.4322148 ]))\n\n\n\n\n\n\n4.1 Want to know whats happening in the entire analysis\nRunning the analyze_sce() function uses the default parameters to run the single-cell workflow. If you want to customize or want to have fine-grained control on the analysis steps, set the parameter dry_run=True.\n\n\n\n\n\n\nNote\n\n\n\nThis prints out the exact series of steps the function runs under the hood to perform the analysis. You can then use this to customize the analysis to your specific dataset or use case.\n\n\n\nPython\n\n\n\nprint(scranpy.analyze_sce(sce, dry_run=True))\n\nimport scranpy\nimport numpy\n\nresults = AnalyzeResults()\nresults.rna_quality_control_metrics = scranpy.quality_control.per_cell_rna_qc_metrics(rna_matrix, options=update(options.per_cell_rna_qc_metrics_options, cell_names=options.miscellaneous_options.cell_names))\nresults.rna_quality_control_thresholds = scranpy.quality_control.suggest_rna_qc_filters(results.rna_quality_control_metrics, options=update(options.suggest_rna_qc_filters_options, block=options.miscellaneous_options.block))\nresults.rna_quality_control_filter = scranpy.quality_control.create_rna_qc_filter(results.rna_quality_control_metrics, results.rna_quality_control_thresholds, options=update(options.create_rna_qc_filter_options, block=options.miscellaneous_options.block))\ndiscard = numpy.zeros(rna_ptr.shape[1], dtype=bool)\ndiscard = numpy.logical_or(discard, results.rna_quality_control_filter)\nrna_filtered = scranpy.quality_control.filter_cells(rna_matrix, filter=discard)\nresults.quality_control_retained = numpy.logical_not(discard)\nfiltered_block = None\nraw_size_factors = results.rna_quality_control_metrics.column('sums')[results.quality_control_retained]\n(rna_normed, final_size_factors) = scranpy.normalization.log_norm_counts(rna_filtered, options=update(options.rna_log_norm_counts_options, size_factors=raw_size_factors, center_size_factors_options=update(options.rna_log_norm_counts_options.center_size_factors_options, block=filtered_block), with_size_factors=True))\nresults.rna_size_factors = final_size_factors\nresults.gene_variances = scranpy.feature_selection.model_gene_variances(rna_normed, options=update(options.model_gene_variances_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names))\nresults.hvgs = scranpy.feature_selection.choose_hvgs(results.gene_variances.column('residuals'), options=options.choose_hvgs_options)\nresults.rna_pca = scranpy.dimensionality_reduction.run_pca(rna_normed, options=update(options.rna_run_pca_options, subset=results.hvgs, block=filtered_block))\nlowdim = results.rna_pca.principal_components\n(get_tsne, get_umap, graph, remaining_threads) = scranpy.run_neighbor_suite(lowdim, build_neighbor_index_options=options.build_neighbor_index_options, find_nearest_neighbors_options=options.find_nearest_neighbors_options, run_umap_options=options.run_umap_options, run_tsne_options=options.run_tsne_options, build_snn_graph_options=options.build_snn_graph_options, num_threads=options.find_nearest_neighbors_options.num_threads)\nresults.snn_graph = graph\nresults.clusters = results.snn_graph.community_multilevel(resolution=options.miscellaneous_options.snn_graph_multilevel_resolution).membership\nresults.rna_markers = scranpy.marker_detection.score_markers(rna_normed, grouping=results.clusters, options=update(options.rna_score_markers_options, block=filtered_block, feature_names=options.miscellaneous_options.rna_feature_names, num_threads=remaining_threads))\nresults.tsne = get_tsne()\nresults.umap = get_umap()\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsers can also run individual steps from the analysis without having to perform the full analysis, e.g. compute log-normalized counts or find markers.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#visualize-results",
    "href": "tutorials/annotate_cell_types.html#visualize-results",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "5. Visualize Results",
    "text": "5. Visualize Results\nI can’t have a tutorial without a section on visualization or figures.\nWe will use the seaborn and matplotlib packages in Python to create visualizations. We’ll plot the t-SNE embedding and color the cells by their cluster assignments.\n\nPython\n\n\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=results.clusters, palette=\"Paired\"\n)\n\n\n\n\n\n\n\n\n\n\n\nNow let’s color the embedding with the cell types we identified from celldex. We ran the singleR algorithm on the full datasets, but scranpy filtered a few cells during the QC step. Let’s identify which cells were kept.\n\nPython\n\n\n\nto_keep = [i for i,x in enumerate(results.rna_quality_control_filter) if x == False]\nfiltered_matches = [matches[\"best\"][i] for i in to_keep]\n\n\n\n\n\nPython\n\n\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.tsne.x, y=results.tsne.y, \n    hue=filtered_matches, palette=\"Paired\"\n)\n\n\n\n\n\n\n\n\n\n\n\nSimilarly also explore the UMAP embedding:\n\nPython\n\n\n\nimport seaborn as sns\nsns.scatterplot(\n    x=results.umap.x, y=results.umap.y, \n    hue=filtered_matches, palette=\"Paired\"\n)",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#exercises",
    "href": "tutorials/annotate_cell_types.html#exercises",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nShare or upload your datasets to scrna-seq package. Instructions to upload are available in their respective R/Bioc and Python packages.\nExplore top markers for each cluster identified by scranpy.\nSave your results and explore in Kana.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/annotate_cell_types.html#conclusion",
    "href": "tutorials/annotate_cell_types.html#conclusion",
    "title": "Tutorial 2: Annotate cell types in single-cell RNA-seq data",
    "section": "Conclusion",
    "text": "Conclusion\nCongratulations! You have now completed the tutorial on accessing single-cell datasets using scRNAseq and ArtifactDB, and annotating cell types using reference datasets from celldex. For more detailed usage and advanced analyses, refer to the respective documentation of these packages.",
    "crumbs": [
      "Tutorials",
      "Tutorial 2: Annotate cell types in single-cell RNA-seq data"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html",
    "href": "tutorials/genomic_ranges.html",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "",
    "text": "Genomic range operations are fundamental to many bioinformatics analyses. They allow us to work with intervals of genomic coordinates, which is crucial for understanding the relationships between different genomic features such as genes, regulatory elements, and experimental data like ChIP-seq peaks. In this tutorial, we’ll explore how to work with genomic interval data using BiocPy’s GenomicRanges package, which provides a Python implementation of the R/Bioconductor GenomicRanges package.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#outline",
    "href": "tutorials/genomic_ranges.html#outline",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Outline",
    "text": "Outline\nIn this workshop, we’ll walk through several aspects of working with genomic ranges in Python:\n\nLoad genomic data: we’ll start by reading in genomic data from RDS files, including exon positions grouped by transcripts.\nBasic genomic operations: we’ll cover fundamental operations like finding transcription start sites (TSS) and promoter regions.\nOverlap analysis: we’ll learn how to find overlaps between different genomic features, a common task in many analyses.\nAdvanced operations: we’ll explore more complex operations like finding peaks within specific regions and resizing genomic intervals.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#prerequisites",
    "href": "tutorials/genomic_ranges.html#prerequisites",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here.\n\nInstall the Python packages from PyPI:\n\nShell\n\n\npip install -U biocutils genomicranges rds2py numpy pandas geniml\n\n\n\nInstall the R packages using BiocManager:\n\nR\n\n\nBiocManager::install(c(\"AnnotationHub\"))",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#download-reference-annotation",
    "href": "tutorials/genomic_ranges.html#download-reference-annotation",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "1. Download reference annotation",
    "text": "1. Download reference annotation\nInsead of reinventing the wheel to access references in Python, we’ll use existing available Bioconductor resources that provide access to genome annotations. AnnotationHub is a great resource providing access to genomic reference annotations. It’s super convenient to search for a reference from AnnotationHub and download the genome of interest.\nLet’s search the latest ensembl database for the human reference genome using Bioconductor’s AnnotationHub.\n\nR\n\n\nsuppressMessages(library(AnnotationHub))\n\nah &lt;- AnnotationHub()\nensdb &lt;- query(ah, \"Ensembl 112 EnsDb for Homo sapiens\")[[1]]\n\n\n\nWe will then extract the exon positions and group them by transcript. Additionally, we provide a list of column names we would like to be available in mcols for our analysis. For the purpose of this tutorial, we’ll limit ourselves to the exons from chromosome 22.\n\nR\n\n\nexons_by_tx &lt;- exonsBy(ensdb, \n    by = \"tx\", filter = SeqNameFilter(c(\"22\")), \n    columns= c(\"exon_id\", \"tx_name\", \"tx_id\", \"gene_name\", \"gene_id\"))\n\n\n\nFinally, save the object as an RDS file.\n\nR\n\n\nsaveRDS(exons_by_tx, \"hg38_exons_by_tx.rds\")",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#load-genome-annotation-in-python",
    "href": "tutorials/genomic_ranges.html#load-genome-annotation-in-python",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "2. Load genome annotation in Python",
    "text": "2. Load genome annotation in Python\nWe now read the above RDS annotation object into our Python session using the rds2py Python package. This is a two step process.\nThe first step represents the data stored in the RDS file as a python dictionary\n\nPython\n\n\n\nfrom rds2py import read_rds\nhg38_robject = read_rds(\"./hg38_exons_by_tx.rds\")\n\n# Only printing the keys\nprint(\"Keys of the object:\", hg38_robject.keys())\nprint(\"Class name of the object:\", hg38_robject[\"class_name\"], \"from package:\", hg38_robject[\"package_name\"])\n\nKeys of the object: dict_keys(['data', 'package_name', 'class_name', 'attributes'])\nClass name of the object: CompressedGRangesList from package: GenomicRanges\n\n\n\n\n\nThis dictionary object (hg38_robject) contains 4 keys:\n\nclass_name: class name of the object\npackage_name: name of the package containing the class definition\ndata: contains the value if the object is a scalar\nattributes: if the object is an S4 class, contains various attributes and their values\n\nThis dictionary can then be coerced into a Python GenomicRangesList class.\n\nPython\n\n\n\nfrom rds2py.granges import as_granges_list\nby_tx = as_granges_list(hg38_robject)\n\nprint(\"Exons by transcript:\")\nprint(by_tx)\n\nExons by transcript:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 9 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n[1]    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\n[2]    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n[3]    chr22 44725244 - 44725293               + | ENSE00003568825 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         4\n[4]    chr22 44726577 - 44726635               + | ENSE00003465556 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         5\n[5]    chr22 44731730 - 44731822               + | ENSE00003642381 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         6\n[6]    chr22 44732251 - 44732392               + | ENSE00003658491 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         7\n[7]    chr22 44735027 - 44735163               + | ENSE00003692865 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         8\n[8]    chr22 44736772 - 44737681               + | ENSE00001846334 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         9\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 10 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n[1]    chr22 50603626 - 50603720               + | ENSE00003768317 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         2\n[2]    chr22 50603841 - 50605065               + | ENSE00003772801 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         3\n[3]    chr22 50605368 - 50605444               + | ENSE00003773674 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         4\n[4]    chr22 50605562 - 50605735               + | ENSE00003765641 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         5\n[5]    chr22 50605825 - 50605935               + | ENSE00003763622 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         6\n[6]    chr22 50606658 - 50606766               + | ENSE00003773228 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         7\n[7]    chr22 50606921 - 50606992               + | ENSE00003769486 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         8\n[8]    chr22 50610212 - 50610311               + | ENSE00003772161 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         9\n[9]    chr22 50610707 - 50613982               + | ENSE00003731955 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735        10\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 2 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n[1]    chr22 20241415 - 20243111               - | ENSE00001557601 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         2\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 15 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 33919995 - 33920477               - |  LRG_856t1e1 LRG_856t2 LRG_856t2    LARGE1 LRG_856         1\n [1]    chr22 33761371 - 33761559               - |  LRG_856t1e3 LRG_856t2 LRG_856t2    LARGE1 LRG_856         2\n [2]    chr22 33650367 - 33650669               - |  LRG_856t1e4 LRG_856t2 LRG_856t2    LARGE1 LRG_856         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[12]    chr22 33283202 - 33283349               - | LRG_856t1e14 LRG_856t2 LRG_856t2    LARGE1 LRG_856        13\n[13]    chr22 33277060 - 33277256               - | LRG_856t1e15 LRG_856t2 LRG_856t2    LARGE1 LRG_856        14\n[14]    chr22 33272509 - 33274625               - | LRG_856t1e16 LRG_856t2 LRG_856t2    LARGE1 LRG_856        15\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 7 ranges and 6 metadata columns\n    seqnames              ranges          strand      exon_id  tx_name    tx_id gene_name gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;       &lt;list&gt;   &lt;list&gt;   &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n[0]    chr22 37244114 - 37244266               - | LRG_97t1e1 LRG_97t1 LRG_97t1      RAC2  LRG_97         1\n[1]    chr22 37241587 - 37241659               - | LRG_97t1e2 LRG_97t1 LRG_97t1      RAC2  LRG_97         2\n[2]    chr22 37232801 - 37232919               - | LRG_97t1e3 LRG_97t1 LRG_97t1      RAC2  LRG_97         3\n[3]    chr22 37231932 - 37231995               - | LRG_97t1e4 LRG_97t1 LRG_97t1      RAC2  LRG_97         4\n[4]    chr22 37231231 - 37231391               - | LRG_97t1e5 LRG_97t1 LRG_97t1      RAC2  LRG_97         5\n[5]    chr22 37226671 - 37226804               - | LRG_97t1e6 LRG_97t1 LRG_97t1      RAC2  LRG_97         6\n[6]    chr22 37225270 - 37226040               - | LRG_97t1e7 LRG_97t1 LRG_97t1      RAC2  LRG_97         7\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 21 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 20982297 - 20982572               + |  LRG_989t1e1 LRG_989t1 LRG_989t1     LZTR1 LRG_989         1\n [1]    chr22 20983027 - 20983090               + |  LRG_989t1e2 LRG_989t1 LRG_989t1     LZTR1 LRG_989         2\n [2]    chr22 20985841 - 20985898               + |  LRG_989t1e3 LRG_989t1 LRG_989t1     LZTR1 LRG_989         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[18]    chr22 20996696 - 20996802               + | LRG_989t1e19 LRG_989t1 LRG_989t1     LZTR1 LRG_989        19\n[19]    chr22 20996886 - 20996967               + | LRG_989t1e20 LRG_989t1 LRG_989t1     LZTR1 LRG_989        20\n[20]    chr22 20997232 - 20999033               + | LRG_989t1e21 LRG_989t1 LRG_989t1     LZTR1 LRG_989        21\n------\nseqinfo(1 sequences): chr22\n \n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCurrently this is a two step process, we are working on simplifying this to a single step for supported Bioconductor classes.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#define-promoters-and-tss",
    "href": "tutorials/genomic_ranges.html#define-promoters-and-tss",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "3. Define promoters and TSS",
    "text": "3. Define promoters and TSS\nNow, let’s perform some basic operations like finding transcription start sites (TSS) and promoter regions. These operations help us identify key regulatory regions of the genome.\n\n3.1 Find transcription start sites (TSS)\nTranscription start sites (TSS) are the locations where transcription of a gene begins. Identifying TSS is crucial for understanding gene regulation, as many regulatory elements are located near the TSS.\nFirst, we use the range() method to get the full extent of each transcript, i.e. from the start of the first exon to the end of the last exon. This should give us exactly one range per transcript.\n\nPython\n\n\n\nranges_by_tx = by_tx.range()\n\nprint(\"Transcript ranges:\")\nprint(ranges_by_tx)\n\nTranscript ranges:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 44677057 - 44737681               +\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 50603133 - 50613982               +\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 20241415 - 20268319               -\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 33272509 - 33920477               -\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 37225270 - 37244266               -\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n \n\n\n\n\n\n\nSince the range() gives us exactly one range per transcript, so we can simplify our list to a GenomicRanges object. This is similar to unlist in R.\n\nPython\n\n\n\ngr_by_tx = ranges_by_tx.as_genomic_ranges()\n\nprint(\"as GenomicRanges:\")\nprint(gr_by_tx)\n\nas GenomicRanges:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44737681               +\nENST00000008876    chr22 50603133 - 50613982               +\nENST00000043402    chr22 20241415 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33272509 - 33920477               -\n       LRG_97t1    chr22 37225270 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\nThen we resize to a width of 1 base pair at the start of each range to pinpoint the TSS.\n\nPython\n\n\n\ntss = gr_by_tx.resize(width=1, fix=\"start\")\n\nprint(\"Transcript Start Sites:\")\nprint(tss)\n\nTranscript Start Sites:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44677058               +\nENST00000008876    chr22 50603133 - 50603134               +\nENST00000043402    chr22 20268318 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33920476 - 33920477               -\n       LRG_97t1    chr22 37244265 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20982298               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\n\n\n3.2 Define promoter regions\nHere, we’re defining promoters as the region 2000 base pairs upstream to 200 base pairs downstream of each TSS. This definition can vary depending on the specific analysis, but this range often captures important regulatory elements.\n\nPython\n\n\n\npromoters = tss.promoters(upstream=2000, downstream=200)\n\nprint(\"Promoter Regions:\")\nprint(promoters)\n\nPromoter Regions:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44675057 - 44677257               +\nENST00000008876    chr22 50601133 - 50603333               +\nENST00000043402    chr22 20268119 - 20270319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33920277 - 33922477               -\n       LRG_97t1    chr22 37244066 - 37246266               -\n      LRG_989t1    chr22 20980297 - 20982497               +\n------\nseqinfo(1 sequences): chr22",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#overlap-with-chip-seq-peaks",
    "href": "tutorials/genomic_ranges.html#overlap-with-chip-seq-peaks",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "4. Overlap with ChIP-seq peaks",
    "text": "4. Overlap with ChIP-seq peaks\nA common task in genomic analysis is finding overlaps between different genomic features. This helps us understand the relationships between various elements in the genome and can provide insights into gene regulation and function.\n\n4.1 Load ChIP-seq peaks\nChIP-seq (Chromatin Immunoprecipitation followed by sequencing) is a method used to identify binding sites of DNA-associated proteins. The peaks represent regions where a protein of interest is likely bound to the DNA.\nFor the purpose of this tutorial, let’s download a bed file containing peaks from a ChIP-seq experiment on human B cells to identify EZH2 binding sites (from ENCODE) and catalogued in bedbase.org.\n\nPython\n\n\n\nfrom geniml.bbclient import BBClient\n\nbbclient = BBClient(cache_folder=\"cache\", bedbase_api=\"https://api.bedbase.org\")\nbedfile_id = \"be4054acf6e3feeb4dc490e6430e358e\" \nbedfile = bbclient.load_bed(bedfile_id)\n\n\n\n\nOur friends at bedbase (Nathan Sheffield et al.) provide methods to easily coerce these objects to GenomicRanges. Again, we’re focusing on chromosome 22 for this example to keep the dataset manageable.\n\nPython\n\n\n\npeaks = bedfile.to_granges()\n\nfilter_chr22 = [x == \"chr22\" for x in peaks.get_seqnames()]\npeaks_chr22 = peaks[filter_chr22]\n\nprint(peaks_chr22)\n\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1438]    chr22 27212058 - 27212348               *\n[1439]    chr22 49201359 - 49201649               *\n[1440]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n4.2 Find overlaps with TSS\nHere, we are identifying ChIP-seq peaks that overlap with TSS. This analysis can help us understand if the protein of interest tends to bind near the start of genes, which could suggest a role in transcription initiation.\n\nPython\n\n\n\noverlaps = peaks_chr22.find_overlaps(tss)\n\nprint(\"Peak indices that overlap with TSS between 30-40:\")\nprint(overlaps[30:40])\n\nPeak indices that overlap with TSS between 30-40:\n[[], [], [], [], [], [], [], [], [1157], []]\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfind_overlaps returns a list with the same length as TSS, indicating which indices from peaks overlap with each of the TSS. Ideally, we would want to return a Hits object similar to the Bioconductor implementation.\nTODO: Future plans to convert this into a Hits object.\n\n\nLet’s identify the peaks that overlap with any TSS.\n\nPython\n\n\n\nimport itertools\n\nall_indices = list(set(itertools.chain.from_iterable(overlaps)))\npeaks_by_tss = peaks_chr22[all_indices]\nprint(peaks_by_tss)\n\nGenomicRanges with 75 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 36816145 - 36816435               *\n [2]    chr22 38467935 - 38468225               *\n          ...                 ...             ...\n[72]    chr22 50270553 - 50270843               *\n[73]    chr22 19131257 - 19131547               *\n[74]    chr22 19014170 - 19014460               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\nAlternatively, we can use subset_by_overlaps method to more conveniently subset the peaks that overlap with any TSS:\n\nPython\n\n\n\npeaks_by_tss2 = peaks_chr22.subset_by_overlaps(tss)\nprint(peaks_by_tss2)\n\nGenomicRanges with 75 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 36816145 - 36816435               *\n [2]    chr22 38467935 - 38468225               *\n          ...                 ...             ...\n[72]    chr22 50270553 - 50270843               *\n[73]    chr22 19131257 - 19131547               *\n[74]    chr22 19014170 - 19014460               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n4.3 Find overlaps with promoters\nThis operation finds ChIP-seq peaks that overlap with any of our defined promoter regions. If a significant number of peaks fall within promoters, it might suggest that the protein plays a role in gene regulation.\n\nPython\n\n\n\npeaks_by_promoters = peaks_chr22.subset_by_overlaps(promoters)\n\nprint(\"Peaks Overlapping with Promoters:\")\nprint(peaks_by_promoters)\n\nPeaks Overlapping with Promoters:\nGenomicRanges with 344 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19756445 - 19756735               *\n  [1]    chr22 37427967 - 37428257               *\n  [2]    chr22 19169462 - 19169752               *\n           ...                 ...             ...\n[341]    chr22 42368884 - 42369174               *\n[342]    chr22 21630789 - 21631079               *\n[343]    chr22 17368148 - 17368438               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n\n\n\n4.4 Find overlaps with exons\nLet’s find overlaps with any exon. We unlist our GenomicRangesList object to get all exon positions.\n\nPython\n\n\n\n# Combine all exons into a single GenomicRanges object\nall_exons = by_tx.as_granges()\n\nprint(\"All exons:\")\nprint(all_exons)\n\nAll exons:\nGenomicRanges with 34967 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000006251    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\nENST00000006251    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\nENST00000006251    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n      LRG_989t1    chr22 20996696 - 20996802               + |    LRG_989t1e19       LRG_989t1       LRG_989t1     LZTR1         LRG_989        19\n      LRG_989t1    chr22 20996886 - 20996967               + |    LRG_989t1e20       LRG_989t1       LRG_989t1     LZTR1         LRG_989        20\n      LRG_989t1    chr22 20997232 - 20999033               + |    LRG_989t1e21       LRG_989t1       LRG_989t1     LZTR1         LRG_989        21\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\nWe can then find peaks that overlap with any of these regions:\n\nPython\n\n\n\n# Find peaks overlapping with any exon\npeaks_by_exons = peaks_chr22.subset_by_overlaps(all_exons)\n\nprint(\"Peaks overlapping with exons:\")\nprint(peaks_by_exons)\n\n# Calculate the percentage of peaks that overlap with exons\npercent_overlapping = (len(peaks_by_exons) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_overlapping:.2f}%\")\n\nPeaks overlapping with exons:\nGenomicRanges with 279 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 19756445 - 19756735               *\n           ...                 ...             ...\n[276]    chr22 29307104 - 29307394               *\n[277]    chr22 35552420 - 35552710               *\n[278]    chr22 37931897 - 37932187               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#advanced-operations",
    "href": "tutorials/genomic_ranges.html#advanced-operations",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "5. Advanced Operations",
    "text": "5. Advanced Operations\nLet’s explore some more complex operations that are often used in genomic analyses.\n\n5.1 Compare exonic vs. intronic binding\nLet’s first identify intronic regions. There are two ways to find introns:\n\nFind introns for each gene, i.e. regions within each gene’s transcript body that do not overlap any of that gene’s exons (using psetdiff in R/Bioconductor).\nFind intronic regions globally, i.e. regions that do not overlap with any exon (using subtract) for any gene. To find these positions, we ignore strand information, because there could be genes that overlap on different strands.\n\nWe will find intronic regions globally (2) for our tutorial today.\nLet’s first get all transcript ranges, following the steps in Section 3.1:\n\nPython\n\n\n\n# Get the full extent of each transcript\ntx_ranges = by_tx.range().as_genomic_ranges()\n\n\n\n\nWe now subtract any exons that overlaps within each transcript by ignoring the strand. The result is a GenomicRangesList containing intronic regions for each transcript. We simplify this by coercing this into a GenomicRanges object.\n\nPython\n\n\n\nintrons = tx_ranges.subtract(all_exons, ignore_strand=True).as_granges()\n\nprint(\"Intron regions:\")\nprint(introns)\n\nIntron regions:\nGenomicRanges with 5403 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44737681               +\nENST00000008876    chr22 50603133 - 50613982               +\nENST00000043402    chr22 20241415 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33272509 - 33920477               -\n       LRG_97t1    chr22 37225270 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n\nWe can compare the proportion of peaks overlapping with exons to those overlapping with introns:\n\nPython\n\n\n\n# Find peaks overlapping with introns\npeaks_by_introns = peaks_chr22.subset_by_overlaps(introns)\n\nprint(\"Peaks overlapping with introns:\")\nprint(peaks_by_introns)\n\n# Calculate percentages\npercent_exonic = (len(peaks_by_exons) / len(peaks_chr22)) * 100\npercent_intronic = (len(peaks_by_introns) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_exonic:.2f}%\")\nprint(f\"Percentage of peaks overlapping with introns: {percent_intronic:.2f}%\")\n\nPeaks overlapping with introns:\nGenomicRanges with 1000 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 19756445 - 19756735               *\n           ...                 ...             ...\n[997]    chr22 36626768 - 36627058               *\n[998]    chr22 48833277 - 48833567               *\n[999]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\nPercentage of peaks overlapping with introns: 69.40%\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThese percentages may or may not add up to 100%. Some peaks may overlap both introns and exons depending on how wide they are. In our case its because of ignoring strands and finding global intronic regions. Ideally, you may want to filter the peaks based on preference as you annotate them with TSS, promoters, etc.\n\n\nThis comparison can help determine if the protein of interest shows a preference for binding in exonic or intronic regions, which could suggest different functional roles (e.g., splicing regulation for exonic binding vs. potential enhancer activity for intronic binding).\n\n\n5.2 Find overlaps with the first exon\n\n\n\n\n\n\nNote\n\n\n\nThe rationale for this analysis may vary, but we are mostly showcasing complex genomic operations that can be performed.\n\n\nLet’s first put together a GenomicRanges object containing the first exon for each transcript.\n\nall_first = []\nfor txid, grl in by_tx:\n    strand = grl.get_strand(as_type = \"list\")[0]\n    if strand == \"-\":\n        all_first.append(grl.sort()[-1])\n    else:\n        all_first.append(grl.sort()[0])\n\nprint(all_first[:3])\n\n[GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([44677057], dtype=int32), width=array([184], dtype=int32)), strand=[1], mcols=BiocFrame(data={'exon_id': ['ENSE00001838743'], 'tx_name': ['ENST00000006251'], 'tx_id': ['ENST00000006251'], 'gene_name': ['PRR5'], 'gene_id': ['ENSG00000186654'], 'exon_rank': [1]}, number_of_rows=1, row_names=['0'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38'])), GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([50603133], dtype=int32), width=array([366], dtype=int32)), strand=[1], mcols=BiocFrame(data={'exon_id': ['ENSE00003608148'], 'tx_name': ['ENST00000008876'], 'tx_id': ['ENST00000008876'], 'gene_name': ['MAPK8IP2'], 'gene_id': ['ENSG00000008735'], 'exon_rank': [1]}, number_of_rows=1, row_names=['9'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38'])), GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([20268071], dtype=int32), width=array([248], dtype=int32)), strand=[-1], mcols=BiocFrame(data={'exon_id': ['ENSE00001358408'], 'tx_name': ['ENST00000043402'], 'tx_id': ['ENST00000043402'], 'gene_name': ['RTN4R'], 'gene_id': ['ENSG00000040608'], 'exon_rank': [1]}, number_of_rows=1, row_names=['19'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38']))]\n\n\nThen we combine all the individual genomic elements. The biocutils package provides utilities for convenient aspects of R that aren’t provided by base Python and generics. One of these generics is the combine_sequences operation that merges or concatenates 1-dimensional Bioconductor classes.\n\nfrom biocutils import combine_sequences\nfirst_exons = combine_sequences(*all_first)\n\nprint(first_exons)\n\nGenomicRanges with 5387 ranges and 6 metadata columns\n       seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n   [0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n   [1]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n   [2]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n            ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n[5384]    chr22 33919995 - 33920477               - |     LRG_856t1e1       LRG_856t2       LRG_856t2    LARGE1         LRG_856         1\n[5385]    chr22 37244114 - 37244266               - |      LRG_97t1e1        LRG_97t1        LRG_97t1      RAC2          LRG_97         1\n[5386]    chr22 20982297 - 20982572               + |     LRG_989t1e1       LRG_989t1       LRG_989t1     LZTR1         LRG_989         1\n------\nseqinfo(1 sequences): chr22\n\n\nWe can now subset peaks that overlap with the first exon:\n\npeaks_with_first_exons = peaks_chr22.subset_by_overlaps(first_exons)\nprint(peaks_with_first_exons)\n\nGenomicRanges with 153 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 17369888 - 17370178               *\n  [1]    chr22 19756445 - 19756735               *\n  [2]    chr22 45975507 - 45975797               *\n           ...                 ...             ...\n[150]    chr22 49500975 - 49501265               *\n[151]    chr22 19131257 - 19131547               *\n[152]    chr22 29307104 - 29307394               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n5.3 Resize and shift peaks\nResizing and shifting genomic ranges can be useful in various contexts. For example:\n\nNarrowing peaks might help focus on the center of ChIP-seq binding sites.\nShifting ranges can be used to look at regions adjacent to your features of interest. e.g., defining the predicted CRISPR cleavage site based on the position of the CRISPR gRNA sequence.\n\n\nnarrow_peaks = peaks_chr22.narrow(start=10, width=100)\nshifted_peaks = narrow_peaks.shift(10)\n\nprint(\"Narrowed and Shifted Peaks:\")\nprint(shifted_peaks)\n\nNarrowed and Shifted Peaks:\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766807 - 19766907               *\n   [1]    chr22 17369907 - 17370007               *\n   [2]    chr22 19756464 - 19756564               *\n            ...                 ...             ...\n[1438]    chr22 27212077 - 27212177               *\n[1439]    chr22 49201378 - 49201478               *\n[1440]    chr22 49663381 - 49663481               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nThese operations demonstrate the flexibility of genomic range manipulations, which can be useful for fine-tuning analyses or testing hypotheses about the spatial relationships between genomic features.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#exercises",
    "href": "tutorials/genomic_ranges.html#exercises",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nSplit the input genome reference by gene_name, e.g. a field that contains gene symbols.\nCalculate the average width of the ChIP-seq peaks on chromosome 22.\nCompute the percentage of promoter regions that have at least one overlapping ChIP-seq peak.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "tutorials/genomic_ranges.html#conclusion",
    "href": "tutorials/genomic_ranges.html#conclusion",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we’ve explored how to use BiocPy’s genomic ranges functionality to perform various genomic analyses. These tools and techniques provide a powerful way to work with genomic interval data in Python, mirroring the capabilities from Bioconductor. They form the foundation for many more complex genomic analyses and can be applied to a wide range of biological questions.\n\n\n\n\n\n\nNote\n\n\n\nRefer to the BiocPy documentation for more detailed information on these packages and their functionalities.",
    "crumbs": [
      "Tutorials",
      "Tutorial 1: Perform range-based analyses using `GenomicRanges`"
    ]
  },
  {
    "objectID": "howto.html",
    "href": "howto.html",
    "title": "How to run the notebooks",
    "section": "",
    "text": "If you are attending the workshop at Bioconductor:\n\nOpen BiocWorkshops in a new tab.\nSelect “R/Bioconductor Jupyter Workshop” as shown in the screenshot.\n\n\n\nClick the “Run the tool”.\n\n\n\nClick on “Interactive Tools” in the left sidebar to check on the status of the session. Once the session is ready, click on the “BiocPy” to open the Jupyter notebook.\n\n\n\nYou should be able to see the BiocWorkshop repository cloned into the session.\n\n\n\n\n\n\nTo open the session in Google Colab:\n\nOpen Google colab in a new tab.\nOn the page, it should open up a dialog to “Open notebook” as shown in the screenshot below.\n\nIf no dialog appears, go to File -&gt; Open Notebook from the menu (in the top left).\n\nChoose Github and enter the repository url for the workshop: https://github.com/BiocPy/BiocWorkshop2024. This will automatically find the python notebooks available in the repository.\n\n\n\nChoose the open icon to explore this notebook\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis process does not download the RDS file available in the repository. Folks might have to manually download this to their Google Colab sessions.\n\n\n\n\n\n\nIf you want to run locally, please clone the repository and install the python packages used for the workshop.\ngit clone https://github.com/BiocPy/BiocWorkshop2024\ncd BiocWorkshop2024\n\n# Assuming python is available\n# You are free to use mamba, conda or virtualenv's\npip install -r requirements.txt\n\n# Start the jupyter server\njupyter lab\nThen checkout the notebook directory that contain Jupyter notebooks.",
    "crumbs": [
      "How to run the notebooks"
    ]
  },
  {
    "objectID": "howto.html#option-1.-using-biocworkshop-preferred",
    "href": "howto.html#option-1.-using-biocworkshop-preferred",
    "title": "How to run the notebooks",
    "section": "",
    "text": "If you are attending the workshop at Bioconductor:\n\nOpen BiocWorkshops in a new tab.\nSelect “R/Bioconductor Jupyter Workshop” as shown in the screenshot.\n\n\n\nClick the “Run the tool”.\n\n\n\nClick on “Interactive Tools” in the left sidebar to check on the status of the session. Once the session is ready, click on the “BiocPy” to open the Jupyter notebook.\n\n\n\nYou should be able to see the BiocWorkshop repository cloned into the session.",
    "crumbs": [
      "How to run the notebooks"
    ]
  },
  {
    "objectID": "howto.html#option-2-using-google-colab",
    "href": "howto.html#option-2-using-google-colab",
    "title": "How to run the notebooks",
    "section": "",
    "text": "To open the session in Google Colab:\n\nOpen Google colab in a new tab.\nOn the page, it should open up a dialog to “Open notebook” as shown in the screenshot below.\n\nIf no dialog appears, go to File -&gt; Open Notebook from the menu (in the top left).\n\nChoose Github and enter the repository url for the workshop: https://github.com/BiocPy/BiocWorkshop2024. This will automatically find the python notebooks available in the repository.\n\n\n\nChoose the open icon to explore this notebook\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis process does not download the RDS file available in the repository. Folks might have to manually download this to their Google Colab sessions.",
    "crumbs": [
      "How to run the notebooks"
    ]
  },
  {
    "objectID": "howto.html#option-3-run-notebooks-locally",
    "href": "howto.html#option-3-run-notebooks-locally",
    "title": "How to run the notebooks",
    "section": "",
    "text": "If you want to run locally, please clone the repository and install the python packages used for the workshop.\ngit clone https://github.com/BiocPy/BiocWorkshop2024\ncd BiocWorkshop2024\n\n# Assuming python is available\n# You are free to use mamba, conda or virtualenv's\npip install -r requirements.txt\n\n# Start the jupyter server\njupyter lab\nThen checkout the notebook directory that contain Jupyter notebooks.",
    "crumbs": [
      "How to run the notebooks"
    ]
  },
  {
    "objectID": "notebook/genomic_ranges.html",
    "href": "notebook/genomic_ranges.html",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "",
    "text": "Genomic range operations are fundamental to many bioinformatics analyses. They allow us to work with intervals of genomic coordinates, which is crucial for understanding the relationships between different genomic features such as genes, regulatory elements, and experimental data like ChIP-seq peaks. In this tutorial, we’ll explore how to work with genomic interval data using BiocPy’s GenomicRanges package, which provides a Python implementation of the R/Bioconductor GenomicRanges package."
  },
  {
    "objectID": "notebook/genomic_ranges.html#outline",
    "href": "notebook/genomic_ranges.html#outline",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Outline",
    "text": "Outline\nIn this workshop, we’ll walk through several aspects of working with genomic ranges in Python:\n\nReading genomic data: we’ll start by reading in genomic data from RDS files, including exon positions grouped by transcripts.\nBasic genomic operations: we’ll cover fundamental operations like finding transcription start sites (TSS) and promoter regions.\nOverlap analysis: we’ll learn how to find overlaps between different genomic features, a common task in many analyses.\nAdvanced operations: we’ll explore more complex operations like finding peaks within specific regions and resizing genomic intervals."
  },
  {
    "objectID": "notebook/genomic_ranges.html#prerequisites",
    "href": "notebook/genomic_ranges.html#prerequisites",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore we begin, please ensure that you have the following prerequisites installed:\n\nPython 3.8 or later with dependencies listed here.\nR 4.4.0 and Bioconductor packages listed here.\n\nInstall the Python packages using pip:\n!pip install -U biocutils genomicranges rds2py numpy pandas geniml\nInstall the R packages using BiocManager:\nBiocManager::install(c(\"AnnotationHub\"))"
  },
  {
    "objectID": "notebook/genomic_ranges.html#download-reference-annotation",
    "href": "notebook/genomic_ranges.html#download-reference-annotation",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "1. Download reference annotation",
    "text": "1. Download reference annotation\nInsead of reinventing the wheel to access references in Python, we’ll use existing available Bioconductor resources that provide access to genome annotations. AnnotationHub is a great resource providing access to genomic reference annotations. It’s super convenient to search for a reference from AnnotationHub and download the genome of interest.\nLet’s search the latest ensembl database for the human reference genome using Bioconductor’s AnnotationHub.\nsuppressMessages(library(AnnotationHub))\n\nah &lt;- AnnotationHub()\nensdb &lt;- query(ah, \"Ensembl 112 EnsDb for Homo sapiens\")[[1]]\nWe will then extract the exon positions and group them by transcript. Additionally, we provide a list of column names we would like to be available in mcols for our analysis. For the purpose of this tutorial, we’ll limit ourselves to the exons from chromosome 22.\nexons_by_tx &lt;- exonsBy(ensdb, \n    by = \"tx\", filter = SeqNameFilter(c(\"22\")), \n    columns= c(\"exon_id\", \"tx_name\", \"tx_id\", \"gene_name\", \"gene_id\"))\nFinally, save the object as an RDS file.\nsaveRDS(exons_by_tx, \"hg38_exons_by_tx.rds\")\nIf you are using Google Colab, you may not have access to the RDS file used, in this tutorial. Change the block below from markdown to code and run the chunk.\n!wget https://raw.githubusercontent.com/BiocPy/BiocWorkshop2024/master/notebook/hg38_exons_by_tx.rds"
  },
  {
    "objectID": "notebook/genomic_ranges.html#load-genome-annotation-in-python",
    "href": "notebook/genomic_ranges.html#load-genome-annotation-in-python",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "2. Load genome annotation in Python",
    "text": "2. Load genome annotation in Python\nWe now read the above RDS annotation object into our Python session using the rds2py Python package. This is a two step process.\nThe first step represents the data stored in the RDS file as a python dictionary\n\nfrom rds2py import read_rds\nhg38_robject = read_rds(\"./hg38_exons_by_tx.rds\")\n\n# Only printing the keys\nprint(\"Keys of the object:\", hg38_robject.keys())\nprint(\"Class name of the object:\", hg38_robject[\"class_name\"])\n\nKeys of the object: dict_keys(['data', 'package_name', 'class_name', 'attributes'])\nClass name of the object: CompressedGRangesList\n\n\nThis dictionary object (hg38_robject) contains 4 keys:\n\nclass_name: class name of the object\npackage_name: name of the package containing the class definition\ndata: contains the value if the object is a scalar\nattributes: if the object is an S4 class, contains various attributes and their values\n\nThis dictionary can then be coerced into a Python GenomicRangesList class.\n\nfrom rds2py.granges import as_granges_list\nby_tx = as_granges_list(hg38_robject)\n\nprint(\"Exons by transcript:\")\nprint(by_tx)\n\nExons by transcript:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 9 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n[1]    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\n[2]    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n[3]    chr22 44725244 - 44725293               + | ENSE00003568825 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         4\n[4]    chr22 44726577 - 44726635               + | ENSE00003465556 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         5\n[5]    chr22 44731730 - 44731822               + | ENSE00003642381 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         6\n[6]    chr22 44732251 - 44732392               + | ENSE00003658491 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         7\n[7]    chr22 44735027 - 44735163               + | ENSE00003692865 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         8\n[8]    chr22 44736772 - 44737681               + | ENSE00001846334 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         9\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 10 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n[1]    chr22 50603626 - 50603720               + | ENSE00003768317 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         2\n[2]    chr22 50603841 - 50605065               + | ENSE00003772801 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         3\n[3]    chr22 50605368 - 50605444               + | ENSE00003773674 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         4\n[4]    chr22 50605562 - 50605735               + | ENSE00003765641 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         5\n[5]    chr22 50605825 - 50605935               + | ENSE00003763622 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         6\n[6]    chr22 50606658 - 50606766               + | ENSE00003773228 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         7\n[7]    chr22 50606921 - 50606992               + | ENSE00003769486 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         8\n[8]    chr22 50610212 - 50610311               + | ENSE00003772161 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         9\n[9]    chr22 50610707 - 50613982               + | ENSE00003731955 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735        10\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 2 ranges and 6 metadata columns\n    seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n[0]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n[1]    chr22 20241415 - 20243111               - | ENSE00001557601 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         2\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 15 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 33919995 - 33920477               - |  LRG_856t1e1 LRG_856t2 LRG_856t2    LARGE1 LRG_856         1\n [1]    chr22 33761371 - 33761559               - |  LRG_856t1e3 LRG_856t2 LRG_856t2    LARGE1 LRG_856         2\n [2]    chr22 33650367 - 33650669               - |  LRG_856t1e4 LRG_856t2 LRG_856t2    LARGE1 LRG_856         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[12]    chr22 33283202 - 33283349               - | LRG_856t1e14 LRG_856t2 LRG_856t2    LARGE1 LRG_856        13\n[13]    chr22 33277060 - 33277256               - | LRG_856t1e15 LRG_856t2 LRG_856t2    LARGE1 LRG_856        14\n[14]    chr22 33272509 - 33274625               - | LRG_856t1e16 LRG_856t2 LRG_856t2    LARGE1 LRG_856        15\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 7 ranges and 6 metadata columns\n    seqnames              ranges          strand      exon_id  tx_name    tx_id gene_name gene_id exon_rank\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;       &lt;list&gt;   &lt;list&gt;   &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n[0]    chr22 37244114 - 37244266               - | LRG_97t1e1 LRG_97t1 LRG_97t1      RAC2  LRG_97         1\n[1]    chr22 37241587 - 37241659               - | LRG_97t1e2 LRG_97t1 LRG_97t1      RAC2  LRG_97         2\n[2]    chr22 37232801 - 37232919               - | LRG_97t1e3 LRG_97t1 LRG_97t1      RAC2  LRG_97         3\n[3]    chr22 37231932 - 37231995               - | LRG_97t1e4 LRG_97t1 LRG_97t1      RAC2  LRG_97         4\n[4]    chr22 37231231 - 37231391               - | LRG_97t1e5 LRG_97t1 LRG_97t1      RAC2  LRG_97         5\n[5]    chr22 37226671 - 37226804               - | LRG_97t1e6 LRG_97t1 LRG_97t1      RAC2  LRG_97         6\n[6]    chr22 37225270 - 37226040               - | LRG_97t1e7 LRG_97t1 LRG_97t1      RAC2  LRG_97         7\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 21 ranges and 6 metadata columns\n     seqnames              ranges          strand        exon_id   tx_name     tx_id gene_name gene_id exon_rank\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;         &lt;list&gt;    &lt;list&gt;    &lt;list&gt;    &lt;list&gt;  &lt;list&gt;    &lt;list&gt;\n [0]    chr22 20982297 - 20982572               + |  LRG_989t1e1 LRG_989t1 LRG_989t1     LZTR1 LRG_989         1\n [1]    chr22 20983027 - 20983090               + |  LRG_989t1e2 LRG_989t1 LRG_989t1     LZTR1 LRG_989         2\n [2]    chr22 20985841 - 20985898               + |  LRG_989t1e3 LRG_989t1 LRG_989t1     LZTR1 LRG_989         3\n          ...                 ...             ... |          ...       ...       ...       ...     ...       ...\n[18]    chr22 20996696 - 20996802               + | LRG_989t1e19 LRG_989t1 LRG_989t1     LZTR1 LRG_989        19\n[19]    chr22 20996886 - 20996967               + | LRG_989t1e20 LRG_989t1 LRG_989t1     LZTR1 LRG_989        20\n[20]    chr22 20997232 - 20999033               + | LRG_989t1e21 LRG_989t1 LRG_989t1     LZTR1 LRG_989        21\n------\nseqinfo(1 sequences): chr22\n \n\n\n\nCurrently this is a two step process, we are working on simplifying this to a single step for supported Bioconductor classes."
  },
  {
    "objectID": "notebook/genomic_ranges.html#define-promoters-and-tss",
    "href": "notebook/genomic_ranges.html#define-promoters-and-tss",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "3. Define promoters and TSS",
    "text": "3. Define promoters and TSS\nNow, let’s perform some basic operations like finding transcription start sites (TSS) and promoter regions. These operations help us identify key regulatory regions of the genome.\n\n3.1 Find transcription start sites (TSS)\nTranscription Start Sites (TSS) are the locations where transcription of a gene begins. Identifying TSS is crucial for understanding gene regulation, as many regulatory elements are located near the TSS.\nFirst, we use the range() method to get the full extent of each transcript. This should give us exactly one range per transcript.\n\nranges_by_tx = by_tx.range()\n\nprint(\"Transcript ranges:\")\nprint(ranges_by_tx)\n\nTranscript ranges:\nGenomicRangesList with 5387 ranges and 0 metadata columns\n \nName: ENST00000006251 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 44677057 - 44737681               +\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000008876 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 50603133 - 50613982               +\n------\nseqinfo(1 sequences): chr22\n \nName: ENST00000043402 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 20241415 - 20268319               -\n------\nseqinfo(1 sequences): chr22\n \nName:  \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 33272509 - 33920477               -\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_856t2 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 37225270 - 37244266               -\n------\nseqinfo(1 sequences): chr22\n \nName: LRG_97t1 \nGenomicRanges with 1 range and 0 metadata columns\n    seqnames              ranges          strand\n       &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n[0]    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n \n\n\n\nSince the range() gives us exactly one range per transcript, so we can simplify our list to a GenomicRanges object. This is similar to unlist in R.\n\ngr_by_tx = ranges_by_tx.as_genomic_ranges()\n\nprint(\"as GenomicRanges:\")\nprint(gr_by_tx)\n\nas GenomicRanges:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44737681               +\nENST00000008876    chr22 50603133 - 50613982               +\nENST00000043402    chr22 20241415 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33272509 - 33920477               -\n       LRG_97t1    chr22 37225270 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n\n\nThen we resize to a width of 1 base pair at the start of each range to pinpoint the TSS.\n\ntss = gr_by_tx.resize(width=1, fix=\"start\")\n\nprint(\"Transcript Start Sites:\")\nprint(tss)\n\nTranscript Start Sites:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44677058               +\nENST00000008876    chr22 50603133 - 50603134               +\nENST00000043402    chr22 20268318 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33920476 - 33920477               -\n       LRG_97t1    chr22 37244265 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20982298               +\n------\nseqinfo(1 sequences): chr22\n\n\n\n\n3.2 Define promoter regions\nHere, we’re defining promoters as the region 2000 base pairs upstream to 200 base pairs downstream of each TSS. This definition can vary depending on the specific analysis, but this range often captures important regulatory elements.\n\npromoters = tss.promoters(upstream=2000, downstream=200)\n\nprint(\"Promoter Regions:\")\nprint(promoters)\n\nPromoter Regions:\nGenomicRanges with 5387 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44675057 - 44677257               +\nENST00000008876    chr22 50601133 - 50603333               +\nENST00000043402    chr22 20268119 - 20270319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33920277 - 33922477               -\n       LRG_97t1    chr22 37244066 - 37246266               -\n      LRG_989t1    chr22 20980297 - 20982497               +\n------\nseqinfo(1 sequences): chr22"
  },
  {
    "objectID": "notebook/genomic_ranges.html#overlap-with-chip-seq-peaks",
    "href": "notebook/genomic_ranges.html#overlap-with-chip-seq-peaks",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "4. Overlap with ChIP-seq peaks",
    "text": "4. Overlap with ChIP-seq peaks\nA common task in genomic analysis is finding overlaps between different genomic features. This helps us understand the relationships between various elements in the genome and can provide insights into gene regulation and function.\n\n4.1 Load ChIP-seq peaks\nChIP-seq (Chromatin Immunoprecipitation followed by sequencing) is a method used to identify binding sites of DNA-associated proteins. The peaks represent regions where a protein of interest is likely bound to the DNA.\nFor the purpose of this tutorial, let’s download a bed file containing peaks from a ChIP-seq experiment on human B cells to identify EZH2 binding sites (from ENCODE) and catalogued in bedbase.org.\n\nfrom geniml.bbclient import BBClient\n\nbbclient = BBClient(cache_folder=\"cache\", bedbase_api=\"https://api.bedbase.org\")\nbedfile_id = \"be4054acf6e3feeb4dc490e6430e358e\" \nbedfile = bbclient.load_bed(bedfile_id)\n\nOur friends at bedbase (Nathan Sheffield et al.) provide methods to easily coerce these objects to GenomicRanges. Again, we’re focusing on chromosome 22 for this example to keep the dataset manageable.\n\npeaks = bedfile.to_granges()\n\nfilter_chr22 = [x == \"chr22\" for x in peaks.get_seqnames()]\npeaks_chr22 = peaks[filter_chr22]\n\nprint(peaks_chr22)\n\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766788 - 19767078               *\n   [1]    chr22 17369888 - 17370178               *\n   [2]    chr22 19756445 - 19756735               *\n            ...                 ...             ...\n[1438]    chr22 27212058 - 27212348               *\n[1439]    chr22 49201359 - 49201649               *\n[1440]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n4.2 Find overlaps with TSS\nHere, we’re identifying ChIP-seq peaks that overlap with TSS. This analysis can help us understand if the protein of interest tends to bind near the start of genes, which could suggest a role in transcription initiation.\n\noverlaps = peaks_chr22.find_overlaps(tss)\n\nprint(\"Peak indices that overlap with TSS between 30-40:\")\nprint(overlaps[30:40])\n\nPeak indices that overlap with TSS between 30-40:\n[[], [], [], [], [], [], [], [], [1157], []]\n\n\n`find_overlaps` returns a `list` with the same length as TSS, indicating which indices from peaks overlap with each of the TSS. Ideally, we would want to return a `Hits` object similar to the Bioconductor implementation.\n\n**TODO: Future plans to convert this into a `Hits` object.**\nLet’s identify the peaks that overlap with any TSS.\n\nimport itertools\n\nall_indices = list(set(itertools.chain.from_iterable(overlaps)))\npeaks_by_tss = peaks_chr22[all_indices]\nprint(peaks_by_tss)\n\nGenomicRanges with 75 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 36816145 - 36816435               *\n [2]    chr22 38467935 - 38468225               *\n          ...                 ...             ...\n[72]    chr22 50270553 - 50270843               *\n[73]    chr22 19131257 - 19131547               *\n[74]    chr22 19014170 - 19014460               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nAlternatively, we can use subset_by_overlaps method to more conveniently subset the peaks that overlap with any TSS:\n\npeaks_by_tss2 = peaks_chr22.subset_by_overlaps(tss)\nprint(peaks_by_tss2)\n\nGenomicRanges with 75 ranges and 0 metadata columns\n     seqnames              ranges          strand\n        &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n [0]    chr22 19756445 - 19756735               *\n [1]    chr22 36816145 - 36816435               *\n [2]    chr22 38467935 - 38468225               *\n          ...                 ...             ...\n[72]    chr22 50270553 - 50270843               *\n[73]    chr22 19131257 - 19131547               *\n[74]    chr22 19014170 - 19014460               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n4.3 Find overlaps with promoters\nThis operation finds ChIP-seq peaks that overlap with our defined promoter regions. If a significant number of peaks fall within promoters, it might suggest that the protein plays a role in gene regulation.\n\npeaks_by_promoters = peaks_chr22.subset_by_overlaps(promoters)\n\nprint(\"Peaks Overlapping with Promoters:\")\nprint(peaks_by_promoters)\n\nPeaks Overlapping with Promoters:\nGenomicRanges with 344 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19756445 - 19756735               *\n  [1]    chr22 37427967 - 37428257               *\n  [2]    chr22 19169462 - 19169752               *\n           ...                 ...             ...\n[341]    chr22 42368884 - 42369174               *\n[342]    chr22 21630789 - 21631079               *\n[343]    chr22 17368148 - 17368438               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n4.4 Find overlaps with exons\nLet’s find overlaps with any exon. We unlist our GenomicRangesList object to get all exon positions.\n\n# Combine all exons into a single GenomicRanges object\nall_exons = by_tx.as_granges()\n\nprint(\"All exons:\")\nprint(all_exons)\n\nAll exons:\nGenomicRanges with 34967 ranges and 6 metadata columns\n                seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\nENST00000006251    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\nENST00000006251    chr22 44702492 - 44702609               + | ENSE00003647870 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         2\nENST00000006251    chr22 44714591 - 44714672               + | ENSE00003614159 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         3\n                     ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n      LRG_989t1    chr22 20996696 - 20996802               + |    LRG_989t1e19       LRG_989t1       LRG_989t1     LZTR1         LRG_989        19\n      LRG_989t1    chr22 20996886 - 20996967               + |    LRG_989t1e20       LRG_989t1       LRG_989t1     LZTR1         LRG_989        20\n      LRG_989t1    chr22 20997232 - 20999033               + |    LRG_989t1e21       LRG_989t1       LRG_989t1     LZTR1         LRG_989        21\n------\nseqinfo(1 sequences): chr22\n\n\nWe can then find peaks that overlap with any of these regions:\n\n# Find peaks overlapping with any exon\npeaks_by_exons = peaks_chr22.subset_by_overlaps(all_exons)\n\nprint(\"Peaks overlapping with exons:\")\nprint(peaks_by_exons)\n\n# Calculate the percentage of peaks that overlap with exons\npercent_overlapping = (len(peaks_by_exons) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_overlapping:.2f}%\")\n\nPeaks overlapping with exons:\nGenomicRanges with 279 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 19756445 - 19756735               *\n           ...                 ...             ...\n[276]    chr22 29307104 - 29307394               *\n[277]    chr22 35552420 - 35552710               *\n[278]    chr22 37931897 - 37932187               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%"
  },
  {
    "objectID": "notebook/genomic_ranges.html#advanced-operations",
    "href": "notebook/genomic_ranges.html#advanced-operations",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "5. Advanced Operations",
    "text": "5. Advanced Operations\nLet’s explore some more complex operations that are often used in genomic analyses.\n\n5.1 Compare exonic vs. intronic binding\nLet’s first identify intronic regions. There are two ways to find introns:\n\nFind introns for each gene, i.e. regions within each gene’s transcript body that do not overlap any of that gene’s exons (using psetdiff in R/Bioconductor).\nFind intronic regions globally, i.e. regions that do not overlap with any exon (using subtract) for any gene. To find these positions, we ignore strand information, because there could be genes that overlap on different strands.\n\nWe will find intronic regions globally (2) for our tutorial today.\nLet’s first get all transcript ranges, following the steps in Section 3.1:\n\n# Get the full extent of each transcript\ntx_ranges = by_tx.range().as_genomic_ranges()\n\nWe now subtract any exons that overlaps within each transcript by ignoring the strand. The result is a GenomicRangesList containing intronic regions for each transcript. We simplify this by coercing this into a GenomicRanges object.\n\nintrons = tx_ranges.subtract(all_exons, ignore_strand=True).as_granges()\n\nprint(\"Intron regions:\")\nprint(introns)\n\nIntron regions:\nGenomicRanges with 5403 ranges and 0 metadata columns\n                seqnames              ranges          strand\n                   &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\nENST00000006251    chr22 44677057 - 44737681               +\nENST00000008876    chr22 50603133 - 50613982               +\nENST00000043402    chr22 20241415 - 20268319               -\n                     ...                 ...             ...\n      LRG_856t2    chr22 33272509 - 33920477               -\n       LRG_97t1    chr22 37225270 - 37244266               -\n      LRG_989t1    chr22 20982297 - 20999033               +\n------\nseqinfo(1 sequences): chr22\n\n\nWe can compare the proportion of peaks overlapping with exons to those overlapping with introns:\n\n# Find peaks overlapping with introns\npeaks_by_introns = peaks_chr22.subset_by_overlaps(introns)\n\nprint(\"Peaks overlapping with introns:\")\nprint(peaks_by_introns)\n\n# Calculate percentages\npercent_exonic = (len(peaks_by_exons) / len(peaks_chr22)) * 100\npercent_intronic = (len(peaks_by_introns) / len(peaks_chr22)) * 100\n\nprint(f\"Percentage of peaks overlapping with exons: {percent_exonic:.2f}%\")\nprint(f\"Percentage of peaks overlapping with introns: {percent_intronic:.2f}%\")\n\nPeaks overlapping with introns:\nGenomicRanges with 1000 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 19766788 - 19767078               *\n  [1]    chr22 17369888 - 17370178               *\n  [2]    chr22 19756445 - 19756735               *\n           ...                 ...             ...\n[997]    chr22 36626768 - 36627058               *\n[998]    chr22 48833277 - 48833567               *\n[999]    chr22 49663362 - 49663652               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\nPercentage of peaks overlapping with exons: 19.36%\nPercentage of peaks overlapping with introns: 69.40%\n\n\nThese percentages may or may not add up to 100%. Some peaks may overlap both introns and exons depending on how wide they are. In our case its because of ignoring strands and finding global intronic regions. Ideally, you may want to filter the peaks based on preference as you annotate them with TSS, promoters, etc.\nThis comparison can help determine if the protein of interest shows a preference for binding in exonic or intronic regions, which could suggest different functional roles (e.g., splicing regulation for exonic binding vs. potential enhancer activity for intronic binding).\n\n\n5.2 Find overlaps with the first exon\nThe rationale for this analysis may vary, but we are mostly showcasing complex genomic operations that can be performed.\nLet’s first put together a GenomicRanges object containing the first exon for each transcript.\n\nall_first = []\nfor txid, grl in by_tx:\n    strand = grl.get_strand(as_type = \"list\")[0]\n    if strand == \"-\":\n        all_first.append(grl.sort()[-1])\n    else:\n        all_first.append(grl.sort()[0])\n\nprint(all_first[:3])\n\n[GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([44677057], dtype=int32), width=array([184], dtype=int32)), strand=[1], mcols=BiocFrame(data={'exon_id': ['ENSE00001838743'], 'tx_name': ['ENST00000006251'], 'tx_id': ['ENST00000006251'], 'gene_name': ['PRR5'], 'gene_id': ['ENSG00000186654'], 'exon_rank': [1]}, number_of_rows=1, row_names=['0'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38'])), GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([50603133], dtype=int32), width=array([366], dtype=int32)), strand=[1], mcols=BiocFrame(data={'exon_id': ['ENSE00003608148'], 'tx_name': ['ENST00000008876'], 'tx_id': ['ENST00000008876'], 'gene_name': ['MAPK8IP2'], 'gene_id': ['ENSG00000008735'], 'exon_rank': [1]}, number_of_rows=1, row_names=['9'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38'])), GenomicRanges(number_of_ranges=1, seqnames=[0], ranges=IRanges(start=array([20268071], dtype=int32), width=array([248], dtype=int32)), strand=[-1], mcols=BiocFrame(data={'exon_id': ['ENSE00001358408'], 'tx_name': ['ENST00000043402'], 'tx_id': ['ENST00000043402'], 'gene_name': ['RTN4R'], 'gene_id': ['ENSG00000040608'], 'exon_rank': [1]}, number_of_rows=1, row_names=['19'], column_names=['exon_id', 'tx_name', 'tx_id', 'gene_name', 'gene_id', 'exon_rank']), seqinfoSeqInfo(number_of_seqnames=1, seqnames=['chr22'], seqlengths=[50818468], is_circular=[False], genome=['GRCh38']))]\n\n\nThen we combine all the individual genomic elements. The biocutils package provides utilities for convenient aspects of R that aren’t provided by base Python and generics. One of these generics is the combine_sequences operation that merges or concatenates 1-dimensional Bioconductor classes.\n\nfrom biocutils import combine_sequences\nfirst_exons = combine_sequences(*all_first)\n\nprint(first_exons)\n\nGenomicRanges with 5387 ranges and 6 metadata columns\n       seqnames              ranges          strand           exon_id         tx_name           tx_id gene_name         gene_id exon_rank\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;            &lt;list&gt;          &lt;list&gt;          &lt;list&gt;    &lt;list&gt;          &lt;list&gt;    &lt;list&gt;\n   [0]    chr22 44677057 - 44677241               + | ENSE00001838743 ENST00000006251 ENST00000006251      PRR5 ENSG00000186654         1\n   [1]    chr22 50603133 - 50603499               + | ENSE00003608148 ENST00000008876 ENST00000008876  MAPK8IP2 ENSG00000008735         1\n   [2]    chr22 20268071 - 20268319               - | ENSE00001358408 ENST00000043402 ENST00000043402     RTN4R ENSG00000040608         1\n            ...                 ...             ... |             ...             ...             ...       ...             ...       ...\n[5384]    chr22 33919995 - 33920477               - |     LRG_856t1e1       LRG_856t2       LRG_856t2    LARGE1         LRG_856         1\n[5385]    chr22 37244114 - 37244266               - |      LRG_97t1e1        LRG_97t1        LRG_97t1      RAC2          LRG_97         1\n[5386]    chr22 20982297 - 20982572               + |     LRG_989t1e1       LRG_989t1       LRG_989t1     LZTR1         LRG_989         1\n------\nseqinfo(1 sequences): chr22\n\n\nWe can now subset peaks that overlap with the first exon:\n\npeaks_with_first_exons = peaks_chr22.subset_by_overlaps(first_exons)\nprint(peaks_with_first_exons)\n\nGenomicRanges with 153 ranges and 0 metadata columns\n      seqnames              ranges          strand\n         &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n  [0]    chr22 17369888 - 17370178               *\n  [1]    chr22 19756445 - 19756735               *\n  [2]    chr22 45975507 - 45975797               *\n           ...                 ...             ...\n[150]    chr22 49500975 - 49501265               *\n[151]    chr22 19131257 - 19131547               *\n[152]    chr22 29307104 - 29307394               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\n\n\n5.3 Resize and Shift Peaks\nResizing and shifting genomic ranges can be useful in various contexts. For example:\n\nNarrowing peaks might help focus on the center of ChIP-seq binding sites.\nShifting ranges can be used to look at regions adjacent to your features of interest. e.g., defining the predicted CRISPR cleavage site based on the position of the CRISPR gRNA sequence.\n\n\nnarrow_peaks = peaks_chr22.narrow(start=10, width=100)\nshifted_peaks = narrow_peaks.shift(10)\n\nprint(\"Narrowed and Shifted Peaks:\")\nprint(shifted_peaks)\n\nNarrowed and Shifted Peaks:\nGenomicRanges with 1441 ranges and 0 metadata columns\n       seqnames              ranges          strand\n          &lt;str&gt;           &lt;IRanges&gt; &lt;ndarray[int8]&gt;\n   [0]    chr22 19766807 - 19766907               *\n   [1]    chr22 17369907 - 17370007               *\n   [2]    chr22 19756464 - 19756564               *\n            ...                 ...             ...\n[1438]    chr22 27212077 - 27212177               *\n[1439]    chr22 49201378 - 49201478               *\n[1440]    chr22 49663381 - 49663481               *\n------\nseqinfo(46 sequences): chr1 chr10 chr11 ... chrUn_KI270750v1 chrUn_KI270752v1 chrX\n\n\nThese operations demonstrate the flexibility of genomic range manipulations, which can be useful for fine-tuning analyses or testing hypotheses about the spatial relationships between genomic features."
  },
  {
    "objectID": "notebook/genomic_ranges.html#exercises",
    "href": "notebook/genomic_ranges.html#exercises",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "6. Exercises",
    "text": "6. Exercises\n\nSplit the input genome reference by gene_name, e.g. a field that contains gene symbols.\nCalculate the average width of the ChIP-seq peaks on chromosome 22.\nCompute the percentage of promoter regions that have at least one overlapping ChIP-seq peak."
  },
  {
    "objectID": "notebook/genomic_ranges.html#conclusion",
    "href": "notebook/genomic_ranges.html#conclusion",
    "title": "Tutorial 1: Perform range-based analyses using GenomicRanges",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we’ve explored how to use BiocPy’s genomic ranges functionality to perform various genomic analyses. These tools and techniques provide a powerful way to work with genomic interval data in Python, mirroring the capabilities from Bioconductor. They form the foundation for many more complex genomic analyses and can be applied to a wide range of biological questions.\nRefer to the BiocPy documentation for more detailed information on these packages and their functionalities."
  }
]